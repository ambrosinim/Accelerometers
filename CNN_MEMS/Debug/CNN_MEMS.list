
CNN_MEMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003434  0800b020  0800b020  0001b020  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e454  0800e454  00020df0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e454  0800e454  0001e454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e45c  0800e45c  00020df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e45c  0800e45c  0001e45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e460  0800e460  0001e460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000df0  20000000  0800e464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020df0  2**0
                  CONTENTS
 10 .bss          00000360  20000df0  20000df0  00020df0  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  20001150  20001150  00020df0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020df0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160f8  00000000  00000000  00020e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e0  00000000  00000000  00036f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  0003a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  0003b3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fd5  00000000  00000000  0003c290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014df6  00000000  00000000  00062265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4191  00000000  00000000  0007705b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ce  00000000  00000000  0015b1ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005438  00000000  00000000  0015b2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001606f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001607c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000df0 	.word	0x20000df0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aff4 	.word	0x0800aff4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000df4 	.word	0x20000df4
 80001cc:	0800aff4 	.word	0x0800aff4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_CRC_Init+0x20>)
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <MX_CRC_Init+0x24>)
 8000ea8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_CRC_Init+0x20>)
 8000eac:	f001 facb 	bl	8002446 <HAL_CRC_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000eb6:	f000 fc7e 	bl	80017b6 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000ed8 	.word	0x20000ed8
 8000ec4:	40023000 	.word	0x40023000

08000ec8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <HAL_CRC_MspInit+0x3c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10d      	bne.n	8000ef6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_CRC_MspInit+0x40>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <HAL_CRC_MspInit+0x40>)
 8000ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_CRC_MspInit+0x40>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023000 	.word	0x40023000
 8000f08:	40023800 	.word	0x40023800

08000f0c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000f16:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <LL_SYSCFG_SetEXTISource+0x58>)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	0c1b      	lsrs	r3, r3, #16
 8000f26:	43db      	mvns	r3, r3
 8000f28:	ea02 0103 	and.w	r1, r2, r3
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	0c1b      	lsrs	r3, r3, #16
 8000f30:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	fab3 f383 	clz	r3, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	fa03 f202 	lsl.w	r2, r3, r2
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <LL_SYSCFG_SetEXTISource+0x58>)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	430a      	orrs	r2, r1
 8000f52:	3302      	adds	r3, #2
 8000f54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40013800 	.word	0x40013800

08000f68 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa93 f3a3 	rbit	r3, r3
 8000f82:	613b      	str	r3, [r7, #16]
  return result;
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	fab3 f383 	clz	r3, r3
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2103      	movs	r1, #3
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	401a      	ands	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	61bb      	str	r3, [r7, #24]
  return result;
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fab3 f383 	clz	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	601a      	str	r2, [r3, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b089      	sub	sp, #36	; 0x24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	613b      	str	r3, [r7, #16]
  return result;
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2103      	movs	r1, #3
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	61bb      	str	r3, [r7, #24]
  return result;
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	431a      	orrs	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	60da      	str	r2, [r3, #12]
}
 8001018:	bf00      	nop
 800101a:	3724      	adds	r7, #36	; 0x24
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	619a      	str	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	041a      	lsls	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800106a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4313      	orrs	r3, r2
 8001072:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4013      	ands	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	40023800 	.word	0x40023800

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001096:	f107 0318 	add.w	r3, r7, #24
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80010b0:	2010      	movs	r0, #16
 80010b2:	f7ff ffd5 	bl	8001060 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80010b6:	2004      	movs	r0, #4
 80010b8:	f7ff ffd2 	bl	8001060 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	f7ff ffcf 	bl	8001060 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff ffcc 	bl	8001060 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80010c8:	2008      	movs	r0, #8
 80010ca:	f7ff ffc9 	bl	8001060 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(SPI_CS_GPIO_Port, SPI_CS_Pin);
 80010ce:	2108      	movs	r1, #8
 80010d0:	4828      	ldr	r0, [pc, #160]	; (8001174 <MX_GPIO_Init+0xe4>)
 80010d2:	f7ff ffa7 	bl	8001024 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin);
 80010d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010da:	4827      	ldr	r0, [pc, #156]	; (8001178 <MX_GPIO_Init+0xe8>)
 80010dc:	f7ff ffb0 	bl	8001040 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80010e0:	2308      	movs	r3, #8
 80010e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010e4:	2301      	movs	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 80010e8:	2301      	movs	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	481e      	ldr	r0, [pc, #120]	; (8001174 <MX_GPIO_Init+0xe4>)
 80010fa:	f003 fdc9 	bl	8004c90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 80010fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001102:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001104:	2301      	movs	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4817      	ldr	r0, [pc, #92]	; (8001178 <MX_GPIO_Init+0xe8>)
 800111a:	f003 fdb9 	bl	8004c90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = INT_1_Pin|INT_2_Pin;
 800111e:	2303      	movs	r3, #3
 8001120:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_GPIO_Init+0xe4>)
 8001130:	f003 fdae 	bl	8004c90 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8001134:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff fee7 	bl	8000f0c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001142:	2301      	movs	r3, #1
 8001144:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001146:	2300      	movs	r3, #0
 8001148:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800114a:	2301      	movs	r3, #1
 800114c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fc16 	bl	8004984 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin, LL_GPIO_PULL_DOWN);
 8001158:	2202      	movs	r2, #2
 800115a:	2101      	movs	r1, #1
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_GPIO_Init+0xec>)
 800115e:	f7ff ff32 	bl	8000fc6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin, LL_GPIO_MODE_INPUT);
 8001162:	2200      	movs	r2, #0
 8001164:	2101      	movs	r1, #1
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_GPIO_Init+0xec>)
 8001168:	f7ff fefe 	bl	8000f68 <LL_GPIO_SetPinMode>

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40020000 	.word	0x40020000

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001184:	f6ad 1d78 	subw	sp, sp, #2424	; 0x978
 8001188:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	// init, reset and start the cycle counter
		*SCB_DEMCR = *SCB_DEMCR | 0x01000000;
 800118a:	4b99      	ldr	r3, [pc, #612]	; (80013f0 <main+0x270>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <main+0x270>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001198:	601a      	str	r2, [r3, #0]
		*DWT_CYCCNT = 0; 							// reset the counter
 800119a:	4b96      	ldr	r3, [pc, #600]	; (80013f4 <main+0x274>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
		*DWT_CONTROL = *DWT_CONTROL | 1 ; 			// enable the counter
 80011a2:	4b95      	ldr	r3, [pc, #596]	; (80013f8 <main+0x278>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b93      	ldr	r3, [pc, #588]	; (80013f8 <main+0x278>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 0201 	orr.w	r2, r2, #1
 80011b0:	601a      	str	r2, [r3, #0]



		u_int8_t k;
		char buf[50]; //	just 4 strings
		  int buf_len = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
		  // Buffers used to store input and output tensors
		  AI_ALIGNED(4) ai_float in_data[AI_NETWORK_NORMALIZED_IN_1_SIZE_BYTES];
		  AI_ALIGNED(4) ai_float out_data[AI_NETWORK_NORMALIZED_OUT_1_SIZE_BYTES];
		  ////////////////////////////////AI_ALIGNED(4) ai_i8 my_samples =
		  // Pointer to our model
		  ai_handle network_normalized = AI_HANDLE_NULL;
 80011b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

		  // Initialize wrapper structs that hold pointers to data and info about the
		  // data (tensor height, width, channels)
		  ai_buffer ai_input[AI_NETWORK_NORMALIZED_IN_NUM] = AI_NETWORK_NORMALIZED_IN;
 80011c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011c4:	4a8d      	ldr	r2, [pc, #564]	; (80013fc <main+0x27c>)
 80011c6:	461c      	mov	r4, r3
 80011c8:	4615      	mov	r5, r2
 80011ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011d2:	e884 0003 	stmia.w	r4, {r0, r1}
		  ai_buffer ai_output[AI_NETWORK_NORMALIZED_OUT_NUM] = AI_NETWORK_NORMALIZED_OUT;
 80011d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011da:	4a89      	ldr	r2, [pc, #548]	; (8001400 <main+0x280>)
 80011dc:	461c      	mov	r4, r3
 80011de:	4615      	mov	r5, r2
 80011e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011e8:	e884 0003 	stmia.w	r4, {r0, r1}
		  // Set working memory and get weights/biases from model
		  /*ai_network_params ai_params1 = {
		    AI_NETWORK_DATA_WEIGHTS(ai_myacc_model_data_weights_get()),
		    AI_NETWORK_DATA_ACTIVATIONS(activations)
		  };*/
		  ai_network_params ai_params = AI_NETWORK_PARAMS_INIT(AI_NETWORK_NORMALIZED_DATA_WEIGHTS(ai_network_normalized_data_weights_get()),
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4a85      	ldr	r2, [pc, #532]	; (8001404 <main+0x284>)
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2201      	movs	r2, #1
 80011f6:	809a      	strh	r2, [r3, #4]
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2201      	movs	r2, #1
 80011fc:	80da      	strh	r2, [r3, #6]
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2201      	movs	r2, #1
 8001202:	811a      	strh	r2, [r3, #8]
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	f642 628c 	movw	r2, #11916	; 0x2e8c
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	f003 ff9a 	bl	8005144 <ai_network_normalized_data_weights_get>
 8001210:	4602      	mov	r2, r0
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4a7a      	ldr	r2, [pc, #488]	; (8001408 <main+0x288>)
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2201      	movs	r2, #1
 8001226:	839a      	strh	r2, [r3, #28]
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2201      	movs	r2, #1
 800122c:	83da      	strh	r2, [r3, #30]
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2201      	movs	r2, #1
 8001232:	841a      	strh	r2, [r3, #32]
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800123a:	625a      	str	r2, [r3, #36]	; 0x24
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c
				   AI_NETWORK_NORMALIZED_DATA_ACTIVATIONS(activations));
		  // Set pointers wrapper structs to our data buffers
		  ai_input[0].n_batches = 1;
 800124a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800124e:	2201      	movs	r2, #1
 8001250:	809a      	strh	r2, [r3, #4]
		  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001252:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001256:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800125a:	611a      	str	r2, [r3, #16]
		  ai_output[0].n_batches = 1;
 800125c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001260:	2201      	movs	r2, #1
 8001262:	809a      	strh	r2, [r3, #4]
		  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001264:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001268:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800126c:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 ff43 	bl	80020f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 fa1f 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f7ff ff0b 	bl	8001090 <MX_GPIO_Init>
  MX_TIM3_Init();
 800127a:	f000 fe1f 	bl	8001ebc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800127e:	f000 fe97 	bl	8001fb0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001282:	f000 fae1 	bl	8001848 <MX_SPI1_Init>
  MX_CRC_Init();
 8001286:	f7ff fe0b 	bl	8000ea0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128a:	f7ff ff01 	bl	8001090 <MX_GPIO_Init>
  MX_TIM3_Init();
 800128e:	f000 fe15 	bl	8001ebc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001292:	f000 fe8d 	bl	8001fb0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001296:	f000 fad7 	bl	8001848 <MX_SPI1_Init>
  MX_CRC_Init();
 800129a:	f7ff fe01 	bl	8000ea0 <MX_CRC_Init>

  //LL_SPI_Enable(LIS3DSH_SPI);
    Acc_Config();
 800129e:	f000 fa73 	bl	8001788 <Acc_Config>

    // Start timer/counter
    HAL_TIM_Base_Start(&htim3);
 80012a2:	485a      	ldr	r0, [pc, #360]	; (800140c <main+0x28c>)
 80012a4:	f001 ff8e 	bl	80031c4 <HAL_TIM_Base_Start>

    // Greetings!
    buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 80012a8:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80012ac:	4958      	ldr	r1, [pc, #352]	; (8001410 <main+0x290>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 fbe4 	bl	8008a7c <siprintf>
 80012b4:	f8c7 094c 	str.w	r0, [r7, #2380]	; 0x94c
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80012b8:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 80012c2:	2364      	movs	r3, #100	; 0x64
 80012c4:	4853      	ldr	r0, [pc, #332]	; (8001414 <main+0x294>)
 80012c6:	f002 fbaa 	bl	8003a1e <HAL_UART_Transmit>

    // Create instance of neural network
    ai_err = ai_network_normalized_create(&network_normalized, AI_NETWORK_NORMALIZED_DATA_CONFIG);
 80012ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fed5 	bl	8005080 <ai_network_normalized_create>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if (ai_err.type != AI_ERROR_NONE)
 80012dc:	f897 3908 	ldrb.w	r3, [r7, #2312]	; 0x908
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d011      	beq.n	8001308 <main+0x188>
    {
      buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80012e4:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80012e8:	494b      	ldr	r1, [pc, #300]	; (8001418 <main+0x298>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f007 fbc6 	bl	8008a7c <siprintf>
 80012f0:	f8c7 094c 	str.w	r0, [r7, #2380]	; 0x94c
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80012f4:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 80012fe:	2364      	movs	r3, #100	; 0x64
 8001300:	4844      	ldr	r0, [pc, #272]	; (8001414 <main+0x294>)
 8001302:	f002 fb8c 	bl	8003a1e <HAL_UART_Transmit>
      while(1);
 8001306:	e7fe      	b.n	8001306 <main+0x186>
    }

    // Initialize neural network
    if (!ai_network_normalized_init(network_normalized, &ai_params))
 8001308:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	1d3a      	adds	r2, r7, #4
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f003 feca 	bl	80050ac <ai_network_normalized_init>
 8001318:	4603      	mov	r3, r0
 800131a:	f083 0301 	eor.w	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d011      	beq.n	8001348 <main+0x1c8>
    {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001324:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8001328:	493c      	ldr	r1, [pc, #240]	; (800141c <main+0x29c>)
 800132a:	4618      	mov	r0, r3
 800132c:	f007 fba6 	bl	8008a7c <siprintf>
 8001330:	f8c7 094c 	str.w	r0, [r7, #2380]	; 0x94c
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001334:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8001338:	b29a      	uxth	r2, r3
 800133a:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 800133e:	2364      	movs	r3, #100	; 0x64
 8001340:	4834      	ldr	r0, [pc, #208]	; (8001414 <main+0x294>)
 8001342:	f002 fb6c 	bl	8003a1e <HAL_UART_Transmit>
      while(1);
 8001346:	e7fe      	b.n	8001346 <main+0x1c6>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buf_len = sprintf(buf, "Done: 25 samples Acc\r\n");
 8001348:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 800134c:	4934      	ldr	r1, [pc, #208]	; (8001420 <main+0x2a0>)
 800134e:	4618      	mov	r0, r3
 8001350:	f007 fb94 	bl	8008a7c <siprintf>
 8001354:	f8c7 094c 	str.w	r0, [r7, #2380]	; 0x94c
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001358:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800135c:	b29a      	uxth	r2, r3
 800135e:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 8001362:	2364      	movs	r3, #100	; 0x64
 8001364:	482b      	ldr	r0, [pc, #172]	; (8001414 <main+0x294>)
 8001366:	f002 fb5a 	bl	8003a1e <HAL_UART_Transmit>

	  if (dataReady) {
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <main+0x2a4>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d036      	beq.n	80013e0 <main+0x260>

		  LIS3DSH_ReadACC(accData[idx++]);
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <main+0x2a8>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	b291      	uxth	r1, r2
 800137a:	4a2b      	ldr	r2, [pc, #172]	; (8001428 <main+0x2a8>)
 800137c:	8011      	strh	r1, [r2, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4a28      	ldr	r2, [pc, #160]	; (800142c <main+0x2ac>)
 800138a:	4413      	add	r3, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fb41 	bl	8001a14 <LIS3DSH_ReadACC>

		  if (idx == SIZE)
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <main+0x2a8>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	2b19      	cmp	r3, #25
 8001398:	d11f      	bne.n	80013da <main+0x25a>
		  {
	  	        buf_len = sprintf(buf, "Done: 25 samples %d\r\n", accData[idx-1][0][0]);
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <main+0x2a8>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	4922      	ldr	r1, [pc, #136]	; (800142c <main+0x2ac>)
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	440b      	add	r3, r1
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	461a      	mov	r2, r3
 80013b2:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80013b6:	491e      	ldr	r1, [pc, #120]	; (8001430 <main+0x2b0>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f007 fb5f 	bl	8008a7c <siprintf>
 80013be:	f8c7 094c 	str.w	r0, [r7, #2380]	; 0x94c
	  	        HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80013c2:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 80013cc:	2364      	movs	r3, #100	; 0x64
 80013ce:	4811      	ldr	r0, [pc, #68]	; (8001414 <main+0x294>)
 80013d0:	f002 fb25 	bl	8003a1e <HAL_UART_Transmit>
			  idx = 0;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <main+0x2a8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	801a      	strh	r2, [r3, #0]
			  }
			  dataReady = 0;
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <main+0x2a4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
		  }
	  /* Fill input buffer (use test value) */
	  for (uint32_t i = 0; i < AI_NETWORK_NORMALIZED_IN_1_HEIGHT; i++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 80013e6:	e051      	b.n	800148c <main+0x30c>
	  {
		  for (uint32_t j = 0; j < AI_NETWORK_NORMALIZED_IN_1_WIDTH; j++)  {
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 80013ee:	e044      	b.n	800147a <main+0x2fa>
 80013f0:	2000039c 	.word	0x2000039c
 80013f4:	20000394 	.word	0x20000394
 80013f8:	20000398 	.word	0x20000398
 80013fc:	0800b134 	.word	0x0800b134
 8001400:	0800b14c 	.word	0x0800b14c
 8001404:	40040440 	.word	0x40040440
 8001408:	00040440 	.word	0x00040440
 800140c:	200010b0 	.word	0x200010b0
 8001410:	0800b020 	.word	0x0800b020
 8001414:	200010f8 	.word	0x200010f8
 8001418:	0800b03c 	.word	0x0800b03c
 800141c:	0800b064 	.word	0x0800b064
 8001420:	0800b088 	.word	0x0800b088
 8001424:	20000e0e 	.word	0x20000e0e
 8001428:	20000e10 	.word	0x20000e10
 800142c:	20000fb4 	.word	0x20000fb4
 8001430:	0800b0a0 	.word	0x0800b0a0
			  ((ai_float*)in_data)[(i+j)] = ((ai_float)my_tick[i][j][0]*0); //my_samples
 8001434:	4993      	ldr	r1, [pc, #588]	; (8001684 <main+0x504>)
 8001436:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	f8d7 2954 	ldr.w	r2, [r7, #2388]	; 0x954
 8001444:	4413      	add	r3, r2
 8001446:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001452:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8001456:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001462:	4413      	add	r3, r2
 8001464:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001688 <main+0x508>
 8001468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146c:	edc3 7a00 	vstr	s15, [r3]
		  for (uint32_t j = 0; j < AI_NETWORK_NORMALIZED_IN_1_WIDTH; j++)  {
 8001470:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8001474:	3301      	adds	r3, #1
 8001476:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800147a:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800147e:	2b02      	cmp	r3, #2
 8001480:	d9d8      	bls.n	8001434 <main+0x2b4>
	  for (uint32_t i = 0; i < AI_NETWORK_NORMALIZED_IN_1_HEIGHT; i++)
 8001482:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8001486:	3301      	adds	r3, #1
 8001488:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 800148c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8001490:	2b18      	cmp	r3, #24
 8001492:	d9a9      	bls.n	80013e8 <main+0x268>
		  }
	  }


  	      // Get current timestamp
  	      timestamp = htim3.Instance->CNT;
 8001494:	4b7d      	ldr	r3, [pc, #500]	; (800168c <main+0x50c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
  	      // Perform inference
  	      nbatch = ai_network_normalized_run(network_normalized, &ai_input[0], &ai_output[0]);
 800149e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80014a8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 fe39 	bl	8005124 <ai_network_normalized_run>
 80014b2:	f8c7 0944 	str.w	r0, [r7, #2372]	; 0x944
  	      if (nbatch != 1) {
 80014b6:	f8d7 3944 	ldr.w	r3, [r7, #2372]	; 0x944
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d010      	beq.n	80014e0 <main+0x360>
  	        buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80014be:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80014c2:	4973      	ldr	r1, [pc, #460]	; (8001690 <main+0x510>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f007 fad9 	bl	8008a7c <siprintf>
 80014ca:	f8c7 094c 	str.w	r0, [r7, #2380]	; 0x94c
  	        HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80014ce:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 80014d8:	2364      	movs	r3, #100	; 0x64
 80014da:	486e      	ldr	r0, [pc, #440]	; (8001694 <main+0x514>)
 80014dc:	f002 fa9f 	bl	8003a1e <HAL_UART_Transmit>
  	      }

  	      // Read output (predicted y) of neural network
  	    	  y_val = ((float *)out_data);
 80014e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014e4:	f8c7 3940 	str.w	r3, [r7, #2368]	; 0x940

  		      k = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
  		      float max = y_val[k];
 80014ee:	f897 395f 	ldrb.w	r3, [r7, #2399]	; 0x95f
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	f8d7 2940 	ldr.w	r2, [r7, #2368]	; 0x940
 80014f8:	4413      	add	r3, r2
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 8001500:	6013      	str	r3, [r2, #0]
  			  if (y_val[1] > max){
 8001502:	f8d7 3940 	ldr.w	r3, [r7, #2368]	; 0x940
 8001506:	3304      	adds	r3, #4
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8001510:	ed93 7a00 	vldr	s14, [r3]
 8001514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	d508      	bpl.n	8001530 <main+0x3b0>
  				  max = (float)y_val[1];
 800151e:	f8d7 3940 	ldr.w	r3, [r7, #2368]	; 0x940
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 8001528:	6013      	str	r3, [r2, #0]
  				  k = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
  			  }
  			  if (y_val[2] > max){
 8001530:	f8d7 3940 	ldr.w	r3, [r7, #2368]	; 0x940
 8001534:	3308      	adds	r3, #8
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	d50f      	bpl.n	800156c <main+0x3ec>
  				  max = (int)y_val[2];
 800154c:	f8d7 3940 	ldr.w	r3, [r7, #2368]	; 0x940
 8001550:	3308      	adds	r3, #8
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8001562:	edc3 7a00 	vstr	s15, [r3]
  				  k = 2;
 8001566:	2302      	movs	r3, #2
 8001568:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f


  	      // Print output of neural network along with inference time (microseconds)
  	      buf_len = sprintf(buf,
  	                        "Output: %f, %f, %f CLASS: %c\r\n",
  	                        y_val[0],y_val[1],y_val[2],
 800156c:	f8d7 3940 	ldr.w	r3, [r7, #2368]	; 0x940
 8001570:	681b      	ldr	r3, [r3, #0]
  	      buf_len = sprintf(buf,
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffe8 	bl	8000548 <__aeabi_f2d>
 8001578:	4680      	mov	r8, r0
 800157a:	4689      	mov	r9, r1
  	                        y_val[0],y_val[1],y_val[2],
 800157c:	f8d7 3940 	ldr.w	r3, [r7, #2368]	; 0x940
 8001580:	3304      	adds	r3, #4
 8001582:	681b      	ldr	r3, [r3, #0]
  	      buf_len = sprintf(buf,
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffdf 	bl	8000548 <__aeabi_f2d>
 800158a:	4604      	mov	r4, r0
 800158c:	460d      	mov	r5, r1
  	                        y_val[0],y_val[1],y_val[2],
 800158e:	f8d7 3940 	ldr.w	r3, [r7, #2368]	; 0x940
 8001592:	3308      	adds	r3, #8
 8001594:	681b      	ldr	r3, [r3, #0]
  	      buf_len = sprintf(buf,
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffd6 	bl	8000548 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	f897 195f 	ldrb.w	r1, [r7, #2399]	; 0x95f
 80015a4:	483c      	ldr	r0, [pc, #240]	; (8001698 <main+0x518>)
 80015a6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80015aa:	f607 100c 	addw	r0, r7, #2316	; 0x90c
 80015ae:	9104      	str	r1, [sp, #16]
 80015b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015b4:	e9cd 4500 	strd	r4, r5, [sp]
 80015b8:	4642      	mov	r2, r8
 80015ba:	464b      	mov	r3, r9
 80015bc:	4937      	ldr	r1, [pc, #220]	; (800169c <main+0x51c>)
 80015be:	f007 fa5d 	bl	8008a7c <siprintf>
 80015c2:	f8c7 094c 	str.w	r0, [r7, #2380]	; 0x94c
  	                        classes[k]);   //| Duration: %lu\r  htim3.Instance->CNT - timestamp,


  	      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80015c6:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	4830      	ldr	r0, [pc, #192]	; (8001694 <main+0x514>)
 80015d4:	f002 fa23 	bl	8003a1e <HAL_UART_Transmit>



  	      buf_len = sprintf(buf,
  	                        "input: %f, %f, %f \r\n",
							(ai_float)my_tick_normalized[0][0][0],(ai_float)my_circle_normalized[0][1][0],(ai_float)my_circle_normalized[0][2][0]);   //| Duration: %lu\r  htim3.Instance->CNT - timestamp,
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <main+0x520>)
 80015da:	681b      	ldr	r3, [r3, #0]
  	      buf_len = sprintf(buf,
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffb3 	bl	8000548 <__aeabi_f2d>
 80015e2:	4680      	mov	r8, r0
 80015e4:	4689      	mov	r9, r1
							(ai_float)my_tick_normalized[0][0][0],(ai_float)my_circle_normalized[0][1][0],(ai_float)my_circle_normalized[0][2][0]);   //| Duration: %lu\r  htim3.Instance->CNT - timestamp,
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <main+0x524>)
 80015e8:	685b      	ldr	r3, [r3, #4]
  	      buf_len = sprintf(buf,
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffac 	bl	8000548 <__aeabi_f2d>
 80015f0:	4604      	mov	r4, r0
 80015f2:	460d      	mov	r5, r1
							(ai_float)my_tick_normalized[0][0][0],(ai_float)my_circle_normalized[0][1][0],(ai_float)my_circle_normalized[0][2][0]);   //| Duration: %lu\r  htim3.Instance->CNT - timestamp,
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <main+0x524>)
 80015f6:	689b      	ldr	r3, [r3, #8]
  	      buf_len = sprintf(buf,
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ffa5 	bl	8000548 <__aeabi_f2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	f607 100c 	addw	r0, r7, #2316	; 0x90c
 8001606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800160a:	e9cd 4500 	strd	r4, r5, [sp]
 800160e:	4642      	mov	r2, r8
 8001610:	464b      	mov	r3, r9
 8001612:	4925      	ldr	r1, [pc, #148]	; (80016a8 <main+0x528>)
 8001614:	f007 fa32 	bl	8008a7c <siprintf>
 8001618:	f8c7 094c 	str.w	r0, [r7, #2380]	; 0x94c


  	      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800161c:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8001620:	b29a      	uxth	r2, r3
 8001622:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 8001626:	2364      	movs	r3, #100	; 0x64
 8001628:	481a      	ldr	r0, [pc, #104]	; (8001694 <main+0x514>)
 800162a:	f002 f9f8 	bl	8003a1e <HAL_UART_Transmit>

  	      buf_len = sprintf(buf,
  	                        "AccData: %d, %d, %d CLASS: %c\r\n",
							accData[0][0][0],accData[0][1][0],accData[0][2][0],
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <main+0x52c>)
 8001630:	f9b3 3000 	ldrsh.w	r3, [r3]
  	      buf_len = sprintf(buf,
 8001634:	461c      	mov	r4, r3
							accData[0][0][0],accData[0][1][0],accData[0][2][0],
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <main+0x52c>)
 8001638:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  	      buf_len = sprintf(buf,
 800163c:	461d      	mov	r5, r3
							accData[0][0][0],accData[0][1][0],accData[0][2][0],
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <main+0x52c>)
 8001640:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  	      buf_len = sprintf(buf,
 8001644:	4619      	mov	r1, r3
 8001646:	f897 395f 	ldrb.w	r3, [r7, #2399]	; 0x95f
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <main+0x518>)
 800164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001650:	f607 100c 	addw	r0, r7, #2316	; 0x90c
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	9100      	str	r1, [sp, #0]
 8001658:	462b      	mov	r3, r5
 800165a:	4622      	mov	r2, r4
 800165c:	4914      	ldr	r1, [pc, #80]	; (80016b0 <main+0x530>)
 800165e:	f007 fa0d 	bl	8008a7c <siprintf>
 8001662:	f8c7 094c 	str.w	r0, [r7, #2380]	; 0x94c
  	                        classes[k]);   //| Duration: %lu\r  htim3.Instance->CNT - timestamp,


  	      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001666:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800166a:	b29a      	uxth	r2, r3
 800166c:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <main+0x514>)
 8001674:	f002 f9d3 	bl	8003a1e <HAL_UART_Transmit>

  	      // Wait before doing it again
  	      HAL_Delay(500);
 8001678:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800167c:	f000 fdae 	bl	80021dc <HAL_Delay>
  {
 8001680:	e662      	b.n	8001348 <main+0x1c8>
 8001682:	bf00      	nop
 8001684:	20000004 	.word	0x20000004
 8001688:	00000000 	.word	0x00000000
 800168c:	200010b0 	.word	0x200010b0
 8001690:	0800b0b8 	.word	0x0800b0b8
 8001694:	200010f8 	.word	0x200010f8
 8001698:	20000388 	.word	0x20000388
 800169c:	0800b0dc 	.word	0x0800b0dc
 80016a0:	2000025c 	.word	0x2000025c
 80016a4:	20000130 	.word	0x20000130
 80016a8:	0800b0fc 	.word	0x0800b0fc
 80016ac:	20000fb4 	.word	0x20000fb4
 80016b0:	0800b114 	.word	0x0800b114

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b094      	sub	sp, #80	; 0x50
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0320 	add.w	r3, r7, #32
 80016be:	2230      	movs	r2, #48	; 0x30
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f006 fcae 	bl	8008024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <SystemClock_Config+0xcc>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	4a27      	ldr	r2, [pc, #156]	; (8001780 <SystemClock_Config+0xcc>)
 80016e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e6:	6413      	str	r3, [r2, #64]	; 0x40
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <SystemClock_Config+0xcc>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f4:	2300      	movs	r3, #0
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <SystemClock_Config+0xd0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a21      	ldr	r2, [pc, #132]	; (8001784 <SystemClock_Config+0xd0>)
 80016fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <SystemClock_Config+0xd0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001710:	2301      	movs	r3, #1
 8001712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171a:	2302      	movs	r3, #2
 800171c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001724:	2308      	movs	r3, #8
 8001726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001728:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800172c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800172e:	2302      	movs	r3, #2
 8001730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001732:	2304      	movs	r3, #4
 8001734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	4618      	mov	r0, r3
 800173c:	f001 f8ce 	bl	80028dc <HAL_RCC_OscConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001746:	f000 f836 	bl	80017b6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174a:	230f      	movs	r3, #15
 800174c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174e:	2302      	movs	r3, #2
 8001750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001756:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800175a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2105      	movs	r1, #5
 8001768:	4618      	mov	r0, r3
 800176a:	f001 fb2f 	bl	8002dcc <HAL_RCC_ClockConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001774:	f000 f81f 	bl	80017b6 <Error_Handler>
  }
}
 8001778:	bf00      	nop
 800177a:	3750      	adds	r7, #80	; 0x50
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000

08001788 <Acc_Config>:

/* USER CODE BEGIN 4 */
void Acc_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	LIS3DSH_InitTypeDef AccInitStruct;

	AccInitStruct.Output_DataRate = LIS3DSH_DATARATE_12_5 ; // 10Hz SAMPLING
 800178e:	2330      	movs	r3, #48	; 0x30
 8001790:	703b      	strb	r3, [r7, #0]
	AccInitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 8001792:	2307      	movs	r3, #7
 8001794:	707b      	strb	r3, [r7, #1]
	AccInitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 8001796:	2300      	movs	r3, #0
 8001798:	70bb      	strb	r3, [r7, #2]
	AccInitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 800179a:	2300      	movs	r3, #0
 800179c:	70fb      	strb	r3, [r7, #3]
	AccInitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 800179e:	2300      	movs	r3, #0
 80017a0:	713b      	strb	r3, [r7, #4]
	AccInitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 80017a2:	2300      	movs	r3, #0
 80017a4:	717b      	strb	r3, [r7, #5]

	LIS3DSH_Init(&AccInitStruct);
 80017a6:	463b      	mov	r3, r7
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f904 	bl	80019b6 <LIS3DSH_Init>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017ba:	b672      	cpsid	i
}
 80017bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017be:	e7fe      	b.n	80017be <Error_Handler+0x8>

080017c0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f023 0210 	bic.w	r2, r3, #16
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	605a      	str	r2, [r3, #4]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <LL_AHB1_GRP1_EnableClock>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4013      	ands	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40023800 	.word	0x40023800

08001818 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <LL_APB2_GRP1_EnableClock+0x2c>)
 800182e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40023800 	.word	0x40023800

08001848 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b090      	sub	sp, #64	; 0x40
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	2228      	movs	r2, #40	; 0x28
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f006 fbe4 	bl	8008024 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
 800186a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800186c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001870:	f7ff ffd2 	bl	8001818 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff ffb7 	bl	80017e8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800187a:	23e0      	movs	r3, #224	; 0xe0
 800187c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800187e:	2302      	movs	r3, #2
 8001880:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800188e:	2305      	movs	r3, #5
 8001890:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	463b      	mov	r3, r7
 8001894:	4619      	mov	r1, r3
 8001896:	4814      	ldr	r0, [pc, #80]	; (80018e8 <MX_SPI1_Init+0xa0>)
 8001898:	f003 f9fa 	bl	8004c90 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80018a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80018a4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80018b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80018b8:	2308      	movs	r3, #8
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80018bc:	2300      	movs	r3, #0
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_ENABLE;
 80018c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80018c6:	230a      	movs	r3, #10
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80018ca:	f107 0318 	add.w	r3, r7, #24
 80018ce:	4619      	mov	r1, r3
 80018d0:	4806      	ldr	r0, [pc, #24]	; (80018ec <MX_SPI1_Init+0xa4>)
 80018d2:	f003 fa73 	bl	8004dbc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80018d6:	2100      	movs	r1, #0
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_SPI1_Init+0xa4>)
 80018da:	f7ff ff71 	bl	80017c0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	3740      	adds	r7, #64	; 0x40
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40013000 	.word	0x40013000

080018f0 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b02      	cmp	r3, #2
 8001928:	d101      	bne.n	800192e <LL_SPI_IsActiveFlag_TXE+0x18>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	330c      	adds	r3, #12
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	330c      	adds	r3, #12
 8001968:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_GPIO_SetOutputPin>:
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	619a      	str	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_GPIO_ResetOutputPin>:
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	619a      	str	r2, [r3, #24]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains values of different init parameters
  * @retval None
  */
void LIS3DSH_Init(LIS3DSH_InitTypeDef* InitStruct)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  //LIS3DSH_LowLevel_Init();

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct->Output_DataRate | InitStruct->Axes_Enable);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	781a      	ldrb	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	785b      	ldrb	r3, [r3, #1]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG4 register */
  LIS3DSH_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 80019d0:	f107 030f 	add.w	r3, r7, #15
 80019d4:	2201      	movs	r2, #1
 80019d6:	2120      	movs	r1, #32
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f8f7 	bl	8001bcc <LIS3DSH_Write>

  /* Configure MEMS: full scale and self test */
//  ctrl = (uint8_t) (InitStruct >> 8);

  ctrl = (uint8_t) (InitStruct->SPI_Wire | InitStruct->Self_Test | InitStruct->Full_Scale | InitStruct->Filter_BW);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	789a      	ldrb	r2, [r3, #2]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	78db      	ldrb	r3, [r3, #3]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	795b      	ldrb	r3, [r3, #5]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  LIS3DSH_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 80019fc:	f107 030f 	add.w	r3, r7, #15
 8001a00:	2201      	movs	r2, #1
 8001a02:	2124      	movs	r1, #36	; 0x24
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 f8e1 	bl	8001bcc <LIS3DSH_Write>
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on output buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001a20:	4b65      	ldr	r3, [pc, #404]	; (8001bb8 <LIS3DSH_ReadACC+0x1a4>)
 8001a22:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]

  LIS3DSH_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8001a2a:	f107 030b 	add.w	r3, r7, #11
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2124      	movs	r1, #36	; 0x24
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f8fa 	bl	8001c2c <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2128      	movs	r1, #40	; 0x28
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f8f3 	bl	8001c2c <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2129      	movs	r1, #41	; 0x29
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f8eb 	bl	8001c2c <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	212a      	movs	r1, #42	; 0x2a
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f8e3 	bl	8001c2c <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	3303      	adds	r3, #3
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	212b      	movs	r1, #43	; 0x2b
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 f8db 	bl	8001c2c <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f8d3 	bl	8001c2c <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	3305      	adds	r3, #5
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	212d      	movs	r1, #45	; 0x2d
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 f8cb 	bl	8001c2c <LIS3DSH_Read>

  switch(crtl & LIS3DSH__FULLSCALE_SELECTION)
 8001a96:	7afb      	ldrb	r3, [r7, #11]
 8001a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a9c:	2b20      	cmp	r3, #32
 8001a9e:	d854      	bhi.n	8001b4a <LIS3DSH_ReadACC+0x136>
 8001aa0:	a201      	add	r2, pc, #4	; (adr r2, 8001aa8 <LIS3DSH_ReadACC+0x94>)
 8001aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa6:	bf00      	nop
 8001aa8:	08001b2d 	.word	0x08001b2d
 8001aac:	08001b4b 	.word	0x08001b4b
 8001ab0:	08001b4b 	.word	0x08001b4b
 8001ab4:	08001b4b 	.word	0x08001b4b
 8001ab8:	08001b4b 	.word	0x08001b4b
 8001abc:	08001b4b 	.word	0x08001b4b
 8001ac0:	08001b4b 	.word	0x08001b4b
 8001ac4:	08001b4b 	.word	0x08001b4b
 8001ac8:	08001b33 	.word	0x08001b33
 8001acc:	08001b4b 	.word	0x08001b4b
 8001ad0:	08001b4b 	.word	0x08001b4b
 8001ad4:	08001b4b 	.word	0x08001b4b
 8001ad8:	08001b4b 	.word	0x08001b4b
 8001adc:	08001b4b 	.word	0x08001b4b
 8001ae0:	08001b4b 	.word	0x08001b4b
 8001ae4:	08001b4b 	.word	0x08001b4b
 8001ae8:	08001b39 	.word	0x08001b39
 8001aec:	08001b4b 	.word	0x08001b4b
 8001af0:	08001b4b 	.word	0x08001b4b
 8001af4:	08001b4b 	.word	0x08001b4b
 8001af8:	08001b4b 	.word	0x08001b4b
 8001afc:	08001b4b 	.word	0x08001b4b
 8001b00:	08001b4b 	.word	0x08001b4b
 8001b04:	08001b4b 	.word	0x08001b4b
 8001b08:	08001b3f 	.word	0x08001b3f
 8001b0c:	08001b4b 	.word	0x08001b4b
 8001b10:	08001b4b 	.word	0x08001b4b
 8001b14:	08001b4b 	.word	0x08001b4b
 8001b18:	08001b4b 	.word	0x08001b4b
 8001b1c:	08001b4b 	.word	0x08001b4b
 8001b20:	08001b4b 	.word	0x08001b4b
 8001b24:	08001b4b 	.word	0x08001b4b
 8001b28:	08001b45 	.word	0x08001b45
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <LIS3DSH_ReadACC+0x1a4>)
 8001b2e:	61bb      	str	r3, [r7, #24]
    break;
 8001b30:	e00c      	b.n	8001b4c <LIS3DSH_ReadACC+0x138>

    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <LIS3DSH_ReadACC+0x1a8>)
 8001b34:	61bb      	str	r3, [r7, #24]
    break;
 8001b36:	e009      	b.n	8001b4c <LIS3DSH_ReadACC+0x138>

    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <LIS3DSH_ReadACC+0x1ac>)
 8001b3a:	61bb      	str	r3, [r7, #24]
    break;
 8001b3c:	e006      	b.n	8001b4c <LIS3DSH_ReadACC+0x138>

    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <LIS3DSH_ReadACC+0x1b0>)
 8001b40:	61bb      	str	r3, [r7, #24]
    break;
 8001b42:	e003      	b.n	8001b4c <LIS3DSH_ReadACC+0x138>

    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <LIS3DSH_ReadACC+0x1b4>)
 8001b46:	61bb      	str	r3, [r7, #24]
    break;
 8001b48:	e000      	b.n	8001b4c <LIS3DSH_ReadACC+0x138>

  default:
    break;
 8001b4a:	bf00      	nop
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	77fb      	strb	r3, [r7, #31]
 8001b50:	e029      	b.n	8001ba6 <LIS3DSH_ReadACC+0x192>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8001b52:	7ffb      	ldrb	r3, [r7, #31]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	3301      	adds	r3, #1
 8001b58:	f107 0220 	add.w	r2, r7, #32
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	7ffa      	ldrb	r2, [r7, #31]
 8001b66:	0052      	lsls	r2, r2, #1
 8001b68:	f107 0120 	add.w	r1, r7, #32
 8001b6c:	440a      	add	r2, r1
 8001b6e:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8001b72:	4413      	add	r3, r2
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b84:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 8001b88:	7ffb      	ldrb	r3, [r7, #31]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b98:	ee17 2a90 	vmov	r2, s15
 8001b9c:	b212      	sxth	r2, r2
 8001b9e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001ba0:	7ffb      	ldrb	r3, [r7, #31]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	77fb      	strb	r3, [r7, #31]
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d9d2      	bls.n	8001b52 <LIS3DSH_ReadACC+0x13e>
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	3d75c28f 	.word	0x3d75c28f
 8001bbc:	3df5c28f 	.word	0x3df5c28f
 8001bc0:	3e3851ec 	.word	0x3e3851ec
 8001bc4:	3e75c28f 	.word	0x3e75c28f
 8001bc8:	3f3ae148 	.word	0x3f3ae148

08001bcc <LIS3DSH_Write>:
  * @param  WriteAddr : LIS3DSH's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void LIS3DSH_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001bdc:	883b      	ldrh	r3, [r7, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d903      	bls.n	8001bea <LIS3DSH_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001be8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS3DSH_CS_LOW();
 8001bea:	2108      	movs	r1, #8
 8001bec:	480e      	ldr	r0, [pc, #56]	; (8001c28 <LIS3DSH_Write+0x5c>)
 8001bee:	f7ff fed3 	bl	8001998 <LL_GPIO_ResetOutputPin>

  /* Send the Address of the indexed register */
  LIS3DSH_SendByte(WriteAddr);
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f851 	bl	8001c9c <LIS3DSH_SendByte>
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001bfa:	e00a      	b.n	8001c12 <LIS3DSH_Write+0x46>
  {
	  LIS3DSH_SendByte(*pBuffer);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f84b 	bl	8001c9c <LIS3DSH_SendByte>
    NumByteToWrite--;
 8001c06:	883b      	ldrh	r3, [r7, #0]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8001c12:	883b      	ldrh	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f1      	bne.n	8001bfc <LIS3DSH_Write+0x30>
  }

  /* Set chip select High at the end of the transmission */
  LIS3DSH_CS_HIGH();
 8001c18:	2108      	movs	r1, #8
 8001c1a:	4803      	ldr	r0, [pc, #12]	; (8001c28 <LIS3DSH_Write+0x5c>)
 8001c1c:	f7ff feae 	bl	800197c <LL_GPIO_SetOutputPin>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000

08001c2c <LIS3DSH_Read>:
  * @param  ReadAddr : LIS3DSH's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the LIS302DL.
  * @retval None
  */
void LIS3DSH_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001c3c:	883b      	ldrh	r3, [r7, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d904      	bls.n	8001c4c <LIS3DSH_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001c48:	70fb      	strb	r3, [r7, #3]
 8001c4a:	e003      	b.n	8001c54 <LIS3DSH_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c52:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS3DSH_CS_LOW();
 8001c54:	2108      	movs	r1, #8
 8001c56:	4810      	ldr	r0, [pc, #64]	; (8001c98 <LIS3DSH_Read+0x6c>)
 8001c58:	f7ff fe9e 	bl	8001998 <LL_GPIO_ResetOutputPin>

  /* Send the Address of the indexed register */
  LIS3DSH_SendByte(ReadAddr);
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f81c 	bl	8001c9c <LIS3DSH_SendByte>

  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001c64:	e00c      	b.n	8001c80 <LIS3DSH_Read+0x54>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to LIS302DL (Slave device) */
    *pBuffer = LIS3DSH_SendByte(DUMMY_BYTE);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 f818 	bl	8001c9c <LIS3DSH_SendByte>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001c74:	883b      	ldrh	r3, [r7, #0]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8001c80:	883b      	ldrh	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ef      	bne.n	8001c66 <LIS3DSH_Read+0x3a>
  }

  /* Set chip select High at the end of the transmission */
  LIS3DSH_CS_HIGH();
 8001c86:	2108      	movs	r1, #8
 8001c88:	4803      	ldr	r0, [pc, #12]	; (8001c98 <LIS3DSH_Read+0x6c>)
 8001c8a:	f7ff fe77 	bl	800197c <LL_GPIO_SetOutputPin>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000

08001c9c <LIS3DSH_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t LIS3DSH_SendByte(uint8_t byte)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	/* Loop while DR register in not emplty */
	LIS3DSHTimeout = LIS3DSH_FLAG_TIMEOUT;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <LIS3DSH_SendByte+0x78>)
 8001ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cac:	601a      	str	r2, [r3, #0]
	while (LL_SPI_IsActiveFlag_TXE(LIS3DSH_SPI) == RESET)
 8001cae:	e008      	b.n	8001cc2 <LIS3DSH_SendByte+0x26>
	{
	if((LIS3DSHTimeout--) == 0) return 0;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <LIS3DSH_SendByte+0x78>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	1e5a      	subs	r2, r3, #1
 8001cb6:	4917      	ldr	r1, [pc, #92]	; (8001d14 <LIS3DSH_SendByte+0x78>)
 8001cb8:	600a      	str	r2, [r1, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <LIS3DSH_SendByte+0x26>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e023      	b.n	8001d0a <LIS3DSH_SendByte+0x6e>
	while (LL_SPI_IsActiveFlag_TXE(LIS3DSH_SPI) == RESET)
 8001cc2:	4815      	ldr	r0, [pc, #84]	; (8001d18 <LIS3DSH_SendByte+0x7c>)
 8001cc4:	f7ff fe27 	bl	8001916 <LL_SPI_IsActiveFlag_TXE>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <LIS3DSH_SendByte+0x14>
	}

	/* Send a Byte through the SPI peripheral */
	LL_SPI_TransmitData8(LIS3DSH_SPI, byte);
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4811      	ldr	r0, [pc, #68]	; (8001d18 <LIS3DSH_SendByte+0x7c>)
 8001cd4:	f7ff fe40 	bl	8001958 <LL_SPI_TransmitData8>

	/* Wait to receive a Byte */
	LIS3DSHTimeout = LIS3DSH_FLAG_TIMEOUT;
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <LIS3DSH_SendByte+0x78>)
 8001cda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cde:	601a      	str	r2, [r3, #0]
	while (LL_SPI_IsActiveFlag_RXNE(LIS3DSH_SPI) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <LIS3DSH_SendByte+0x58>
	{
	if((LIS3DSHTimeout--) == 0) return 0;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <LIS3DSH_SendByte+0x78>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	1e5a      	subs	r2, r3, #1
 8001ce8:	490a      	ldr	r1, [pc, #40]	; (8001d14 <LIS3DSH_SendByte+0x78>)
 8001cea:	600a      	str	r2, [r1, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <LIS3DSH_SendByte+0x58>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e00a      	b.n	8001d0a <LIS3DSH_SendByte+0x6e>
	while (LL_SPI_IsActiveFlag_RXNE(LIS3DSH_SPI) == RESET)
 8001cf4:	4808      	ldr	r0, [pc, #32]	; (8001d18 <LIS3DSH_SendByte+0x7c>)
 8001cf6:	f7ff fdfb 	bl	80018f0 <LL_SPI_IsActiveFlag_RXNE>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <LIS3DSH_SendByte+0x46>
	}

	/* Return the Byte read from the SPI bus */
	return (uint8_t)LL_SPI_ReceiveData8(LIS3DSH_SPI);
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <LIS3DSH_SendByte+0x7c>)
 8001d02:	f7ff fe1b 	bl	800193c <LL_SPI_ReceiveData8>
 8001d06:	4603      	mov	r3, r0
 8001d08:	bf00      	nop
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200003a0 	.word	0x200003a0
 8001d18:	40013000 	.word	0x40013000

08001d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <NMI_Handler+0x4>

08001d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <MemManage_Handler+0x4>

08001d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t counterRead_ms = 0;

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db8:	f000 f9f0 	bl	800219c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  if (streamActive)
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <SysTick_Handler+0x30>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <SysTick_Handler+0x2c>
  {
		if (counterRead_ms++ >= READ_PERIOD_MS)
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <SysTick_Handler+0x34>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	b291      	uxth	r1, r2
 8001dcc:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <SysTick_Handler+0x34>)
 8001dce:	8011      	strh	r1, [r2, #0]
 8001dd0:	2b63      	cmp	r3, #99	; 0x63
 8001dd2:	d905      	bls.n	8001de0 <SysTick_Handler+0x2c>
		{
			dataReady = 1;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Handler+0x38>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
			//LL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); // toggle green LED at each read
			counterRead_ms = 0;
 8001dda:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <SysTick_Handler+0x34>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	801a      	strh	r2, [r3, #0]
		}
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000e12 	.word	0x20000e12
 8001dec:	20000e0e 	.word	0x20000e0e

08001df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	/* RX interrupt */
		if ((READ_BIT(USART2->SR, USART_SR_RXNE) == (USART_SR_RXNE)) != RESET)
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <USART2_IRQHandler+0x2c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d107      	bne.n	8001e10 <USART2_IRQHandler+0x20>
		{
			chRX = (uint8_t)(READ_BIT(USART2->DR, USART_DR_DR));
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <USART2_IRQHandler+0x2c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <USART2_IRQHandler+0x30>)
 8001e08:	701a      	strb	r2, [r3, #0]
			dataReceived = 1;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <USART2_IRQHandler+0x34>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e10:	4805      	ldr	r0, [pc, #20]	; (8001e28 <USART2_IRQHandler+0x38>)
 8001e12:	f001 fe97 	bl	8003b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40004400 	.word	0x40004400
 8001e20:	20000e0c 	.word	0x20000e0c
 8001e24:	20000e0d 	.word	0x20000e0d
 8001e28:	200010f8 	.word	0x200010f8

08001e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e34:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <_sbrk+0x5c>)
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <_sbrk+0x60>)
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <_sbrk+0x64>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <_sbrk+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d207      	bcs.n	8001e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e5c:	f006 f8a2 	bl	8007fa4 <__errno>
 8001e60:	4603      	mov	r3, r0
 8001e62:	220c      	movs	r2, #12
 8001e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	e009      	b.n	8001e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <_sbrk+0x64>)
 8001e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20020000 	.word	0x20020000
 8001e8c:	00000800 	.word	0x00000800
 8001e90:	20000e14 	.word	0x20000e14
 8001e94:	20001150 	.word	0x20001150

08001e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <SystemInit+0x20>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <SystemInit+0x20>)
 8001ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec2:	f107 0320 	add.w	r3, r7, #32
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]
 8001eda:	615a      	str	r2, [r3, #20]
 8001edc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <MX_TIM3_Init+0xa8>)
 8001ee0:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <MX_TIM3_Init+0xac>)
 8001ee2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1679;
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <MX_TIM3_Init+0xa8>)
 8001ee6:	f240 628f 	movw	r2, #1679	; 0x68f
 8001eea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <MX_TIM3_Init+0xa8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <MX_TIM3_Init+0xa8>)
 8001ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ef8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <MX_TIM3_Init+0xa8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <MX_TIM3_Init+0xa8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001f06:	4817      	ldr	r0, [pc, #92]	; (8001f64 <MX_TIM3_Init+0xa8>)
 8001f08:	f001 f9c4 	bl	8003294 <HAL_TIM_OC_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001f12:	f7ff fc50 	bl	80017b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001f16:	2340      	movs	r3, #64	; 0x40
 8001f18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f1e:	f107 0320 	add.w	r3, r7, #32
 8001f22:	4619      	mov	r1, r3
 8001f24:	480f      	ldr	r0, [pc, #60]	; (8001f64 <MX_TIM3_Init+0xa8>)
 8001f26:	f001 fcb1 	bl	800388c <HAL_TIMEx_MasterConfigSynchronization>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001f30:	f7ff fc41 	bl	80017b6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50000;
 8001f38:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001f3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_TIM3_Init+0xa8>)
 8001f4e:	f001 f9f1 	bl	8003334 <HAL_TIM_OC_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001f58:	f7ff fc2d 	bl	80017b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200010b0 	.word	0x200010b0
 8001f68:	40000400 	.word	0x40000400

08001f6c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM3)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HAL_TIM_OC_MspInit+0x3c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10d      	bne.n	8001f9a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_TIM_OC_MspInit+0x40>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_TIM_OC_MspInit+0x40>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <HAL_TIM_OC_MspInit+0x40>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40023800 	.word	0x40023800

08001fb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_USART2_UART_Init+0x4c>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <MX_USART2_UART_Init+0x50>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_USART2_UART_Init+0x4c>)
 8001fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_USART2_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_USART2_UART_Init+0x4c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_USART2_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_USART2_UART_Init+0x4c>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_USART2_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_USART2_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_USART2_UART_Init+0x4c>)
 8001fe8:	f001 fccc 	bl	8003984 <HAL_UART_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ff2:	f7ff fbe0 	bl	80017b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200010f8 	.word	0x200010f8
 8002000:	40004400 	.word	0x40004400

08002004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <HAL_UART_MspInit+0x94>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d133      	bne.n	800208e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_UART_MspInit+0x98>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a1b      	ldr	r2, [pc, #108]	; (800209c <HAL_UART_MspInit+0x98>)
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_UART_MspInit+0x98>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_UART_MspInit+0x98>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a14      	ldr	r2, [pc, #80]	; (800209c <HAL_UART_MspInit+0x98>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_UART_MspInit+0x98>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800205e:	230c      	movs	r3, #12
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800206a:	2301      	movs	r3, #1
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800206e:	2307      	movs	r3, #7
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	4809      	ldr	r0, [pc, #36]	; (80020a0 <HAL_UART_MspInit+0x9c>)
 800207a:	f000 fa93 	bl	80025a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	2026      	movs	r0, #38	; 0x26
 8002084:	f000 f9a9 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002088:	2026      	movs	r0, #38	; 0x26
 800208a:	f000 f9c2 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800208e:	bf00      	nop
 8002090:	3728      	adds	r7, #40	; 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40004400 	.word	0x40004400
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000

080020a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020aa:	490e      	ldr	r1, [pc, #56]	; (80020e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b0:	e002      	b.n	80020b8 <LoopCopyDataInit>

080020b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b6:	3304      	adds	r3, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020bc:	d3f9      	bcc.n	80020b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c0:	4c0b      	ldr	r4, [pc, #44]	; (80020f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c4:	e001      	b.n	80020ca <LoopFillZerobss>

080020c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c8:	3204      	adds	r2, #4

080020ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020cc:	d3fb      	bcc.n	80020c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020ce:	f7ff fee3 	bl	8001e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d2:	f005 ff6d 	bl	8007fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020d6:	f7ff f853 	bl	8001180 <main>
  bx  lr    
 80020da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e4:	20000df0 	.word	0x20000df0
  ldr r2, =_sidata
 80020e8:	0800e464 	.word	0x0800e464
  ldr r2, =_sbss
 80020ec:	20000df0 	.word	0x20000df0
  ldr r4, =_ebss
 80020f0:	20001150 	.word	0x20001150

080020f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f4:	e7fe      	b.n	80020f4 <ADC_IRQHandler>
	...

080020f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_Init+0x40>)
 8002102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_Init+0x40>)
 800210e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a07      	ldr	r2, [pc, #28]	; (8002138 <HAL_Init+0x40>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002120:	2003      	movs	r0, #3
 8002122:	f000 f94f 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002126:	2000      	movs	r0, #0
 8002128:	f000 f808 	bl	800213c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800212c:	f7ff fdf6 	bl	8001d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023c00 	.word	0x40023c00

0800213c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_InitTick+0x54>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_InitTick+0x58>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002152:	fbb3 f3f1 	udiv	r3, r3, r1
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f967 	bl	800242e <HAL_SYSTICK_Config>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e00e      	b.n	8002188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b0f      	cmp	r3, #15
 800216e:	d80a      	bhi.n	8002186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002170:	2200      	movs	r2, #0
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f000 f92f 	bl	80023da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800217c:	4a06      	ldr	r2, [pc, #24]	; (8002198 <HAL_InitTick+0x5c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200003a4 	.word	0x200003a4
 8002194:	200003ac 	.word	0x200003ac
 8002198:	200003a8 	.word	0x200003a8

0800219c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_IncTick+0x20>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_IncTick+0x24>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_IncTick+0x24>)
 80021ae:	6013      	str	r3, [r2, #0]
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	200003ac 	.word	0x200003ac
 80021c0:	2000113c 	.word	0x2000113c

080021c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return uwTick;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <HAL_GetTick+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	2000113c 	.word	0x2000113c

080021dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7ff ffee 	bl	80021c4 <HAL_GetTick>
 80021e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d005      	beq.n	8002202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_Delay+0x44>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002202:	bf00      	nop
 8002204:	f7ff ffde 	bl	80021c4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	429a      	cmp	r2, r3
 8002212:	d8f7      	bhi.n	8002204 <HAL_Delay+0x28>
  {
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200003ac 	.word	0x200003ac

08002224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002240:	4013      	ands	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800224c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002256:	4a04      	ldr	r2, [pc, #16]	; (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	60d3      	str	r3, [r2, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <__NVIC_GetPriorityGrouping+0x18>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 0307 	and.w	r3, r3, #7
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	2b00      	cmp	r3, #0
 8002298:	db0b      	blt.n	80022b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	f003 021f 	and.w	r2, r3, #31
 80022a0:	4907      	ldr	r1, [pc, #28]	; (80022c0 <__NVIC_EnableIRQ+0x38>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	2001      	movs	r0, #1
 80022aa:	fa00 f202 	lsl.w	r2, r0, r2
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	; (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	; (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002390:	d301      	bcc.n	8002396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2301      	movs	r3, #1
 8002394:	e00f      	b.n	80023b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002396:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <SysTick_Config+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239e:	210f      	movs	r1, #15
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f7ff ff8e 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <SysTick_Config+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <SysTick_Config+0x40>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff29 	bl	8002224 <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff3e 	bl	800226c <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff8e 	bl	8002318 <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5d 	bl	80022c4 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff31 	bl	8002288 <__NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffa2 	bl	8002380 <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e00e      	b.n	8002476 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	795b      	ldrb	r3, [r3, #5]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d105      	bne.n	800246e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7fe fd2d 	bl	8000ec8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff fe9a 	bl	80021c4 <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d008      	beq.n	80024b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e052      	b.n	8002556 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0216 	bic.w	r2, r2, #22
 80024be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <HAL_DMA_Abort+0x62>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0208 	bic.w	r2, r2, #8
 80024ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002500:	e013      	b.n	800252a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002502:	f7ff fe5f 	bl	80021c4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b05      	cmp	r3, #5
 800250e:	d90c      	bls.n	800252a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2203      	movs	r2, #3
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e015      	b.n	8002556 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e4      	bne.n	8002502 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	223f      	movs	r2, #63	; 0x3f
 800253e:	409a      	lsls	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d004      	beq.n	800257c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e00c      	b.n	8002596 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2205      	movs	r2, #5
 8002580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	e16b      	b.n	8002898 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	429a      	cmp	r2, r3
 80025da:	f040 815a 	bne.w	8002892 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d005      	beq.n	80025f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d130      	bne.n	8002658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 0201 	and.w	r2, r3, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b03      	cmp	r3, #3
 8002662:	d017      	beq.n	8002694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d123      	bne.n	80026e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	08da      	lsrs	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3208      	adds	r2, #8
 80026a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	220f      	movs	r2, #15
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	69b9      	ldr	r1, [r7, #24]
 80026e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0203 	and.w	r2, r3, #3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80b4 	beq.w	8002892 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b60      	ldr	r3, [pc, #384]	; (80028b0 <HAL_GPIO_Init+0x30c>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a5f      	ldr	r2, [pc, #380]	; (80028b0 <HAL_GPIO_Init+0x30c>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_GPIO_Init+0x30c>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002746:	4a5b      	ldr	r2, [pc, #364]	; (80028b4 <HAL_GPIO_Init+0x310>)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <HAL_GPIO_Init+0x314>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d02b      	beq.n	80027ca <HAL_GPIO_Init+0x226>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a51      	ldr	r2, [pc, #324]	; (80028bc <HAL_GPIO_Init+0x318>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d025      	beq.n	80027c6 <HAL_GPIO_Init+0x222>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a50      	ldr	r2, [pc, #320]	; (80028c0 <HAL_GPIO_Init+0x31c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01f      	beq.n	80027c2 <HAL_GPIO_Init+0x21e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4f      	ldr	r2, [pc, #316]	; (80028c4 <HAL_GPIO_Init+0x320>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d019      	beq.n	80027be <HAL_GPIO_Init+0x21a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4e      	ldr	r2, [pc, #312]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_GPIO_Init+0x216>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4d      	ldr	r2, [pc, #308]	; (80028cc <HAL_GPIO_Init+0x328>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00d      	beq.n	80027b6 <HAL_GPIO_Init+0x212>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4c      	ldr	r2, [pc, #304]	; (80028d0 <HAL_GPIO_Init+0x32c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x20e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4b      	ldr	r2, [pc, #300]	; (80028d4 <HAL_GPIO_Init+0x330>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_GPIO_Init+0x20a>
 80027aa:	2307      	movs	r3, #7
 80027ac:	e00e      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027ae:	2308      	movs	r3, #8
 80027b0:	e00c      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027b2:	2306      	movs	r3, #6
 80027b4:	e00a      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027b6:	2305      	movs	r3, #5
 80027b8:	e008      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027ba:	2304      	movs	r3, #4
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027be:	2303      	movs	r3, #3
 80027c0:	e004      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027ca:	2300      	movs	r3, #0
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	4093      	lsls	r3, r2
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027dc:	4935      	ldr	r1, [pc, #212]	; (80028b4 <HAL_GPIO_Init+0x310>)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ea:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_GPIO_Init+0x334>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800280e:	4a32      	ldr	r2, [pc, #200]	; (80028d8 <HAL_GPIO_Init+0x334>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002814:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <HAL_GPIO_Init+0x334>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002838:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <HAL_GPIO_Init+0x334>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_GPIO_Init+0x334>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002862:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <HAL_GPIO_Init+0x334>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_GPIO_Init+0x334>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800288c:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <HAL_GPIO_Init+0x334>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	f67f ae90 	bls.w	80025c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40013800 	.word	0x40013800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40021400 	.word	0x40021400
 80028d0:	40021800 	.word	0x40021800
 80028d4:	40021c00 	.word	0x40021c00
 80028d8:	40013c00 	.word	0x40013c00

080028dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e264      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d075      	beq.n	80029e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fa:	4ba3      	ldr	r3, [pc, #652]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d00c      	beq.n	8002920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002906:	4ba0      	ldr	r3, [pc, #640]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800290e:	2b08      	cmp	r3, #8
 8002910:	d112      	bne.n	8002938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002912:	4b9d      	ldr	r3, [pc, #628]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291e:	d10b      	bne.n	8002938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002920:	4b99      	ldr	r3, [pc, #612]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d05b      	beq.n	80029e4 <HAL_RCC_OscConfig+0x108>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d157      	bne.n	80029e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e23f      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002940:	d106      	bne.n	8002950 <HAL_RCC_OscConfig+0x74>
 8002942:	4b91      	ldr	r3, [pc, #580]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a90      	ldr	r2, [pc, #576]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e01d      	b.n	800298c <HAL_RCC_OscConfig+0xb0>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0x98>
 800295a:	4b8b      	ldr	r3, [pc, #556]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a8a      	ldr	r2, [pc, #552]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	4b88      	ldr	r3, [pc, #544]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a87      	ldr	r2, [pc, #540]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	e00b      	b.n	800298c <HAL_RCC_OscConfig+0xb0>
 8002974:	4b84      	ldr	r3, [pc, #528]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a83      	ldr	r2, [pc, #524]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 800297a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a80      	ldr	r2, [pc, #512]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d013      	beq.n	80029bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7ff fc16 	bl	80021c4 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800299c:	f7ff fc12 	bl	80021c4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e204      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	4b76      	ldr	r3, [pc, #472]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0xc0>
 80029ba:	e014      	b.n	80029e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7ff fc02 	bl	80021c4 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c4:	f7ff fbfe 	bl	80021c4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1f0      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	4b6c      	ldr	r3, [pc, #432]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0xe8>
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d063      	beq.n	8002aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f2:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fe:	4b62      	ldr	r3, [pc, #392]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d11c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d116      	bne.n	8002a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x152>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e1c4      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b56      	ldr	r3, [pc, #344]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4952      	ldr	r1, [pc, #328]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	e03a      	b.n	8002aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <HAL_RCC_OscConfig+0x2b0>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7ff fbb7 	bl	80021c4 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7ff fbb3 	bl	80021c4 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1a5      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4940      	ldr	r1, [pc, #256]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	e015      	b.n	8002aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8e:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <HAL_RCC_OscConfig+0x2b0>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7ff fb96 	bl	80021c4 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9c:	f7ff fb92 	bl	80021c4 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e184      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d030      	beq.n	8002b28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_RCC_OscConfig+0x2b4>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7ff fb76 	bl	80021c4 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7ff fb72 	bl	80021c4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e164      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x200>
 8002afa:	e015      	b.n	8002b28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x2b4>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7ff fb5f 	bl	80021c4 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7ff fb5b 	bl	80021c4 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e14d      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f0      	bne.n	8002b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80a0 	beq.w	8002c76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3a:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10f      	bne.n	8002b66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b54:	6413      	str	r3, [r2, #64]	; 0x40
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b62:	2301      	movs	r3, #1
 8002b64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b66:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCC_OscConfig+0x2b8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d121      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_RCC_OscConfig+0x2b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a07      	ldr	r2, [pc, #28]	; (8002b94 <HAL_RCC_OscConfig+0x2b8>)
 8002b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7e:	f7ff fb21 	bl	80021c4 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	e011      	b.n	8002baa <HAL_RCC_OscConfig+0x2ce>
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	42470000 	.word	0x42470000
 8002b90:	42470e80 	.word	0x42470e80
 8002b94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b98:	f7ff fb14 	bl	80021c4 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e106      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	4b85      	ldr	r3, [pc, #532]	; (8002dc0 <HAL_RCC_OscConfig+0x4e4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCC_OscConfig+0x2f0>
 8002bbe:	4b81      	ldr	r3, [pc, #516]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	4a80      	ldr	r2, [pc, #512]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bca:	e01c      	b.n	8002c06 <HAL_RCC_OscConfig+0x32a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d10c      	bne.n	8002bee <HAL_RCC_OscConfig+0x312>
 8002bd4:	4b7b      	ldr	r3, [pc, #492]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a7a      	ldr	r2, [pc, #488]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	6713      	str	r3, [r2, #112]	; 0x70
 8002be0:	4b78      	ldr	r3, [pc, #480]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4a77      	ldr	r2, [pc, #476]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
 8002bec:	e00b      	b.n	8002c06 <HAL_RCC_OscConfig+0x32a>
 8002bee:	4b75      	ldr	r3, [pc, #468]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	4a74      	ldr	r2, [pc, #464]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfa:	4b72      	ldr	r3, [pc, #456]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a71      	ldr	r2, [pc, #452]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d015      	beq.n	8002c3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0e:	f7ff fad9 	bl	80021c4 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7ff fad5 	bl	80021c4 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e0c5      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	4b65      	ldr	r3, [pc, #404]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ee      	beq.n	8002c16 <HAL_RCC_OscConfig+0x33a>
 8002c38:	e014      	b.n	8002c64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7ff fac3 	bl	80021c4 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7ff fabf 	bl	80021c4 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0af      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	4b5a      	ldr	r3, [pc, #360]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ee      	bne.n	8002c42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d105      	bne.n	8002c76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6a:	4b56      	ldr	r3, [pc, #344]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a55      	ldr	r2, [pc, #340]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 809b 	beq.w	8002db6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c80:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d05c      	beq.n	8002d46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d141      	bne.n	8002d18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c94:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <HAL_RCC_OscConfig+0x4ec>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7ff fa93 	bl	80021c4 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7ff fa8f 	bl	80021c4 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e081      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb4:	4b43      	ldr	r3, [pc, #268]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f0      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	019b      	lsls	r3, r3, #6
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	4937      	ldr	r1, [pc, #220]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cea:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <HAL_RCC_OscConfig+0x4ec>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7ff fa68 	bl	80021c4 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7ff fa64 	bl	80021c4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e056      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x41c>
 8002d16:	e04e      	b.n	8002db6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d18:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_RCC_OscConfig+0x4ec>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7ff fa51 	bl	80021c4 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d26:	f7ff fa4d 	bl	80021c4 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e03f      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x44a>
 8002d44:	e037      	b.n	8002db6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e032      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d52:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <HAL_RCC_OscConfig+0x4e8>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d028      	beq.n	8002db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d121      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d11a      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d82:	4013      	ands	r3, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d111      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	42470060 	.word	0x42470060

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0cc      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d90c      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0b8      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e20:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e38:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	494d      	ldr	r1, [pc, #308]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d044      	beq.n	8002eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d119      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e067      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f023 0203 	bic.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4934      	ldr	r1, [pc, #208]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ebc:	f7ff f982 	bl	80021c4 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7ff f97e 	bl	80021c4 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e04f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 020c 	and.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1eb      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d20c      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e032      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4916      	ldr	r1, [pc, #88]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	490e      	ldr	r1, [pc, #56]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f52:	f000 f821 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	490a      	ldr	r1, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	5ccb      	ldrb	r3, [r1, r3]
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f8e2 	bl	800213c <HAL_InitTick>

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023c00 	.word	0x40023c00
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	0800b168 	.word	0x0800b168
 8002f90:	200003a4 	.word	0x200003a4
 8002f94:	200003a8 	.word	0x200003a8

08002f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb0:	4b67      	ldr	r3, [pc, #412]	; (8003150 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d00d      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	f200 80bd 	bhi.w	800313c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x34>
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fca:	e0b7      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fcc:	4b61      	ldr	r3, [pc, #388]	; (8003154 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fce:	60bb      	str	r3, [r7, #8]
       break;
 8002fd0:	e0b7      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd2:	4b61      	ldr	r3, [pc, #388]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002fd4:	60bb      	str	r3, [r7, #8]
      break;
 8002fd6:	e0b4      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd8:	4b5d      	ldr	r3, [pc, #372]	; (8003150 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe2:	4b5b      	ldr	r3, [pc, #364]	; (8003150 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d04d      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fee:	4b58      	ldr	r3, [pc, #352]	; (8003150 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	ea02 0800 	and.w	r8, r2, r0
 8003006:	ea03 0901 	and.w	r9, r3, r1
 800300a:	4640      	mov	r0, r8
 800300c:	4649      	mov	r1, r9
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	014b      	lsls	r3, r1, #5
 8003018:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800301c:	0142      	lsls	r2, r0, #5
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	ebb0 0008 	subs.w	r0, r0, r8
 8003026:	eb61 0109 	sbc.w	r1, r1, r9
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	018b      	lsls	r3, r1, #6
 8003034:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003038:	0182      	lsls	r2, r0, #6
 800303a:	1a12      	subs	r2, r2, r0
 800303c:	eb63 0301 	sbc.w	r3, r3, r1
 8003040:	f04f 0000 	mov.w	r0, #0
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	00d9      	lsls	r1, r3, #3
 800304a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800304e:	00d0      	lsls	r0, r2, #3
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	eb12 0208 	adds.w	r2, r2, r8
 8003058:	eb43 0309 	adc.w	r3, r3, r9
 800305c:	f04f 0000 	mov.w	r0, #0
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	0259      	lsls	r1, r3, #9
 8003066:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800306a:	0250      	lsls	r0, r2, #9
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	461a      	mov	r2, r3
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	f7fd fd94 	bl	8000ba8 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4613      	mov	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e04a      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	461a      	mov	r2, r3
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	f240 10ff 	movw	r0, #511	; 0x1ff
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	ea02 0400 	and.w	r4, r2, r0
 80030a2:	ea03 0501 	and.w	r5, r3, r1
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	014b      	lsls	r3, r1, #5
 80030b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030b8:	0142      	lsls	r2, r0, #5
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	1b00      	subs	r0, r0, r4
 80030c0:	eb61 0105 	sbc.w	r1, r1, r5
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	018b      	lsls	r3, r1, #6
 80030ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030d2:	0182      	lsls	r2, r0, #6
 80030d4:	1a12      	subs	r2, r2, r0
 80030d6:	eb63 0301 	sbc.w	r3, r3, r1
 80030da:	f04f 0000 	mov.w	r0, #0
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	00d9      	lsls	r1, r3, #3
 80030e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030e8:	00d0      	lsls	r0, r2, #3
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	1912      	adds	r2, r2, r4
 80030f0:	eb45 0303 	adc.w	r3, r5, r3
 80030f4:	f04f 0000 	mov.w	r0, #0
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	0299      	lsls	r1, r3, #10
 80030fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003102:	0290      	lsls	r0, r2, #10
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	f7fd fd48 	bl	8000ba8 <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4613      	mov	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	60bb      	str	r3, [r7, #8]
      break;
 800313a:	e002      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800313e:	60bb      	str	r3, [r7, #8]
      break;
 8003140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003142:	68bb      	ldr	r3, [r7, #8]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	00f42400 	.word	0x00f42400
 8003158:	007a1200 	.word	0x007a1200

0800315c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_RCC_GetHCLKFreq+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	200003a4 	.word	0x200003a4

08003174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003178:	f7ff fff0 	bl	800315c <HAL_RCC_GetHCLKFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	4903      	ldr	r1, [pc, #12]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40023800 	.word	0x40023800
 8003198:	0800b178 	.word	0x0800b178

0800319c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031a0:	f7ff ffdc 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0b5b      	lsrs	r3, r3, #13
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40023800 	.word	0x40023800
 80031c0:	0800b178 	.word	0x0800b178

080031c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d001      	beq.n	80031dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e046      	b.n	800326a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a23      	ldr	r2, [pc, #140]	; (8003278 <HAL_TIM_Base_Start+0xb4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d022      	beq.n	8003234 <HAL_TIM_Base_Start+0x70>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d01d      	beq.n	8003234 <HAL_TIM_Base_Start+0x70>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1f      	ldr	r2, [pc, #124]	; (800327c <HAL_TIM_Base_Start+0xb8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d018      	beq.n	8003234 <HAL_TIM_Base_Start+0x70>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1e      	ldr	r2, [pc, #120]	; (8003280 <HAL_TIM_Base_Start+0xbc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <HAL_TIM_Base_Start+0x70>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <HAL_TIM_Base_Start+0xc0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00e      	beq.n	8003234 <HAL_TIM_Base_Start+0x70>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1b      	ldr	r2, [pc, #108]	; (8003288 <HAL_TIM_Base_Start+0xc4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_TIM_Base_Start+0x70>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_TIM_Base_Start+0xc8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_TIM_Base_Start+0x70>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a18      	ldr	r2, [pc, #96]	; (8003290 <HAL_TIM_Base_Start+0xcc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d111      	bne.n	8003258 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b06      	cmp	r3, #6
 8003244:	d010      	beq.n	8003268 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003256:	e007      	b.n	8003268 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40010000 	.word	0x40010000
 800327c:	40000400 	.word	0x40000400
 8003280:	40000800 	.word	0x40000800
 8003284:	40000c00 	.word	0x40000c00
 8003288:	40010400 	.word	0x40010400
 800328c:	40014000 	.word	0x40014000
 8003290:	40001800 	.word	0x40001800

08003294 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e041      	b.n	800332a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe fe56 	bl	8001f6c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f000 f88a 	bl	80033ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_TIM_OC_ConfigChannel+0x1e>
 800334e:	2302      	movs	r3, #2
 8003350:	e048      	b.n	80033e4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b0c      	cmp	r3, #12
 800335e:	d839      	bhi.n	80033d4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003360:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	0800339d 	.word	0x0800339d
 800336c:	080033d5 	.word	0x080033d5
 8003370:	080033d5 	.word	0x080033d5
 8003374:	080033d5 	.word	0x080033d5
 8003378:	080033ab 	.word	0x080033ab
 800337c:	080033d5 	.word	0x080033d5
 8003380:	080033d5 	.word	0x080033d5
 8003384:	080033d5 	.word	0x080033d5
 8003388:	080033b9 	.word	0x080033b9
 800338c:	080033d5 	.word	0x080033d5
 8003390:	080033d5 	.word	0x080033d5
 8003394:	080033d5 	.word	0x080033d5
 8003398:	080033c7 	.word	0x080033c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f8c2 	bl	800352c <TIM_OC1_SetConfig>
      break;
 80033a8:	e017      	b.n	80033da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f92b 	bl	800360c <TIM_OC2_SetConfig>
      break;
 80033b6:	e010      	b.n	80033da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f99a 	bl	80036f8 <TIM_OC3_SetConfig>
      break;
 80033c4:	e009      	b.n	80033da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fa07 	bl	80037e0 <TIM_OC4_SetConfig>
      break;
 80033d2:	e002      	b.n	80033da <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	75fb      	strb	r3, [r7, #23]
      break;
 80033d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a40      	ldr	r2, [pc, #256]	; (8003500 <TIM_Base_SetConfig+0x114>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d013      	beq.n	800342c <TIM_Base_SetConfig+0x40>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340a:	d00f      	beq.n	800342c <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a3d      	ldr	r2, [pc, #244]	; (8003504 <TIM_Base_SetConfig+0x118>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00b      	beq.n	800342c <TIM_Base_SetConfig+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3c      	ldr	r2, [pc, #240]	; (8003508 <TIM_Base_SetConfig+0x11c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d007      	beq.n	800342c <TIM_Base_SetConfig+0x40>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3b      	ldr	r2, [pc, #236]	; (800350c <TIM_Base_SetConfig+0x120>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <TIM_Base_SetConfig+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a3a      	ldr	r2, [pc, #232]	; (8003510 <TIM_Base_SetConfig+0x124>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d108      	bne.n	800343e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a2f      	ldr	r2, [pc, #188]	; (8003500 <TIM_Base_SetConfig+0x114>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d02b      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344c:	d027      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a2c      	ldr	r2, [pc, #176]	; (8003504 <TIM_Base_SetConfig+0x118>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d023      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2b      	ldr	r2, [pc, #172]	; (8003508 <TIM_Base_SetConfig+0x11c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01f      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2a      	ldr	r2, [pc, #168]	; (800350c <TIM_Base_SetConfig+0x120>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01b      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a29      	ldr	r2, [pc, #164]	; (8003510 <TIM_Base_SetConfig+0x124>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d017      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a28      	ldr	r2, [pc, #160]	; (8003514 <TIM_Base_SetConfig+0x128>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a27      	ldr	r2, [pc, #156]	; (8003518 <TIM_Base_SetConfig+0x12c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00f      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a26      	ldr	r2, [pc, #152]	; (800351c <TIM_Base_SetConfig+0x130>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00b      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a25      	ldr	r2, [pc, #148]	; (8003520 <TIM_Base_SetConfig+0x134>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a24      	ldr	r2, [pc, #144]	; (8003524 <TIM_Base_SetConfig+0x138>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d003      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a23      	ldr	r2, [pc, #140]	; (8003528 <TIM_Base_SetConfig+0x13c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d108      	bne.n	80034b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <TIM_Base_SetConfig+0x114>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0xf8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <TIM_Base_SetConfig+0x124>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d103      	bne.n	80034ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	615a      	str	r2, [r3, #20]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40010000 	.word	0x40010000
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800
 800350c:	40000c00 	.word	0x40000c00
 8003510:	40010400 	.word	0x40010400
 8003514:	40014000 	.word	0x40014000
 8003518:	40014400 	.word	0x40014400
 800351c:	40014800 	.word	0x40014800
 8003520:	40001800 	.word	0x40001800
 8003524:	40001c00 	.word	0x40001c00
 8003528:	40002000 	.word	0x40002000

0800352c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0201 	bic.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f023 0302 	bic.w	r3, r3, #2
 8003574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a20      	ldr	r2, [pc, #128]	; (8003604 <TIM_OC1_SetConfig+0xd8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_OC1_SetConfig+0x64>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <TIM_OC1_SetConfig+0xdc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10c      	bne.n	80035aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f023 0308 	bic.w	r3, r3, #8
 8003596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 0304 	bic.w	r3, r3, #4
 80035a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a15      	ldr	r2, [pc, #84]	; (8003604 <TIM_OC1_SetConfig+0xd8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d003      	beq.n	80035ba <TIM_OC1_SetConfig+0x8e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a14      	ldr	r2, [pc, #80]	; (8003608 <TIM_OC1_SetConfig+0xdc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d111      	bne.n	80035de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	621a      	str	r2, [r3, #32]
}
 80035f8:	bf00      	nop
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40010000 	.word	0x40010000
 8003608:	40010400 	.word	0x40010400

0800360c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0210 	bic.w	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f023 0320 	bic.w	r3, r3, #32
 8003656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <TIM_OC2_SetConfig+0xe4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_OC2_SetConfig+0x68>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <TIM_OC2_SetConfig+0xe8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d10d      	bne.n	8003690 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800367a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800368e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a17      	ldr	r2, [pc, #92]	; (80036f0 <TIM_OC2_SetConfig+0xe4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_OC2_SetConfig+0x94>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <TIM_OC2_SetConfig+0xe8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d113      	bne.n	80036c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40010400 	.word	0x40010400

080036f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <TIM_OC3_SetConfig+0xe0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_OC3_SetConfig+0x66>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <TIM_OC3_SetConfig+0xe4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10d      	bne.n	800377a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a16      	ldr	r2, [pc, #88]	; (80037d8 <TIM_OC3_SetConfig+0xe0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d003      	beq.n	800378a <TIM_OC3_SetConfig+0x92>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a15      	ldr	r2, [pc, #84]	; (80037dc <TIM_OC3_SetConfig+0xe4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d113      	bne.n	80037b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	621a      	str	r2, [r3, #32]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40010000 	.word	0x40010000
 80037dc:	40010400 	.word	0x40010400

080037e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800380e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800382a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	031b      	lsls	r3, r3, #12
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a12      	ldr	r2, [pc, #72]	; (8003884 <TIM_OC4_SetConfig+0xa4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d003      	beq.n	8003848 <TIM_OC4_SetConfig+0x68>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a11      	ldr	r2, [pc, #68]	; (8003888 <TIM_OC4_SetConfig+0xa8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d109      	bne.n	800385c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800384e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	019b      	lsls	r3, r3, #6
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000
 8003888:	40010400 	.word	0x40010400

0800388c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e05a      	b.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a21      	ldr	r2, [pc, #132]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d022      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f0:	d01d      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1d      	ldr	r2, [pc, #116]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d018      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1a      	ldr	r2, [pc, #104]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00e      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d009      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a17      	ldr	r2, [pc, #92]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d004      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a15      	ldr	r2, [pc, #84]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d10c      	bne.n	8003948 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	4313      	orrs	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40010000 	.word	0x40010000
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40010400 	.word	0x40010400
 800397c:	40014000 	.word	0x40014000
 8003980:	40001800 	.word	0x40001800

08003984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e03f      	b.n	8003a16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fe fb2a 	bl	8002004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	; 0x24
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fd7b 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b08a      	sub	sp, #40	; 0x28
 8003a22:	af02      	add	r7, sp, #8
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d17c      	bne.n	8003b38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_UART_Transmit+0x2c>
 8003a44:	88fb      	ldrh	r3, [r7, #6]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e075      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_UART_Transmit+0x3e>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e06e      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2221      	movs	r2, #33	; 0x21
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a72:	f7fe fba7 	bl	80021c4 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d108      	bne.n	8003aa0 <HAL_UART_Transmit+0x82>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ab0:	e02a      	b.n	8003b08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 faf9 	bl	80040b4 <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e036      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10b      	bne.n	8003aea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ae0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	e007      	b.n	8003afa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	781a      	ldrb	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	3301      	adds	r3, #1
 8003af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1cf      	bne.n	8003ab2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2140      	movs	r1, #64	; 0x40
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fac9 	bl	80040b4 <UART_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e006      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b0ba      	sub	sp, #232	; 0xe8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_UART_IRQHandler+0x66>
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fbd3 	bl	800434e <UART_Receive_IT>
      return;
 8003ba8:	e256      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80de 	beq.w	8003d70 <HAL_UART_IRQHandler+0x22c>
 8003bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80d1 	beq.w	8003d70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_UART_IRQHandler+0xae>
 8003bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <HAL_UART_IRQHandler+0xd2>
 8003bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f043 0202 	orr.w	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00b      	beq.n	8003c3a <HAL_UART_IRQHandler+0xf6>
 8003c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d011      	beq.n	8003c6a <HAL_UART_IRQHandler+0x126>
 8003c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d105      	bne.n	8003c5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0208 	orr.w	r2, r3, #8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 81ed 	beq.w	800404e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_UART_IRQHandler+0x14e>
 8003c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fb5e 	bl	800434e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <HAL_UART_IRQHandler+0x17a>
 8003cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04f      	beq.n	8003d5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa66 	bl	8004190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d141      	bne.n	8003d56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3314      	adds	r3, #20
 8003cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1d9      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d013      	beq.n	8003d4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	4a7d      	ldr	r2, [pc, #500]	; (8003f20 <HAL_UART_IRQHandler+0x3dc>)
 8003d2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe fc13 	bl	800255e <HAL_DMA_Abort_IT>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d016      	beq.n	8003d6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	e00e      	b.n	8003d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f99a 	bl	8004088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	e00a      	b.n	8003d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f996 	bl	8004088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	e006      	b.n	8003d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f992 	bl	8004088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d6a:	e170      	b.n	800404e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	bf00      	nop
    return;
 8003d6e:	e16e      	b.n	800404e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	f040 814a 	bne.w	800400e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8143 	beq.w	800400e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 813c 	beq.w	800400e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b40      	cmp	r3, #64	; 0x40
 8003db8:	f040 80b4 	bne.w	8003f24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8140 	beq.w	8004052 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	f080 8139 	bcs.w	8004052 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003de6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df2:	f000 8088 	beq.w	8003f06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1d9      	bne.n	8003df6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3314      	adds	r3, #20
 8003e48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e1      	bne.n	8003e42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3314      	adds	r3, #20
 8003e84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3314      	adds	r3, #20
 8003e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ea4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ea8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e3      	bne.n	8003e7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed6:	f023 0310 	bic.w	r3, r3, #16
 8003eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ee8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003eea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e3      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fabc 	bl	800247e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	4619      	mov	r1, r3
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8c0 	bl	800409c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f1c:	e099      	b.n	8004052 <HAL_UART_IRQHandler+0x50e>
 8003f1e:	bf00      	nop
 8003f20:	08004257 	.word	0x08004257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 808b 	beq.w	8004056 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8086 	beq.w	8004056 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f6e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e3      	bne.n	8003f4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3314      	adds	r3, #20
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	623b      	str	r3, [r7, #32]
   return(result);
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3314      	adds	r3, #20
 8003fa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fa6:	633a      	str	r2, [r7, #48]	; 0x30
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e3      	bne.n	8003f82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0310 	bic.w	r3, r3, #16
 8003fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fec:	61fa      	str	r2, [r7, #28]
 8003fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	69b9      	ldr	r1, [r7, #24]
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e3      	bne.n	8003fc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f848 	bl	800409c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800400c:	e023      	b.n	8004056 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_UART_IRQHandler+0x4ea>
 800401a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f929 	bl	800427e <UART_Transmit_IT>
    return;
 800402c:	e014      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00e      	beq.n	8004058 <HAL_UART_IRQHandler+0x514>
 800403a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f969 	bl	800431e <UART_EndTransmit_IT>
    return;
 800404c:	e004      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
    return;
 800404e:	bf00      	nop
 8004050:	e002      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
      return;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
      return;
 8004056:	bf00      	nop
  }
}
 8004058:	37e8      	adds	r7, #232	; 0xe8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop

08004060 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b090      	sub	sp, #64	; 0x40
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c4:	e050      	b.n	8004168 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d04c      	beq.n	8004168 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040d4:	f7fe f876 	bl	80021c4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d241      	bcs.n	8004168 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004104:	637a      	str	r2, [r7, #52]	; 0x34
 8004106:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800410a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e5      	bne.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3314      	adds	r3, #20
 800411e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	613b      	str	r3, [r7, #16]
   return(result);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004138:	623a      	str	r2, [r7, #32]
 800413a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	69f9      	ldr	r1, [r7, #28]
 800413e:	6a3a      	ldr	r2, [r7, #32]
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	61bb      	str	r3, [r7, #24]
   return(result);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e5      	bne.n	8004118 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e00f      	b.n	8004188 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4013      	ands	r3, r2
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	429a      	cmp	r2, r3
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	429a      	cmp	r2, r3
 8004184:	d09f      	beq.n	80040c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3740      	adds	r7, #64	; 0x40
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004190:	b480      	push	{r7}
 8004192:	b095      	sub	sp, #84	; 0x54
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	330c      	adds	r3, #12
 80041b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041b8:	643a      	str	r2, [r7, #64]	; 0x40
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e5      	bne.n	8004198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	61fb      	str	r3, [r7, #28]
   return(result);
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e5      	bne.n	80041cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	2b01      	cmp	r3, #1
 8004206:	d119      	bne.n	800423c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	60bb      	str	r3, [r7, #8]
   return(result);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f023 0310 	bic.w	r3, r3, #16
 800421e:	647b      	str	r3, [r7, #68]	; 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004228:	61ba      	str	r2, [r7, #24]
 800422a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6979      	ldr	r1, [r7, #20]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	613b      	str	r3, [r7, #16]
   return(result);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e5      	bne.n	8004208 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
}
 800424a:	bf00      	nop
 800424c:	3754      	adds	r7, #84	; 0x54
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7ff ff09 	bl	8004088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b21      	cmp	r3, #33	; 0x21
 8004290:	d13e      	bne.n	8004310 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429a:	d114      	bne.n	80042c6 <UART_Transmit_IT+0x48>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d110      	bne.n	80042c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	1c9a      	adds	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	621a      	str	r2, [r3, #32]
 80042c4:	e008      	b.n	80042d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	1c59      	adds	r1, r3, #1
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6211      	str	r1, [r2, #32]
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4619      	mov	r1, r3
 80042e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10f      	bne.n	800430c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800430a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e000      	b.n	8004312 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
  }
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004334:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fe8e 	bl	8004060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b08c      	sub	sp, #48	; 0x30
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b22      	cmp	r3, #34	; 0x22
 8004360:	f040 80ab 	bne.w	80044ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436c:	d117      	bne.n	800439e <UART_Receive_IT+0x50>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d113      	bne.n	800439e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	b29b      	uxth	r3, r3
 8004388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438c:	b29a      	uxth	r2, r3
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	1c9a      	adds	r2, r3, #2
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
 800439c:	e026      	b.n	80043ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d007      	beq.n	80043c2 <UART_Receive_IT+0x74>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <UART_Receive_IT+0x82>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	e008      	b.n	80043e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	4619      	mov	r1, r3
 80043fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d15a      	bne.n	80044b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0220 	bic.w	r2, r2, #32
 800440e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800441e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	2b01      	cmp	r3, #1
 800443e:	d135      	bne.n	80044ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	613b      	str	r3, [r7, #16]
   return(result);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004466:	623a      	str	r2, [r7, #32]
 8004468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	69f9      	ldr	r1, [r7, #28]
 800446c:	6a3a      	ldr	r2, [r7, #32]
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	61bb      	str	r3, [r7, #24]
   return(result);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b10      	cmp	r3, #16
 8004486:	d10a      	bne.n	800449e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fdf9 	bl	800409c <HAL_UARTEx_RxEventCallback>
 80044aa:	e002      	b.n	80044b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff fde1 	bl	8004074 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e002      	b.n	80044bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3730      	adds	r7, #48	; 0x30
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	b09f      	sub	sp, #124	; 0x7c
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	68d9      	ldr	r1, [r3, #12]
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	ea40 0301 	orr.w	r3, r0, r1
 80044e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	431a      	orrs	r2, r3
 80044f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004508:	f021 010c 	bic.w	r1, r1, #12
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004512:	430b      	orrs	r3, r1
 8004514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004522:	6999      	ldr	r1, [r3, #24]
 8004524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	ea40 0301 	orr.w	r3, r0, r1
 800452c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800452e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4bc5      	ldr	r3, [pc, #788]	; (8004848 <UART_SetConfig+0x384>)
 8004534:	429a      	cmp	r2, r3
 8004536:	d004      	beq.n	8004542 <UART_SetConfig+0x7e>
 8004538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4bc3      	ldr	r3, [pc, #780]	; (800484c <UART_SetConfig+0x388>)
 800453e:	429a      	cmp	r2, r3
 8004540:	d103      	bne.n	800454a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004542:	f7fe fe2b 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 8004546:	6778      	str	r0, [r7, #116]	; 0x74
 8004548:	e002      	b.n	8004550 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800454a:	f7fe fe13 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 800454e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004558:	f040 80b6 	bne.w	80046c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800455c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800455e:	461c      	mov	r4, r3
 8004560:	f04f 0500 	mov.w	r5, #0
 8004564:	4622      	mov	r2, r4
 8004566:	462b      	mov	r3, r5
 8004568:	1891      	adds	r1, r2, r2
 800456a:	6439      	str	r1, [r7, #64]	; 0x40
 800456c:	415b      	adcs	r3, r3
 800456e:	647b      	str	r3, [r7, #68]	; 0x44
 8004570:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004574:	1912      	adds	r2, r2, r4
 8004576:	eb45 0303 	adc.w	r3, r5, r3
 800457a:	f04f 0000 	mov.w	r0, #0
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	00d9      	lsls	r1, r3, #3
 8004584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004588:	00d0      	lsls	r0, r2, #3
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	1911      	adds	r1, r2, r4
 8004590:	6639      	str	r1, [r7, #96]	; 0x60
 8004592:	416b      	adcs	r3, r5
 8004594:	667b      	str	r3, [r7, #100]	; 0x64
 8004596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	461a      	mov	r2, r3
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	1891      	adds	r1, r2, r2
 80045a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80045a4:	415b      	adcs	r3, r3
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80045b0:	f7fc fafa 	bl	8000ba8 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4ba5      	ldr	r3, [pc, #660]	; (8004850 <UART_SetConfig+0x38c>)
 80045ba:	fba3 2302 	umull	r2, r3, r3, r2
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	011e      	lsls	r6, r3, #4
 80045c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c4:	461c      	mov	r4, r3
 80045c6:	f04f 0500 	mov.w	r5, #0
 80045ca:	4622      	mov	r2, r4
 80045cc:	462b      	mov	r3, r5
 80045ce:	1891      	adds	r1, r2, r2
 80045d0:	6339      	str	r1, [r7, #48]	; 0x30
 80045d2:	415b      	adcs	r3, r3
 80045d4:	637b      	str	r3, [r7, #52]	; 0x34
 80045d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045da:	1912      	adds	r2, r2, r4
 80045dc:	eb45 0303 	adc.w	r3, r5, r3
 80045e0:	f04f 0000 	mov.w	r0, #0
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	00d9      	lsls	r1, r3, #3
 80045ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045ee:	00d0      	lsls	r0, r2, #3
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	1911      	adds	r1, r2, r4
 80045f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80045f8:	416b      	adcs	r3, r5
 80045fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	461a      	mov	r2, r3
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	1891      	adds	r1, r2, r2
 8004608:	62b9      	str	r1, [r7, #40]	; 0x28
 800460a:	415b      	adcs	r3, r3
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800460e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004612:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004616:	f7fc fac7 	bl	8000ba8 <__aeabi_uldivmod>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4b8c      	ldr	r3, [pc, #560]	; (8004850 <UART_SetConfig+0x38c>)
 8004620:	fba3 1302 	umull	r1, r3, r3, r2
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	2164      	movs	r1, #100	; 0x64
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	3332      	adds	r3, #50	; 0x32
 8004632:	4a87      	ldr	r2, [pc, #540]	; (8004850 <UART_SetConfig+0x38c>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004640:	441e      	add	r6, r3
 8004642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004644:	4618      	mov	r0, r3
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	1894      	adds	r4, r2, r2
 8004650:	623c      	str	r4, [r7, #32]
 8004652:	415b      	adcs	r3, r3
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
 8004656:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800465a:	1812      	adds	r2, r2, r0
 800465c:	eb41 0303 	adc.w	r3, r1, r3
 8004660:	f04f 0400 	mov.w	r4, #0
 8004664:	f04f 0500 	mov.w	r5, #0
 8004668:	00dd      	lsls	r5, r3, #3
 800466a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800466e:	00d4      	lsls	r4, r2, #3
 8004670:	4622      	mov	r2, r4
 8004672:	462b      	mov	r3, r5
 8004674:	1814      	adds	r4, r2, r0
 8004676:	653c      	str	r4, [r7, #80]	; 0x50
 8004678:	414b      	adcs	r3, r1
 800467a:	657b      	str	r3, [r7, #84]	; 0x54
 800467c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	461a      	mov	r2, r3
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	1891      	adds	r1, r2, r2
 8004688:	61b9      	str	r1, [r7, #24]
 800468a:	415b      	adcs	r3, r3
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004692:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004696:	f7fc fa87 	bl	8000ba8 <__aeabi_uldivmod>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4b6c      	ldr	r3, [pc, #432]	; (8004850 <UART_SetConfig+0x38c>)
 80046a0:	fba3 1302 	umull	r1, r3, r3, r2
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	2164      	movs	r1, #100	; 0x64
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	3332      	adds	r3, #50	; 0x32
 80046b2:	4a67      	ldr	r2, [pc, #412]	; (8004850 <UART_SetConfig+0x38c>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	f003 0207 	and.w	r2, r3, #7
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4432      	add	r2, r6
 80046c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046c6:	e0b9      	b.n	800483c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ca:	461c      	mov	r4, r3
 80046cc:	f04f 0500 	mov.w	r5, #0
 80046d0:	4622      	mov	r2, r4
 80046d2:	462b      	mov	r3, r5
 80046d4:	1891      	adds	r1, r2, r2
 80046d6:	6139      	str	r1, [r7, #16]
 80046d8:	415b      	adcs	r3, r3
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046e0:	1912      	adds	r2, r2, r4
 80046e2:	eb45 0303 	adc.w	r3, r5, r3
 80046e6:	f04f 0000 	mov.w	r0, #0
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	00d9      	lsls	r1, r3, #3
 80046f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046f4:	00d0      	lsls	r0, r2, #3
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	eb12 0804 	adds.w	r8, r2, r4
 80046fe:	eb43 0905 	adc.w	r9, r3, r5
 8004702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	f04f 0100 	mov.w	r1, #0
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	008b      	lsls	r3, r1, #2
 8004716:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800471a:	0082      	lsls	r2, r0, #2
 800471c:	4640      	mov	r0, r8
 800471e:	4649      	mov	r1, r9
 8004720:	f7fc fa42 	bl	8000ba8 <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4b49      	ldr	r3, [pc, #292]	; (8004850 <UART_SetConfig+0x38c>)
 800472a:	fba3 2302 	umull	r2, r3, r3, r2
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	011e      	lsls	r6, r3, #4
 8004732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004734:	4618      	mov	r0, r3
 8004736:	f04f 0100 	mov.w	r1, #0
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	1894      	adds	r4, r2, r2
 8004740:	60bc      	str	r4, [r7, #8]
 8004742:	415b      	adcs	r3, r3
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800474a:	1812      	adds	r2, r2, r0
 800474c:	eb41 0303 	adc.w	r3, r1, r3
 8004750:	f04f 0400 	mov.w	r4, #0
 8004754:	f04f 0500 	mov.w	r5, #0
 8004758:	00dd      	lsls	r5, r3, #3
 800475a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800475e:	00d4      	lsls	r4, r2, #3
 8004760:	4622      	mov	r2, r4
 8004762:	462b      	mov	r3, r5
 8004764:	1814      	adds	r4, r2, r0
 8004766:	64bc      	str	r4, [r7, #72]	; 0x48
 8004768:	414b      	adcs	r3, r1
 800476a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800476c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	f04f 0100 	mov.w	r1, #0
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	008b      	lsls	r3, r1, #2
 8004780:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004784:	0082      	lsls	r2, r0, #2
 8004786:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800478a:	f7fc fa0d 	bl	8000ba8 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <UART_SetConfig+0x38c>)
 8004794:	fba3 1302 	umull	r1, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	2164      	movs	r1, #100	; 0x64
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	3332      	adds	r3, #50	; 0x32
 80047a6:	4a2a      	ldr	r2, [pc, #168]	; (8004850 <UART_SetConfig+0x38c>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047b2:	441e      	add	r6, r3
 80047b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047b6:	4618      	mov	r0, r3
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	1894      	adds	r4, r2, r2
 80047c2:	603c      	str	r4, [r7, #0]
 80047c4:	415b      	adcs	r3, r3
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047cc:	1812      	adds	r2, r2, r0
 80047ce:	eb41 0303 	adc.w	r3, r1, r3
 80047d2:	f04f 0400 	mov.w	r4, #0
 80047d6:	f04f 0500 	mov.w	r5, #0
 80047da:	00dd      	lsls	r5, r3, #3
 80047dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047e0:	00d4      	lsls	r4, r2, #3
 80047e2:	4622      	mov	r2, r4
 80047e4:	462b      	mov	r3, r5
 80047e6:	eb12 0a00 	adds.w	sl, r2, r0
 80047ea:	eb43 0b01 	adc.w	fp, r3, r1
 80047ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f04f 0100 	mov.w	r1, #0
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	008b      	lsls	r3, r1, #2
 8004802:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004806:	0082      	lsls	r2, r0, #2
 8004808:	4650      	mov	r0, sl
 800480a:	4659      	mov	r1, fp
 800480c:	f7fc f9cc 	bl	8000ba8 <__aeabi_uldivmod>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <UART_SetConfig+0x38c>)
 8004816:	fba3 1302 	umull	r1, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2164      	movs	r1, #100	; 0x64
 800481e:	fb01 f303 	mul.w	r3, r1, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	; 0x32
 8004828:	4a09      	ldr	r2, [pc, #36]	; (8004850 <UART_SetConfig+0x38c>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 020f 	and.w	r2, r3, #15
 8004834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4432      	add	r2, r6
 800483a:	609a      	str	r2, [r3, #8]
}
 800483c:	bf00      	nop
 800483e:	377c      	adds	r7, #124	; 0x7c
 8004840:	46bd      	mov	sp, r7
 8004842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004846:	bf00      	nop
 8004848:	40011000 	.word	0x40011000
 800484c:	40011400 	.word	0x40011400
 8004850:	51eb851f 	.word	0x51eb851f

08004854 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <LL_EXTI_EnableIT_0_31+0x20>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4904      	ldr	r1, [pc, #16]	; (8004874 <LL_EXTI_EnableIT_0_31+0x20>)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	40013c00 	.word	0x40013c00

08004878 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <LL_EXTI_DisableIT_0_31+0x24>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	43db      	mvns	r3, r3
 8004888:	4904      	ldr	r1, [pc, #16]	; (800489c <LL_EXTI_DisableIT_0_31+0x24>)
 800488a:	4013      	ands	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40013c00 	.word	0x40013c00

080048a0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	4904      	ldr	r1, [pc, #16]	; (80048c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	604b      	str	r3, [r1, #4]

}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40013c00 	.word	0x40013c00

080048c4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	43db      	mvns	r3, r3
 80048d4:	4904      	ldr	r1, [pc, #16]	; (80048e8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40013c00 	.word	0x40013c00

080048ec <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	4904      	ldr	r1, [pc, #16]	; (800490c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]

}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	40013c00 	.word	0x40013c00

08004910 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	43db      	mvns	r3, r3
 8004920:	4904      	ldr	r1, [pc, #16]	; (8004934 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004922:	4013      	ands	r3, r2
 8004924:	608b      	str	r3, [r1, #8]

}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40013c00 	.word	0x40013c00

08004938 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	4904      	ldr	r1, [pc, #16]	; (8004958 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4313      	orrs	r3, r2
 800494a:	60cb      	str	r3, [r1, #12]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40013c00 	.word	0x40013c00

0800495c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	43db      	mvns	r3, r3
 800496c:	4904      	ldr	r1, [pc, #16]	; (8004980 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800496e:	4013      	ands	r3, r2
 8004970:	60cb      	str	r3, [r1, #12]
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40013c00 	.word	0x40013c00

08004984 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	791b      	ldrb	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d065      	beq.n	8004a64 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d06c      	beq.n	8004a7a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	795b      	ldrb	r3, [r3, #5]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d01c      	beq.n	80049e2 <LL_EXTI_Init+0x5e>
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	dc25      	bgt.n	80049f8 <LL_EXTI_Init+0x74>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <LL_EXTI_Init+0x32>
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d00b      	beq.n	80049cc <LL_EXTI_Init+0x48>
 80049b4:	e020      	b.n	80049f8 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff82 	bl	80048c4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ff45 	bl	8004854 <LL_EXTI_EnableIT_0_31>
          break;
 80049ca:	e018      	b.n	80049fe <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff51 	bl	8004878 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff ff60 	bl	80048a0 <LL_EXTI_EnableEvent_0_31>
          break;
 80049e0:	e00d      	b.n	80049fe <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff ff34 	bl	8004854 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff55 	bl	80048a0 <LL_EXTI_EnableEvent_0_31>
          break;
 80049f6:	e002      	b.n	80049fe <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
          break;
 80049fc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	799b      	ldrb	r3, [r3, #6]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d039      	beq.n	8004a7a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	799b      	ldrb	r3, [r3, #6]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d01c      	beq.n	8004a48 <LL_EXTI_Init+0xc4>
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	dc25      	bgt.n	8004a5e <LL_EXTI_Init+0xda>
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d002      	beq.n	8004a1c <LL_EXTI_Init+0x98>
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d00b      	beq.n	8004a32 <LL_EXTI_Init+0xae>
 8004a1a:	e020      	b.n	8004a5e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff9b 	bl	800495c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff ff5e 	bl	80048ec <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004a30:	e024      	b.n	8004a7c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff ff6a 	bl	8004910 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff ff79 	bl	8004938 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004a46:	e019      	b.n	8004a7c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff ff4d 	bl	80048ec <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff ff6e 	bl	8004938 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004a5c:	e00e      	b.n	8004a7c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
            break;
 8004a62:	e00b      	b.n	8004a7c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff ff05 	bl	8004878 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff ff26 	bl	80048c4 <LL_EXTI_DisableEvent_0_31>
 8004a78:	e000      	b.n	8004a7c <LL_EXTI_Init+0xf8>
      }
 8004a7a:	bf00      	nop
  }
  return status;
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <LL_GPIO_SetPinMode>:
{
 8004a86:	b480      	push	{r7}
 8004a88:	b089      	sub	sp, #36	; 0x24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	fa93 f3a3 	rbit	r3, r3
 8004aa0:	613b      	str	r3, [r7, #16]
  return result;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	fab3 f383 	clz	r3, r3
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	2103      	movs	r1, #3
 8004aae:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	401a      	ands	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	61bb      	str	r3, [r7, #24]
  return result;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	fab3 f383 	clz	r3, r3
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	601a      	str	r2, [r3, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	3724      	adds	r7, #36	; 0x24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <LL_GPIO_SetPinOutputType>:
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	43db      	mvns	r3, r3
 8004af8:	401a      	ands	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	431a      	orrs	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	605a      	str	r2, [r3, #4]
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_GPIO_SetPinSpeed>:
{
 8004b14:	b480      	push	{r7}
 8004b16:	b089      	sub	sp, #36	; 0x24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	fa93 f3a3 	rbit	r3, r3
 8004b2e:	613b      	str	r3, [r7, #16]
  return result;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	fab3 f383 	clz	r3, r3
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2103      	movs	r1, #3
 8004b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	401a      	ands	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	fa93 f3a3 	rbit	r3, r3
 8004b4e:	61bb      	str	r3, [r7, #24]
  return result;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	fab3 f383 	clz	r3, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b60:	431a      	orrs	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	609a      	str	r2, [r3, #8]
}
 8004b66:	bf00      	nop
 8004b68:	3724      	adds	r7, #36	; 0x24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <LL_GPIO_SetPinPull>:
{
 8004b72:	b480      	push	{r7}
 8004b74:	b089      	sub	sp, #36	; 0x24
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	fa93 f3a3 	rbit	r3, r3
 8004b8c:	613b      	str	r3, [r7, #16]
  return result;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	fab3 f383 	clz	r3, r3
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	2103      	movs	r1, #3
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	401a      	ands	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	fa93 f3a3 	rbit	r3, r3
 8004bac:	61bb      	str	r3, [r7, #24]
  return result;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	fab3 f383 	clz	r3, r3
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	60da      	str	r2, [r3, #12]
}
 8004bc4:	bf00      	nop
 8004bc6:	3724      	adds	r7, #36	; 0x24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <LL_GPIO_SetAFPin_0_7>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	fa93 f3a3 	rbit	r3, r3
 8004bea:	613b      	str	r3, [r7, #16]
  return result;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	fab3 f383 	clz	r3, r3
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	210f      	movs	r1, #15
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	401a      	ands	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	fa93 f3a3 	rbit	r3, r3
 8004c0a:	61bb      	str	r3, [r7, #24]
  return result;
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	fab3 f383 	clz	r3, r3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	bf00      	nop
 8004c24:	3724      	adds	r7, #36	; 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <LL_GPIO_SetAFPin_8_15>:
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b089      	sub	sp, #36	; 0x24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	0a1b      	lsrs	r3, r3, #8
 8004c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	fa93 f3a3 	rbit	r3, r3
 8004c4a:	613b      	str	r3, [r7, #16]
  return result;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	210f      	movs	r1, #15
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	401a      	ands	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	0a1b      	lsrs	r3, r3, #8
 8004c64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	fa93 f3a3 	rbit	r3, r3
 8004c6c:	61bb      	str	r3, [r7, #24]
  return result;
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	fab3 f383 	clz	r3, r3
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004c84:	bf00      	nop
 8004c86:	3724      	adds	r7, #36	; 0x24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	613b      	str	r3, [r7, #16]
  return result;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	fab3 f383 	clz	r3, r3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004cba:	e050      	b.n	8004d5e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d042      	beq.n	8004d58 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d003      	beq.n	8004ce2 <LL_GPIO_Init+0x52>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d10d      	bne.n	8004cfe <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	69b9      	ldr	r1, [r7, #24]
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff ff12 	bl	8004b14 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	69b9      	ldr	r1, [r7, #24]
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fef3 	bl	8004ae4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	461a      	mov	r2, r3
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff ff33 	bl	8004b72 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d11a      	bne.n	8004d4a <LL_GPIO_Init+0xba>
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	60bb      	str	r3, [r7, #8]
  return result;
 8004d20:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b07      	cmp	r3, #7
 8004d2a:	d807      	bhi.n	8004d3c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	461a      	mov	r2, r3
 8004d32:	69b9      	ldr	r1, [r7, #24]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ff4b 	bl	8004bd0 <LL_GPIO_SetAFPin_0_7>
 8004d3a:	e006      	b.n	8004d4a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	461a      	mov	r2, r3
 8004d42:	69b9      	ldr	r1, [r7, #24]
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff ff72 	bl	8004c2e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	69b9      	ldr	r1, [r7, #24]
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff fe97 	bl	8004a86 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1a7      	bne.n	8004cbc <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <LL_SPI_IsEnabled>:
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d101      	bne.n	8004d8e <LL_SPI_IsEnabled+0x18>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <LL_SPI_IsEnabled+0x1a>
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_SPI_SetCRCPolynomial>:
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	611a      	str	r2, [r3, #16]
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff ffd3 	bl	8004d76 <LL_SPI_IsEnabled>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d139      	bne.n	8004e4a <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dde:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	6811      	ldr	r1, [r2, #0]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	6852      	ldr	r2, [r2, #4]
 8004dea:	4311      	orrs	r1, r2
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	6892      	ldr	r2, [r2, #8]
 8004df0:	4311      	orrs	r1, r2
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	68d2      	ldr	r2, [r2, #12]
 8004df6:	4311      	orrs	r1, r2
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	6912      	ldr	r2, [r2, #16]
 8004dfc:	4311      	orrs	r1, r2
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	6952      	ldr	r2, [r2, #20]
 8004e02:	4311      	orrs	r1, r2
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	6992      	ldr	r2, [r2, #24]
 8004e08:	4311      	orrs	r1, r2
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	69d2      	ldr	r2, [r2, #28]
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	6a12      	ldr	r2, [r2, #32]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f023 0204 	bic.w	r2, r3, #4
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e38:	d105      	bne.n	8004e46 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ffab 	bl	8004d9c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	61da      	str	r2, [r3, #28]
  return status;
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <network_normalized_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_normalized_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8004e6e:	f107 030c 	add.w	r3, r7, #12
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	2101      	movs	r1, #1
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f9a6 	bl	80051c8 <ai_platform_get_activations_map>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d043      	beq.n	8004f0a <network_normalized_configure_activations+0xaa>
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8004e82:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <network_normalized_configure_activations+0xb4>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8004e88:	4b22      	ldr	r3, [pc, #136]	; (8004f14 <network_normalized_configure_activations+0xb4>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	60da      	str	r2, [r3, #12]
    conv2d_10_output_array.data = AI_PTR(activations_map[0] + 384);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004e94:	4a20      	ldr	r2, [pc, #128]	; (8004f18 <network_normalized_configure_activations+0xb8>)
 8004e96:	6093      	str	r3, [r2, #8]
    conv2d_10_output_array.data_start = AI_PTR(activations_map[0] + 384);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <network_normalized_configure_activations+0xb8>)
 8004ea0:	60d3      	str	r3, [r2, #12]
    conv2d_11_output_array.data = AI_PTR(activations_map[0] + 832);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004ea8:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <network_normalized_configure_activations+0xbc>)
 8004eaa:	6093      	str	r3, [r2, #8]
    conv2d_11_output_array.data_start = AI_PTR(activations_map[0] + 832);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004eb2:	4a1a      	ldr	r2, [pc, #104]	; (8004f1c <network_normalized_configure_activations+0xbc>)
 8004eb4:	60d3      	str	r3, [r2, #12]
    dense_10_output_array.data = AI_PTR(activations_map[0] + 0);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a19      	ldr	r2, [pc, #100]	; (8004f20 <network_normalized_configure_activations+0xc0>)
 8004eba:	6093      	str	r3, [r2, #8]
    dense_10_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <network_normalized_configure_activations+0xc0>)
 8004ec0:	60d3      	str	r3, [r2, #12]
    dense_10_nl_output_array.data = AI_PTR(activations_map[0] + 128);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3380      	adds	r3, #128	; 0x80
 8004ec6:	4a17      	ldr	r2, [pc, #92]	; (8004f24 <network_normalized_configure_activations+0xc4>)
 8004ec8:	6093      	str	r3, [r2, #8]
    dense_10_nl_output_array.data_start = AI_PTR(activations_map[0] + 128);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3380      	adds	r3, #128	; 0x80
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <network_normalized_configure_activations+0xc4>)
 8004ed0:	60d3      	str	r3, [r2, #12]
    dense_11_output_array.data = AI_PTR(activations_map[0] + 0);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <network_normalized_configure_activations+0xc8>)
 8004ed6:	6093      	str	r3, [r2, #8]
    dense_11_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <network_normalized_configure_activations+0xc8>)
 8004edc:	60d3      	str	r3, [r2, #12]
    dense_11_nl_output_array.data = AI_PTR(NULL);
 8004ede:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <network_normalized_configure_activations+0xcc>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	609a      	str	r2, [r3, #8]
    dense_11_nl_output_array.data_start = AI_PTR(NULL);
 8004ee4:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <network_normalized_configure_activations+0xcc>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	60da      	str	r2, [r3, #12]
    conv2d_10_scratch0_array.data = AI_PTR(activations_map[0] + 192);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	33c0      	adds	r3, #192	; 0xc0
 8004eee:	4a10      	ldr	r2, [pc, #64]	; (8004f30 <network_normalized_configure_activations+0xd0>)
 8004ef0:	6093      	str	r3, [r2, #8]
    conv2d_10_scratch0_array.data_start = AI_PTR(activations_map[0] + 192);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	33c0      	adds	r3, #192	; 0xc0
 8004ef6:	4a0e      	ldr	r2, [pc, #56]	; (8004f30 <network_normalized_configure_activations+0xd0>)
 8004ef8:	60d3      	str	r3, [r2, #12]
    conv2d_11_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <network_normalized_configure_activations+0xd4>)
 8004efe:	6093      	str	r3, [r2, #8]
    conv2d_11_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a0c      	ldr	r2, [pc, #48]	; (8004f34 <network_normalized_configure_activations+0xd4>)
 8004f04:	60d3      	str	r3, [r2, #12]
    
    return true;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <network_normalized_configure_activations+0xac>
  }
  return false;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	200003b0 	.word	0x200003b0
 8004f18:	200003c0 	.word	0x200003c0
 8004f1c:	200003d0 	.word	0x200003d0
 8004f20:	200003e0 	.word	0x200003e0
 8004f24:	200003f0 	.word	0x200003f0
 8004f28:	20000400 	.word	0x20000400
 8004f2c:	20000410 	.word	0x20000410
 8004f30:	200004a0 	.word	0x200004a0
 8004f34:	200004b0 	.word	0x200004b0

08004f38 <network_normalized_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_normalized_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004f46:	f107 030c 	add.w	r3, r7, #12
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 f906 	bl	8005160 <ai_platform_get_weights_map>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d07d      	beq.n	8005056 <network_normalized_configure_weights+0x11e>
    /* Updating weights with array addresses */
    
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <network_normalized_configure_weights+0x128>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f62:	4a3f      	ldr	r2, [pc, #252]	; (8005060 <network_normalized_configure_weights+0x128>)
 8004f64:	6013      	str	r3, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(weights_map[0] + 0);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a3d      	ldr	r2, [pc, #244]	; (8005060 <network_normalized_configure_weights+0x128>)
 8004f6a:	6093      	str	r3, [r2, #8]
    conv2d_10_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4a3c      	ldr	r2, [pc, #240]	; (8005060 <network_normalized_configure_weights+0x128>)
 8004f70:	60d3      	str	r3, [r2, #12]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f72:	4b3c      	ldr	r3, [pc, #240]	; (8005064 <network_normalized_configure_weights+0x12c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f7a:	4a3a      	ldr	r2, [pc, #232]	; (8005064 <network_normalized_configure_weights+0x12c>)
 8004f7c:	6013      	str	r3, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(weights_map[0] + 960);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8004f84:	4a37      	ldr	r2, [pc, #220]	; (8005064 <network_normalized_configure_weights+0x12c>)
 8004f86:	6093      	str	r3, [r2, #8]
    conv2d_10_bias_array.data_start = AI_PTR(weights_map[0] + 960);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8004f8e:	4a35      	ldr	r2, [pc, #212]	; (8005064 <network_normalized_configure_weights+0x12c>)
 8004f90:	60d3      	str	r3, [r2, #12]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f92:	4b35      	ldr	r3, [pc, #212]	; (8005068 <network_normalized_configure_weights+0x130>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f9a:	4a33      	ldr	r2, [pc, #204]	; (8005068 <network_normalized_configure_weights+0x130>)
 8004f9c:	6013      	str	r3, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(weights_map[0] + 1024);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa4:	4a30      	ldr	r2, [pc, #192]	; (8005068 <network_normalized_configure_weights+0x130>)
 8004fa6:	6093      	str	r3, [r2, #8]
    conv2d_11_weights_array.data_start = AI_PTR(weights_map[0] + 1024);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fae:	4a2e      	ldr	r2, [pc, #184]	; (8005068 <network_normalized_configure_weights+0x130>)
 8004fb0:	60d3      	str	r3, [r2, #12]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fb2:	4b2e      	ldr	r3, [pc, #184]	; (800506c <network_normalized_configure_weights+0x134>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fba:	4a2c      	ldr	r2, [pc, #176]	; (800506c <network_normalized_configure_weights+0x134>)
 8004fbc:	6013      	str	r3, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(weights_map[0] + 7168);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004fc4:	4a29      	ldr	r2, [pc, #164]	; (800506c <network_normalized_configure_weights+0x134>)
 8004fc6:	6093      	str	r3, [r2, #8]
    conv2d_11_bias_array.data_start = AI_PTR(weights_map[0] + 7168);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004fce:	4a27      	ldr	r2, [pc, #156]	; (800506c <network_normalized_configure_weights+0x134>)
 8004fd0:	60d3      	str	r3, [r2, #12]
    dense_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fd2:	4b27      	ldr	r3, [pc, #156]	; (8005070 <network_normalized_configure_weights+0x138>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fda:	4a25      	ldr	r2, [pc, #148]	; (8005070 <network_normalized_configure_weights+0x138>)
 8004fdc:	6013      	str	r3, [r2, #0]
    dense_10_weights_array.data = AI_PTR(weights_map[0] + 7296);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f503 53e4 	add.w	r3, r3, #7296	; 0x1c80
 8004fe4:	4a22      	ldr	r2, [pc, #136]	; (8005070 <network_normalized_configure_weights+0x138>)
 8004fe6:	6093      	str	r3, [r2, #8]
    dense_10_weights_array.data_start = AI_PTR(weights_map[0] + 7296);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 53e4 	add.w	r3, r3, #7296	; 0x1c80
 8004fee:	4a20      	ldr	r2, [pc, #128]	; (8005070 <network_normalized_configure_weights+0x138>)
 8004ff0:	60d3      	str	r3, [r2, #12]
    dense_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ff2:	4b20      	ldr	r3, [pc, #128]	; (8005074 <network_normalized_configure_weights+0x13c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <network_normalized_configure_weights+0x13c>)
 8004ffc:	6013      	str	r3, [r2, #0]
    dense_10_bias_array.data = AI_PTR(weights_map[0] + 11392);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f503 5332 	add.w	r3, r3, #11392	; 0x2c80
 8005004:	4a1b      	ldr	r2, [pc, #108]	; (8005074 <network_normalized_configure_weights+0x13c>)
 8005006:	6093      	str	r3, [r2, #8]
    dense_10_bias_array.data_start = AI_PTR(weights_map[0] + 11392);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 5332 	add.w	r3, r3, #11392	; 0x2c80
 800500e:	4a19      	ldr	r2, [pc, #100]	; (8005074 <network_normalized_configure_weights+0x13c>)
 8005010:	60d3      	str	r3, [r2, #12]
    dense_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8005012:	4b19      	ldr	r3, [pc, #100]	; (8005078 <network_normalized_configure_weights+0x140>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800501a:	4a17      	ldr	r2, [pc, #92]	; (8005078 <network_normalized_configure_weights+0x140>)
 800501c:	6013      	str	r3, [r2, #0]
    dense_11_weights_array.data = AI_PTR(weights_map[0] + 11520);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 8005024:	4a14      	ldr	r2, [pc, #80]	; (8005078 <network_normalized_configure_weights+0x140>)
 8005026:	6093      	str	r3, [r2, #8]
    dense_11_weights_array.data_start = AI_PTR(weights_map[0] + 11520);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 800502e:	4a12      	ldr	r2, [pc, #72]	; (8005078 <network_normalized_configure_weights+0x140>)
 8005030:	60d3      	str	r3, [r2, #12]
    dense_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <network_normalized_configure_weights+0x144>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800503a:	4a10      	ldr	r2, [pc, #64]	; (800507c <network_normalized_configure_weights+0x144>)
 800503c:	6013      	str	r3, [r2, #0]
    dense_11_bias_array.data = AI_PTR(weights_map[0] + 11904);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f503 533a 	add.w	r3, r3, #11904	; 0x2e80
 8005044:	4a0d      	ldr	r2, [pc, #52]	; (800507c <network_normalized_configure_weights+0x144>)
 8005046:	6093      	str	r3, [r2, #8]
    dense_11_bias_array.data_start = AI_PTR(weights_map[0] + 11904);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 533a 	add.w	r3, r3, #11904	; 0x2e80
 800504e:	4a0b      	ldr	r2, [pc, #44]	; (800507c <network_normalized_configure_weights+0x144>)
 8005050:	60d3      	str	r3, [r2, #12]
    return true;
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <network_normalized_configure_weights+0x120>
  }
  return false;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000420 	.word	0x20000420
 8005064:	20000430 	.word	0x20000430
 8005068:	20000440 	.word	0x20000440
 800506c:	20000450 	.word	0x20000450
 8005070:	20000460 	.word	0x20000460
 8005074:	20000470 	.word	0x20000470
 8005078:	20000480 	.word	0x20000480
 800507c:	20000490 	.word	0x20000490

08005080 <ai_network_normalized_create>:
}

AI_API_ENTRY
ai_error ai_network_normalized_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af02      	add	r7, sp, #8
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800508a:	2300      	movs	r3, #0
 800508c:	9301      	str	r3, [sp, #4]
 800508e:	2304      	movs	r3, #4
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	2301      	movs	r3, #1
 8005094:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <ai_network_normalized_create+0x28>)
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f8c9 	bl	8005230 <ai_platform_network_create>
 800509e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20000bd4 	.word	0x20000bd4

080050ac <ai_network_normalized_init>:
}

AI_API_ENTRY
ai_bool ai_network_normalized_init(
  ai_handle network, const ai_network_params* params)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f98f 	bl	80053dc <ai_platform_network_init>
 80050be:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <ai_network_normalized_init+0x1e>
 80050c6:	2300      	movs	r3, #0
 80050c8:	e028      	b.n	800511c <ai_network_normalized_init+0x70>

  ai_bool ok = true;
 80050ca:	2301      	movs	r3, #1
 80050cc:	72fb      	strb	r3, [r7, #11]
  ok &= network_normalized_configure_weights(net_ctx, params);
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f7ff ff31 	bl	8004f38 <network_normalized_configure_weights>
 80050d6:	4603      	mov	r3, r0
 80050d8:	461a      	mov	r2, r3
 80050da:	7afb      	ldrb	r3, [r7, #11]
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bf14      	ite	ne
 80050e2:	2301      	movne	r3, #1
 80050e4:	2300      	moveq	r3, #0
 80050e6:	72fb      	strb	r3, [r7, #11]
  ok &= network_normalized_configure_activations(net_ctx, params);
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff feb8 	bl	8004e60 <network_normalized_configure_activations>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	7afb      	ldrb	r3, [r7, #11]
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bf14      	ite	ne
 80050fc:	2301      	movne	r3, #1
 80050fe:	2300      	moveq	r3, #0
 8005100:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fa7c 	bl	8005600 <ai_platform_network_post_init>
 8005108:	4603      	mov	r3, r0
 800510a:	461a      	mov	r2, r3
 800510c:	7afb      	ldrb	r3, [r7, #11]
 800510e:	4013      	ands	r3, r2
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf14      	ite	ne
 8005114:	2301      	movne	r3, #1
 8005116:	2300      	moveq	r3, #0
 8005118:	72fb      	strb	r3, [r7, #11]

  return ok;
 800511a:	7afb      	ldrb	r3, [r7, #11]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <ai_network_normalized_run>:


AI_API_ENTRY
ai_i32 ai_network_normalized_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 faf7 	bl	8005728 <ai_platform_network_process>
 800513a:	4603      	mov	r3, r0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <ai_network_normalized_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_normalized_data_weights_get(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_network_normalized_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_normalized_weights_map);
 8005148:	4b02      	ldr	r3, [pc, #8]	; (8005154 <ai_network_normalized_data_weights_get+0x10>)

}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	0800e050 	.word	0x0800e050

08005158 <_ai_platform_acquire_crc>:
 8005158:	2001      	movs	r0, #1
 800515a:	4770      	bx	lr

0800515c <_ai_platform_release_crc>:
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop

08005160 <ai_platform_get_weights_map>:
 8005160:	b132      	cbz	r2, 8005170 <ai_platform_get_weights_map+0x10>
 8005162:	6912      	ldr	r2, [r2, #16]
 8005164:	b122      	cbz	r2, 8005170 <ai_platform_get_weights_map+0x10>
 8005166:	b110      	cbz	r0, 800516e <ai_platform_get_weights_map+0xe>
 8005168:	b921      	cbnz	r1, 8005174 <ai_platform_get_weights_map+0x14>
 800516a:	4608      	mov	r0, r1
 800516c:	4770      	bx	lr
 800516e:	4770      	bx	lr
 8005170:	4610      	mov	r0, r2
 8005172:	4770      	bx	lr
 8005174:	b470      	push	{r4, r5, r6}
 8005176:	4b13      	ldr	r3, [pc, #76]	; (80051c4 <ai_platform_get_weights_map+0x64>)
 8005178:	6815      	ldr	r5, [r2, #0]
 800517a:	429d      	cmp	r5, r3
 800517c:	d007      	beq.n	800518e <ai_platform_get_weights_map+0x2e>
 800517e:	6002      	str	r2, [r0, #0]
 8005180:	f1a1 0001 	sub.w	r0, r1, #1
 8005184:	fab0 f080 	clz	r0, r0
 8005188:	0940      	lsrs	r0, r0, #5
 800518a:	bc70      	pop	{r4, r5, r6}
 800518c:	4770      	bx	lr
 800518e:	6854      	ldr	r4, [r2, #4]
 8005190:	42ac      	cmp	r4, r5
 8005192:	f102 0204 	add.w	r2, r2, #4
 8005196:	d011      	beq.n	80051bc <ai_platform_get_weights_map+0x5c>
 8005198:	1f03      	subs	r3, r0, #4
 800519a:	4616      	mov	r6, r2
 800519c:	2000      	movs	r0, #0
 800519e:	e003      	b.n	80051a8 <ai_platform_get_weights_map+0x48>
 80051a0:	f856 4f04 	ldr.w	r4, [r6, #4]!
 80051a4:	42ac      	cmp	r4, r5
 80051a6:	d009      	beq.n	80051bc <ai_platform_get_weights_map+0x5c>
 80051a8:	3001      	adds	r0, #1
 80051aa:	4281      	cmp	r1, r0
 80051ac:	f843 4f04 	str.w	r4, [r3, #4]!
 80051b0:	d1f6      	bne.n	80051a0 <ai_platform_get_weights_map+0x40>
 80051b2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80051b6:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <ai_platform_get_weights_map+0x64>)
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <ai_platform_get_weights_map+0x60>
 80051bc:	2000      	movs	r0, #0
 80051be:	e7e4      	b.n	800518a <ai_platform_get_weights_map+0x2a>
 80051c0:	2001      	movs	r0, #1
 80051c2:	e7e2      	b.n	800518a <ai_platform_get_weights_map+0x2a>
 80051c4:	a1facade 	.word	0xa1facade

080051c8 <ai_platform_get_activations_map>:
 80051c8:	b132      	cbz	r2, 80051d8 <ai_platform_get_activations_map+0x10>
 80051ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051cc:	b122      	cbz	r2, 80051d8 <ai_platform_get_activations_map+0x10>
 80051ce:	b110      	cbz	r0, 80051d6 <ai_platform_get_activations_map+0xe>
 80051d0:	b921      	cbnz	r1, 80051dc <ai_platform_get_activations_map+0x14>
 80051d2:	4608      	mov	r0, r1
 80051d4:	4770      	bx	lr
 80051d6:	4770      	bx	lr
 80051d8:	4610      	mov	r0, r2
 80051da:	4770      	bx	lr
 80051dc:	b470      	push	{r4, r5, r6}
 80051de:	4b13      	ldr	r3, [pc, #76]	; (800522c <ai_platform_get_activations_map+0x64>)
 80051e0:	6815      	ldr	r5, [r2, #0]
 80051e2:	429d      	cmp	r5, r3
 80051e4:	d007      	beq.n	80051f6 <ai_platform_get_activations_map+0x2e>
 80051e6:	6002      	str	r2, [r0, #0]
 80051e8:	f1a1 0001 	sub.w	r0, r1, #1
 80051ec:	fab0 f080 	clz	r0, r0
 80051f0:	0940      	lsrs	r0, r0, #5
 80051f2:	bc70      	pop	{r4, r5, r6}
 80051f4:	4770      	bx	lr
 80051f6:	6854      	ldr	r4, [r2, #4]
 80051f8:	42ac      	cmp	r4, r5
 80051fa:	f102 0204 	add.w	r2, r2, #4
 80051fe:	d011      	beq.n	8005224 <ai_platform_get_activations_map+0x5c>
 8005200:	1f03      	subs	r3, r0, #4
 8005202:	4616      	mov	r6, r2
 8005204:	2000      	movs	r0, #0
 8005206:	e003      	b.n	8005210 <ai_platform_get_activations_map+0x48>
 8005208:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800520c:	42ac      	cmp	r4, r5
 800520e:	d009      	beq.n	8005224 <ai_platform_get_activations_map+0x5c>
 8005210:	3001      	adds	r0, #1
 8005212:	4281      	cmp	r1, r0
 8005214:	f843 4f04 	str.w	r4, [r3, #4]!
 8005218:	d1f6      	bne.n	8005208 <ai_platform_get_activations_map+0x40>
 800521a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800521e:	4b03      	ldr	r3, [pc, #12]	; (800522c <ai_platform_get_activations_map+0x64>)
 8005220:	429a      	cmp	r2, r3
 8005222:	d001      	beq.n	8005228 <ai_platform_get_activations_map+0x60>
 8005224:	2000      	movs	r0, #0
 8005226:	e7e4      	b.n	80051f2 <ai_platform_get_activations_map+0x2a>
 8005228:	2001      	movs	r0, #1
 800522a:	e7e2      	b.n	80051f2 <ai_platform_get_activations_map+0x2a>
 800522c:	a1facade 	.word	0xa1facade

08005230 <ai_platform_network_create>:
 8005230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	4607      	mov	r7, r0
 8005238:	4616      	mov	r6, r2
 800523a:	461d      	mov	r5, r3
 800523c:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8005240:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8005244:	f7ff ff88 	bl	8005158 <_ai_platform_acquire_crc>
 8005248:	b178      	cbz	r0, 800526a <ai_platform_network_create+0x3a>
 800524a:	4b5a      	ldr	r3, [pc, #360]	; (80053b4 <ai_platform_network_create+0x184>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005256:	4602      	mov	r2, r0
 8005258:	d00c      	beq.n	8005274 <ai_platform_network_create+0x44>
 800525a:	4b57      	ldr	r3, [pc, #348]	; (80053b8 <ai_platform_network_create+0x188>)
 800525c:	2118      	movs	r1, #24
 800525e:	6019      	str	r1, [r3, #0]
 8005260:	6819      	ldr	r1, [r3, #0]
 8005262:	2918      	cmp	r1, #24
 8005264:	d034      	beq.n	80052d0 <ai_platform_network_create+0xa0>
 8005266:	f7ff ff79 	bl	800515c <_ai_platform_release_crc>
 800526a:	f241 0033 	movw	r0, #4147	; 0x1033
 800526e:	b002      	add	sp, #8
 8005270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005274:	4b51      	ldr	r3, [pc, #324]	; (80053bc <ai_platform_network_create+0x18c>)
 8005276:	2101      	movs	r1, #1
 8005278:	6019      	str	r1, [r3, #0]
 800527a:	2114      	movs	r1, #20
 800527c:	e001      	b.n	8005282 <ai_platform_network_create+0x52>
 800527e:	3901      	subs	r1, #1
 8005280:	d002      	beq.n	8005288 <ai_platform_network_create+0x58>
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	2800      	cmp	r0, #0
 8005286:	d1fa      	bne.n	800527e <ai_platform_network_create+0x4e>
 8005288:	4b4c      	ldr	r3, [pc, #304]	; (80053bc <ai_platform_network_create+0x18c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	b9f3      	cbnz	r3, 80052cc <ai_platform_network_create+0x9c>
 800528e:	4610      	mov	r0, r2
 8005290:	f7ff ff64 	bl	800515c <_ai_platform_release_crc>
 8005294:	4a4a      	ldr	r2, [pc, #296]	; (80053c0 <ai_platform_network_create+0x190>)
 8005296:	6813      	ldr	r3, [r2, #0]
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	f7ff ff5b 	bl	8005158 <_ai_platform_acquire_crc>
 80052a2:	4b44      	ldr	r3, [pc, #272]	; (80053b4 <ai_platform_network_create+0x184>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ae:	d015      	beq.n	80052dc <ai_platform_network_create+0xac>
 80052b0:	4b41      	ldr	r3, [pc, #260]	; (80053b8 <ai_platform_network_create+0x188>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	2a00      	cmp	r2, #0
 80052ba:	d1fc      	bne.n	80052b6 <ai_platform_network_create+0x86>
 80052bc:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <ai_platform_network_create+0x194>)
 80052be:	4a42      	ldr	r2, [pc, #264]	; (80053c8 <ai_platform_network_create+0x198>)
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	4b41      	ldr	r3, [pc, #260]	; (80053cc <ai_platform_network_create+0x19c>)
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d016      	beq.n	80052f8 <ai_platform_network_create+0xc8>
 80052ca:	e7fe      	b.n	80052ca <ai_platform_network_create+0x9a>
 80052cc:	4610      	mov	r0, r2
 80052ce:	e7ca      	b.n	8005266 <ai_platform_network_create+0x36>
 80052d0:	2101      	movs	r1, #1
 80052d2:	6019      	str	r1, [r3, #0]
 80052d4:	6819      	ldr	r1, [r3, #0]
 80052d6:	2900      	cmp	r1, #0
 80052d8:	d1fc      	bne.n	80052d4 <ai_platform_network_create+0xa4>
 80052da:	e7d8      	b.n	800528e <ai_platform_network_create+0x5e>
 80052dc:	4b37      	ldr	r3, [pc, #220]	; (80053bc <ai_platform_network_create+0x18c>)
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	2a00      	cmp	r2, #0
 80052e6:	d1fc      	bne.n	80052e2 <ai_platform_network_create+0xb2>
 80052e8:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <ai_platform_network_create+0x1a0>)
 80052ea:	4a37      	ldr	r2, [pc, #220]	; (80053c8 <ai_platform_network_create+0x198>)
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	4b36      	ldr	r3, [pc, #216]	; (80053cc <ai_platform_network_create+0x19c>)
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d000      	beq.n	80052f8 <ai_platform_network_create+0xc8>
 80052f6:	e7fe      	b.n	80052f6 <ai_platform_network_create+0xc6>
 80052f8:	f7ff ff30 	bl	800515c <_ai_platform_release_crc>
 80052fc:	b1af      	cbz	r7, 800532a <ai_platform_network_create+0xfa>
 80052fe:	4b35      	ldr	r3, [pc, #212]	; (80053d4 <ai_platform_network_create+0x1a4>)
 8005300:	6033      	str	r3, [r6, #0]
 8005302:	603e      	str	r6, [r7, #0]
 8005304:	f000 fc8e 	bl	8005c24 <core_init>
 8005308:	b990      	cbnz	r0, 8005330 <ai_platform_network_create+0x100>
 800530a:	062d      	lsls	r5, r5, #24
 800530c:	0424      	lsls	r4, r4, #16
 800530e:	2230      	movs	r2, #48	; 0x30
 8005310:	2300      	movs	r3, #0
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	2110      	movs	r1, #16
 8005316:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 800531a:	2000      	movs	r0, #0
 800531c:	432b      	orrs	r3, r5
 800531e:	f362 0007 	bfi	r0, r2, #0, #8
 8005322:	6473      	str	r3, [r6, #68]	; 0x44
 8005324:	f361 201f 	bfi	r0, r1, #8, #24
 8005328:	e7a1      	b.n	800526e <ai_platform_network_create+0x3e>
 800532a:	f241 0010 	movw	r0, #4112	; 0x1010
 800532e:	e79e      	b.n	800526e <ai_platform_network_create+0x3e>
 8005330:	4a23      	ldr	r2, [pc, #140]	; (80053c0 <ai_platform_network_create+0x190>)
 8005332:	6813      	ldr	r3, [r2, #0]
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	f7ff ff0d 	bl	8005158 <_ai_platform_acquire_crc>
 800533e:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <ai_platform_network_create+0x184>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534a:	d00d      	beq.n	8005368 <ai_platform_network_create+0x138>
 800534c:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <ai_platform_network_create+0x188>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	2a00      	cmp	r2, #0
 8005356:	d1fc      	bne.n	8005352 <ai_platform_network_create+0x122>
 8005358:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <ai_platform_network_create+0x194>)
 800535a:	4a1b      	ldr	r2, [pc, #108]	; (80053c8 <ai_platform_network_create+0x198>)
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <ai_platform_network_create+0x19c>)
 8005362:	429a      	cmp	r2, r3
 8005364:	d00e      	beq.n	8005384 <ai_platform_network_create+0x154>
 8005366:	e7fe      	b.n	8005366 <ai_platform_network_create+0x136>
 8005368:	4b14      	ldr	r3, [pc, #80]	; (80053bc <ai_platform_network_create+0x18c>)
 800536a:	2201      	movs	r2, #1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2a00      	cmp	r2, #0
 8005372:	d1fc      	bne.n	800536e <ai_platform_network_create+0x13e>
 8005374:	4b16      	ldr	r3, [pc, #88]	; (80053d0 <ai_platform_network_create+0x1a0>)
 8005376:	4a14      	ldr	r2, [pc, #80]	; (80053c8 <ai_platform_network_create+0x198>)
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b13      	ldr	r3, [pc, #76]	; (80053cc <ai_platform_network_create+0x19c>)
 800537e:	429a      	cmp	r2, r3
 8005380:	d000      	beq.n	8005384 <ai_platform_network_create+0x154>
 8005382:	e7fe      	b.n	8005382 <ai_platform_network_create+0x152>
 8005384:	062d      	lsls	r5, r5, #24
 8005386:	0424      	lsls	r4, r4, #16
 8005388:	f7ff fee8 	bl	800515c <_ai_platform_release_crc>
 800538c:	ea45 0304 	orr.w	r3, r5, r4
 8005390:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8005394:	d001      	beq.n	800539a <ai_platform_network_create+0x16a>
 8005396:	2201      	movs	r2, #1
 8005398:	e7ba      	b.n	8005310 <ai_platform_network_create+0xe0>
 800539a:	a802      	add	r0, sp, #8
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <ai_platform_network_create+0x1a8>)
 800539e:	f840 3d04 	str.w	r3, [r0, #-4]!
 80053a2:	f002 fce1 	bl	8007d68 <ai_check_custom_types>
 80053a6:	b110      	cbz	r0, 80053ae <ai_platform_network_create+0x17e>
 80053a8:	2100      	movs	r1, #0
 80053aa:	460a      	mov	r2, r1
 80053ac:	e7b3      	b.n	8005316 <ai_platform_network_create+0xe6>
 80053ae:	2202      	movs	r2, #2
 80053b0:	e7ae      	b.n	8005310 <ai_platform_network_create+0xe0>
 80053b2:	bf00      	nop
 80053b4:	e0042000 	.word	0xe0042000
 80053b8:	58024c08 	.word	0x58024c08
 80053bc:	40023008 	.word	0x40023008
 80053c0:	e0002000 	.word	0xe0002000
 80053c4:	58024c00 	.word	0x58024c00
 80053c8:	f407a5c2 	.word	0xf407a5c2
 80053cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80053d0:	40023000 	.word	0x40023000
 80053d4:	a1c00100 	.word	0xa1c00100
 80053d8:	84048403 	.word	0x84048403

080053dc <ai_platform_network_init>:
 80053dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d04d      	beq.n	8005480 <ai_platform_network_init+0xa4>
 80053e4:	4b7c      	ldr	r3, [pc, #496]	; (80055d8 <ai_platform_network_init+0x1fc>)
 80053e6:	6802      	ldr	r2, [r0, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	4604      	mov	r4, r0
 80053ec:	d148      	bne.n	8005480 <ai_platform_network_init+0xa4>
 80053ee:	4a7b      	ldr	r2, [pc, #492]	; (80055dc <ai_platform_network_init+0x200>)
 80053f0:	6813      	ldr	r3, [r2, #0]
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	460d      	mov	r5, r1
 80053fa:	f7ff fead 	bl	8005158 <_ai_platform_acquire_crc>
 80053fe:	4b78      	ldr	r3, [pc, #480]	; (80055e0 <ai_platform_network_init+0x204>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540a:	d00d      	beq.n	8005428 <ai_platform_network_init+0x4c>
 800540c:	4b75      	ldr	r3, [pc, #468]	; (80055e4 <ai_platform_network_init+0x208>)
 800540e:	2201      	movs	r2, #1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	2a00      	cmp	r2, #0
 8005416:	d1fc      	bne.n	8005412 <ai_platform_network_init+0x36>
 8005418:	4b73      	ldr	r3, [pc, #460]	; (80055e8 <ai_platform_network_init+0x20c>)
 800541a:	4a74      	ldr	r2, [pc, #464]	; (80055ec <ai_platform_network_init+0x210>)
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4b73      	ldr	r3, [pc, #460]	; (80055f0 <ai_platform_network_init+0x214>)
 8005422:	429a      	cmp	r2, r3
 8005424:	d00d      	beq.n	8005442 <ai_platform_network_init+0x66>
 8005426:	e7fe      	b.n	8005426 <ai_platform_network_init+0x4a>
 8005428:	4b72      	ldr	r3, [pc, #456]	; (80055f4 <ai_platform_network_init+0x218>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	2a00      	cmp	r2, #0
 8005432:	d1fc      	bne.n	800542e <ai_platform_network_init+0x52>
 8005434:	4b70      	ldr	r3, [pc, #448]	; (80055f8 <ai_platform_network_init+0x21c>)
 8005436:	4a6d      	ldr	r2, [pc, #436]	; (80055ec <ai_platform_network_init+0x210>)
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4b6c      	ldr	r3, [pc, #432]	; (80055f0 <ai_platform_network_init+0x214>)
 800543e:	429a      	cmp	r2, r3
 8005440:	d11d      	bne.n	800547e <ai_platform_network_init+0xa2>
 8005442:	f7ff fe8b 	bl	800515c <_ai_platform_release_crc>
 8005446:	2d00      	cmp	r5, #0
 8005448:	d076      	beq.n	8005538 <ai_platform_network_init+0x15c>
 800544a:	4b6c      	ldr	r3, [pc, #432]	; (80055fc <ai_platform_network_init+0x220>)
 800544c:	682a      	ldr	r2, [r5, #0]
 800544e:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8005452:	429a      	cmp	r2, r3
 8005454:	d030      	beq.n	80054b8 <ai_platform_network_init+0xdc>
 8005456:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8005458:	46a9      	mov	r9, r5
 800545a:	f105 0118 	add.w	r1, r5, #24
 800545e:	2e00      	cmp	r6, #0
 8005460:	f000 8095 	beq.w	800558e <ai_platform_network_init+0x1b2>
 8005464:	f1bc 0f00 	cmp.w	ip, #0
 8005468:	f000 80a4 	beq.w	80055b4 <ai_platform_network_init+0x1d8>
 800546c:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 8005470:	f1b8 0f01 	cmp.w	r8, #1
 8005474:	d16a      	bne.n	800554c <ai_platform_network_init+0x170>
 8005476:	2700      	movs	r7, #0
 8005478:	468c      	mov	ip, r1
 800547a:	83a7      	strh	r7, [r4, #28]
 800547c:	e028      	b.n	80054d0 <ai_platform_network_init+0xf4>
 800547e:	e7fe      	b.n	800547e <ai_platform_network_init+0xa2>
 8005480:	4a56      	ldr	r2, [pc, #344]	; (80055dc <ai_platform_network_init+0x200>)
 8005482:	6813      	ldr	r3, [r2, #0]
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	f7ff fe65 	bl	8005158 <_ai_platform_acquire_crc>
 800548e:	4b54      	ldr	r3, [pc, #336]	; (80055e0 <ai_platform_network_init+0x204>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549a:	d067      	beq.n	800556c <ai_platform_network_init+0x190>
 800549c:	4b51      	ldr	r3, [pc, #324]	; (80055e4 <ai_platform_network_init+0x208>)
 800549e:	2201      	movs	r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	2a00      	cmp	r2, #0
 80054a6:	d1fc      	bne.n	80054a2 <ai_platform_network_init+0xc6>
 80054a8:	4b4f      	ldr	r3, [pc, #316]	; (80055e8 <ai_platform_network_init+0x20c>)
 80054aa:	4a50      	ldr	r2, [pc, #320]	; (80055ec <ai_platform_network_init+0x210>)
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	4b4f      	ldr	r3, [pc, #316]	; (80055f0 <ai_platform_network_init+0x214>)
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d067      	beq.n	8005586 <ai_platform_network_init+0x1aa>
 80054b6:	e7fe      	b.n	80054b6 <ai_platform_network_init+0xda>
 80054b8:	8be1      	ldrh	r1, [r4, #30]
 80054ba:	88eb      	ldrh	r3, [r5, #6]
 80054bc:	89af      	ldrh	r7, [r5, #12]
 80054be:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 80054c2:	88aa      	ldrh	r2, [r5, #4]
 80054c4:	f8d5 9008 	ldr.w	r9, [r5, #8]
 80054c8:	428b      	cmp	r3, r1
 80054ca:	d13f      	bne.n	800554c <ai_platform_network_init+0x170>
 80054cc:	83a2      	strh	r2, [r4, #28]
 80054ce:	b19b      	cbz	r3, 80054f8 <ai_platform_network_init+0x11c>
 80054d0:	f04f 0e00 	mov.w	lr, #0
 80054d4:	46f2      	mov	sl, lr
 80054d6:	eb09 060e 	add.w	r6, r9, lr
 80054da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80054dc:	6a25      	ldr	r5, [r4, #32]
 80054de:	4475      	add	r5, lr
 80054e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80054e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80054ea:	8be3      	ldrh	r3, [r4, #30]
 80054ec:	f10a 0a01 	add.w	sl, sl, #1
 80054f0:	459a      	cmp	sl, r3
 80054f2:	f10e 0e18 	add.w	lr, lr, #24
 80054f6:	d3ee      	bcc.n	80054d6 <ai_platform_network_init+0xfa>
 80054f8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80054fa:	4598      	cmp	r8, r3
 80054fc:	d12e      	bne.n	800555c <ai_platform_network_init+0x180>
 80054fe:	84a7      	strh	r7, [r4, #36]	; 0x24
 8005500:	f1b8 0f00 	cmp.w	r8, #0
 8005504:	d012      	beq.n	800552c <ai_platform_network_init+0x150>
 8005506:	2700      	movs	r7, #0
 8005508:	46be      	mov	lr, r7
 800550a:	eb0c 0607 	add.w	r6, ip, r7
 800550e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005510:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005512:	443d      	add	r5, r7
 8005514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005516:	e896 0003 	ldmia.w	r6, {r0, r1}
 800551a:	e885 0003 	stmia.w	r5, {r0, r1}
 800551e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005520:	f10e 0e01 	add.w	lr, lr, #1
 8005524:	459e      	cmp	lr, r3
 8005526:	f107 0718 	add.w	r7, r7, #24
 800552a:	d3ee      	bcc.n	800550a <ai_platform_network_init+0x12e>
 800552c:	2303      	movs	r3, #3
 800552e:	60e3      	str	r3, [r4, #12]
 8005530:	4620      	mov	r0, r4
 8005532:	f002 fc43 	bl	8007dbc <ai_layers_init_all>
 8005536:	e006      	b.n	8005546 <ai_platform_network_init+0x16a>
 8005538:	f104 0010 	add.w	r0, r4, #16
 800553c:	2211      	movs	r2, #17
 800553e:	2110      	movs	r1, #16
 8005540:	462c      	mov	r4, r5
 8005542:	f000 fb71 	bl	8005c28 <core_set_error>
 8005546:	4620      	mov	r0, r4
 8005548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554c:	f104 0010 	add.w	r0, r4, #16
 8005550:	2212      	movs	r2, #18
 8005552:	2116      	movs	r1, #22
 8005554:	f000 fb68 	bl	8005c28 <core_set_error>
 8005558:	2400      	movs	r4, #0
 800555a:	e7f4      	b.n	8005546 <ai_platform_network_init+0x16a>
 800555c:	f104 0010 	add.w	r0, r4, #16
 8005560:	2213      	movs	r2, #19
 8005562:	2116      	movs	r1, #22
 8005564:	f000 fb60 	bl	8005c28 <core_set_error>
 8005568:	2400      	movs	r4, #0
 800556a:	e7ec      	b.n	8005546 <ai_platform_network_init+0x16a>
 800556c:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <ai_platform_network_init+0x218>)
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	2a00      	cmp	r2, #0
 8005576:	d1fc      	bne.n	8005572 <ai_platform_network_init+0x196>
 8005578:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <ai_platform_network_init+0x21c>)
 800557a:	4a1c      	ldr	r2, [pc, #112]	; (80055ec <ai_platform_network_init+0x210>)
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <ai_platform_network_init+0x214>)
 8005582:	429a      	cmp	r2, r3
 8005584:	d115      	bne.n	80055b2 <ai_platform_network_init+0x1d6>
 8005586:	f7ff fde9 	bl	800515c <_ai_platform_release_crc>
 800558a:	2400      	movs	r4, #0
 800558c:	e7db      	b.n	8005546 <ai_platform_network_init+0x16a>
 800558e:	8c28      	ldrh	r0, [r5, #32]
 8005590:	8bea      	ldrh	r2, [r5, #30]
 8005592:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005594:	fb02 f200 	mul.w	r2, r2, r0
 8005598:	fb03 f302 	mul.w	r3, r3, r2
 800559c:	2b00      	cmp	r3, #0
 800559e:	f43f af61 	beq.w	8005464 <ai_platform_network_init+0x88>
 80055a2:	f104 0010 	add.w	r0, r4, #16
 80055a6:	2213      	movs	r2, #19
 80055a8:	2110      	movs	r1, #16
 80055aa:	4634      	mov	r4, r6
 80055ac:	f000 fb3c 	bl	8005c28 <core_set_error>
 80055b0:	e7c9      	b.n	8005546 <ai_platform_network_init+0x16a>
 80055b2:	e7fe      	b.n	80055b2 <ai_platform_network_init+0x1d6>
 80055b4:	8928      	ldrh	r0, [r5, #8]
 80055b6:	88ea      	ldrh	r2, [r5, #6]
 80055b8:	68eb      	ldr	r3, [r5, #12]
 80055ba:	fb02 f200 	mul.w	r2, r2, r0
 80055be:	fb03 f302 	mul.w	r3, r3, r2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f43f af52 	beq.w	800546c <ai_platform_network_init+0x90>
 80055c8:	f104 0010 	add.w	r0, r4, #16
 80055cc:	2212      	movs	r2, #18
 80055ce:	2110      	movs	r1, #16
 80055d0:	4664      	mov	r4, ip
 80055d2:	f000 fb29 	bl	8005c28 <core_set_error>
 80055d6:	e7b6      	b.n	8005546 <ai_platform_network_init+0x16a>
 80055d8:	a1c00100 	.word	0xa1c00100
 80055dc:	e0002000 	.word	0xe0002000
 80055e0:	e0042000 	.word	0xe0042000
 80055e4:	58024c08 	.word	0x58024c08
 80055e8:	58024c00 	.word	0x58024c00
 80055ec:	f407a5c2 	.word	0xf407a5c2
 80055f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80055f4:	40023008 	.word	0x40023008
 80055f8:	40023000 	.word	0x40023000
 80055fc:	a1facade 	.word	0xa1facade

08005600 <ai_platform_network_post_init>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	b120      	cbz	r0, 800560e <ai_platform_network_post_init+0xe>
 8005604:	4b3f      	ldr	r3, [pc, #252]	; (8005704 <ai_platform_network_post_init+0x104>)
 8005606:	6802      	ldr	r2, [r0, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	4604      	mov	r4, r0
 800560c:	d02d      	beq.n	800566a <ai_platform_network_post_init+0x6a>
 800560e:	4a3e      	ldr	r2, [pc, #248]	; (8005708 <ai_platform_network_post_init+0x108>)
 8005610:	6813      	ldr	r3, [r2, #0]
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	f7ff fd9e 	bl	8005158 <_ai_platform_acquire_crc>
 800561c:	4b3b      	ldr	r3, [pc, #236]	; (800570c <ai_platform_network_post_init+0x10c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005628:	d00d      	beq.n	8005646 <ai_platform_network_post_init+0x46>
 800562a:	4b39      	ldr	r3, [pc, #228]	; (8005710 <ai_platform_network_post_init+0x110>)
 800562c:	2201      	movs	r2, #1
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	2a00      	cmp	r2, #0
 8005634:	d1fc      	bne.n	8005630 <ai_platform_network_post_init+0x30>
 8005636:	4b37      	ldr	r3, [pc, #220]	; (8005714 <ai_platform_network_post_init+0x114>)
 8005638:	4a37      	ldr	r2, [pc, #220]	; (8005718 <ai_platform_network_post_init+0x118>)
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b37      	ldr	r3, [pc, #220]	; (800571c <ai_platform_network_post_init+0x11c>)
 8005640:	429a      	cmp	r2, r3
 8005642:	d00d      	beq.n	8005660 <ai_platform_network_post_init+0x60>
 8005644:	e7fe      	b.n	8005644 <ai_platform_network_post_init+0x44>
 8005646:	4b36      	ldr	r3, [pc, #216]	; (8005720 <ai_platform_network_post_init+0x120>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	2a00      	cmp	r2, #0
 8005650:	d1fc      	bne.n	800564c <ai_platform_network_post_init+0x4c>
 8005652:	4b34      	ldr	r3, [pc, #208]	; (8005724 <ai_platform_network_post_init+0x124>)
 8005654:	4a30      	ldr	r2, [pc, #192]	; (8005718 <ai_platform_network_post_init+0x118>)
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4b30      	ldr	r3, [pc, #192]	; (800571c <ai_platform_network_post_init+0x11c>)
 800565c:	429a      	cmp	r2, r3
 800565e:	d103      	bne.n	8005668 <ai_platform_network_post_init+0x68>
 8005660:	f7ff fd7c 	bl	800515c <_ai_platform_release_crc>
 8005664:	2000      	movs	r0, #0
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	e7fe      	b.n	8005668 <ai_platform_network_post_init+0x68>
 800566a:	4a27      	ldr	r2, [pc, #156]	; (8005708 <ai_platform_network_post_init+0x108>)
 800566c:	6813      	ldr	r3, [r2, #0]
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	f7ff fd70 	bl	8005158 <_ai_platform_acquire_crc>
 8005678:	4b24      	ldr	r3, [pc, #144]	; (800570c <ai_platform_network_post_init+0x10c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005684:	d00d      	beq.n	80056a2 <ai_platform_network_post_init+0xa2>
 8005686:	4b22      	ldr	r3, [pc, #136]	; (8005710 <ai_platform_network_post_init+0x110>)
 8005688:	2201      	movs	r2, #1
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	2a00      	cmp	r2, #0
 8005690:	d1fc      	bne.n	800568c <ai_platform_network_post_init+0x8c>
 8005692:	4b20      	ldr	r3, [pc, #128]	; (8005714 <ai_platform_network_post_init+0x114>)
 8005694:	4a20      	ldr	r2, [pc, #128]	; (8005718 <ai_platform_network_post_init+0x118>)
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b20      	ldr	r3, [pc, #128]	; (800571c <ai_platform_network_post_init+0x11c>)
 800569c:	429a      	cmp	r2, r3
 800569e:	d00e      	beq.n	80056be <ai_platform_network_post_init+0xbe>
 80056a0:	e7fe      	b.n	80056a0 <ai_platform_network_post_init+0xa0>
 80056a2:	4b1f      	ldr	r3, [pc, #124]	; (8005720 <ai_platform_network_post_init+0x120>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	d1fc      	bne.n	80056a8 <ai_platform_network_post_init+0xa8>
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <ai_platform_network_post_init+0x124>)
 80056b0:	4a19      	ldr	r2, [pc, #100]	; (8005718 <ai_platform_network_post_init+0x118>)
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4b19      	ldr	r3, [pc, #100]	; (800571c <ai_platform_network_post_init+0x11c>)
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d000      	beq.n	80056be <ai_platform_network_post_init+0xbe>
 80056bc:	e7fe      	b.n	80056bc <ai_platform_network_post_init+0xbc>
 80056be:	f7ff fd4d 	bl	800515c <_ai_platform_release_crc>
 80056c2:	68e3      	ldr	r3, [r4, #12]
 80056c4:	f013 0502 	ands.w	r5, r3, #2
 80056c8:	d011      	beq.n	80056ee <ai_platform_network_post_init+0xee>
 80056ca:	4620      	mov	r0, r4
 80056cc:	f002 fb8a 	bl	8007de4 <ai_layers_post_init_all>
 80056d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056d2:	b1a3      	cbz	r3, 80056fe <ai_platform_network_post_init+0xfe>
 80056d4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80056d6:	b195      	cbz	r5, 80056fe <ai_platform_network_post_init+0xfe>
 80056d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80056da:	4629      	mov	r1, r5
 80056dc:	2000      	movs	r0, #0
 80056de:	4798      	blx	r3
 80056e0:	692b      	ldr	r3, [r5, #16]
 80056e2:	42ab      	cmp	r3, r5
 80056e4:	d00b      	beq.n	80056fe <ai_platform_network_post_init+0xfe>
 80056e6:	461d      	mov	r5, r3
 80056e8:	b14b      	cbz	r3, 80056fe <ai_platform_network_post_init+0xfe>
 80056ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056ec:	e7f4      	b.n	80056d8 <ai_platform_network_post_init+0xd8>
 80056ee:	f104 0010 	add.w	r0, r4, #16
 80056f2:	2210      	movs	r2, #16
 80056f4:	2111      	movs	r1, #17
 80056f6:	f000 fa97 	bl	8005c28 <core_set_error>
 80056fa:	4628      	mov	r0, r5
 80056fc:	bd38      	pop	{r3, r4, r5, pc}
 80056fe:	2001      	movs	r0, #1
 8005700:	bd38      	pop	{r3, r4, r5, pc}
 8005702:	bf00      	nop
 8005704:	a1c00100 	.word	0xa1c00100
 8005708:	e0002000 	.word	0xe0002000
 800570c:	e0042000 	.word	0xe0042000
 8005710:	58024c08 	.word	0x58024c08
 8005714:	58024c00 	.word	0x58024c00
 8005718:	f407a5c2 	.word	0xf407a5c2
 800571c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005720:	40023008 	.word	0x40023008
 8005724:	40023000 	.word	0x40023000

08005728 <ai_platform_network_process>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	b085      	sub	sp, #20
 800572e:	460d      	mov	r5, r1
 8005730:	9202      	str	r2, [sp, #8]
 8005732:	4604      	mov	r4, r0
 8005734:	b120      	cbz	r0, 8005740 <ai_platform_network_process+0x18>
 8005736:	4b7b      	ldr	r3, [pc, #492]	; (8005924 <ai_platform_network_process+0x1fc>)
 8005738:	6802      	ldr	r2, [r0, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	bf18      	it	ne
 800573e:	2400      	movne	r4, #0
 8005740:	4a79      	ldr	r2, [pc, #484]	; (8005928 <ai_platform_network_process+0x200>)
 8005742:	6813      	ldr	r3, [r2, #0]
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	f7ff fd05 	bl	8005158 <_ai_platform_acquire_crc>
 800574e:	4b77      	ldr	r3, [pc, #476]	; (800592c <ai_platform_network_process+0x204>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575a:	d00d      	beq.n	8005778 <ai_platform_network_process+0x50>
 800575c:	4b74      	ldr	r3, [pc, #464]	; (8005930 <ai_platform_network_process+0x208>)
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	2a00      	cmp	r2, #0
 8005766:	d1fc      	bne.n	8005762 <ai_platform_network_process+0x3a>
 8005768:	4b72      	ldr	r3, [pc, #456]	; (8005934 <ai_platform_network_process+0x20c>)
 800576a:	4a73      	ldr	r2, [pc, #460]	; (8005938 <ai_platform_network_process+0x210>)
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4b72      	ldr	r3, [pc, #456]	; (800593c <ai_platform_network_process+0x214>)
 8005772:	429a      	cmp	r2, r3
 8005774:	d00e      	beq.n	8005794 <ai_platform_network_process+0x6c>
 8005776:	e7fe      	b.n	8005776 <ai_platform_network_process+0x4e>
 8005778:	4b71      	ldr	r3, [pc, #452]	; (8005940 <ai_platform_network_process+0x218>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	2a00      	cmp	r2, #0
 8005782:	d1fc      	bne.n	800577e <ai_platform_network_process+0x56>
 8005784:	4b6f      	ldr	r3, [pc, #444]	; (8005944 <ai_platform_network_process+0x21c>)
 8005786:	4a6c      	ldr	r2, [pc, #432]	; (8005938 <ai_platform_network_process+0x210>)
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4b6b      	ldr	r3, [pc, #428]	; (800593c <ai_platform_network_process+0x214>)
 800578e:	429a      	cmp	r2, r3
 8005790:	d000      	beq.n	8005794 <ai_platform_network_process+0x6c>
 8005792:	e7fe      	b.n	8005792 <ai_platform_network_process+0x6a>
 8005794:	f7ff fce2 	bl	800515c <_ai_platform_release_crc>
 8005798:	2c00      	cmp	r4, #0
 800579a:	f000 808e 	beq.w	80058ba <ai_platform_network_process+0x192>
 800579e:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 80057a0:	2f00      	cmp	r7, #0
 80057a2:	f040 823c 	bne.w	8005c1e <ai_platform_network_process+0x4f6>
 80057a6:	68e3      	ldr	r3, [r4, #12]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	f04f 0b00 	mov.w	fp, #0
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	f8c4 b014 	str.w	fp, [r4, #20]
 80057b6:	f040 822b 	bne.w	8005c10 <ai_platform_network_process+0x4e8>
 80057ba:	2d00      	cmp	r5, #0
 80057bc:	f000 80a8 	beq.w	8005910 <ai_platform_network_process+0x1e8>
 80057c0:	2f00      	cmp	r7, #0
 80057c2:	f000 80a5 	beq.w	8005910 <ai_platform_network_process+0x1e8>
 80057c6:	883b      	ldrh	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80a1 	beq.w	8005910 <ai_platform_network_process+0x1e8>
 80057ce:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 80057d2:	9401      	str	r4, [sp, #4]
 80057d4:	46d8      	mov	r8, fp
 80057d6:	4598      	cmp	r8, r3
 80057d8:	f080 80b6 	bcs.w	8005948 <ai_platform_network_process+0x220>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80b2 	beq.w	8005948 <ai_platform_network_process+0x220>
 80057e4:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 80057e8:	2e00      	cmp	r6, #0
 80057ea:	f000 80ad 	beq.w	8005948 <ai_platform_network_process+0x220>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	9303      	str	r3, [sp, #12]
 80057f4:	ea4f 1408 	mov.w	r4, r8, lsl #4
 80057f8:	eb13 0a04 	adds.w	sl, r3, r4
 80057fc:	f000 8087 	beq.w	800590e <ai_platform_network_process+0x1e6>
 8005800:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8005804:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8005808:	69b0      	ldr	r0, [r6, #24]
 800580a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800580e:	6841      	ldr	r1, [r0, #4]
 8005810:	fb0b f30e 	mul.w	r3, fp, lr
 8005814:	fb0c f303 	mul.w	r3, ip, r3
 8005818:	4299      	cmp	r1, r3
 800581a:	d36e      	bcc.n	80058fa <ai_platform_network_process+0x1d2>
 800581c:	68f3      	ldr	r3, [r6, #12]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	455a      	cmp	r2, fp
 8005822:	d16a      	bne.n	80058fa <ai_platform_network_process+0x1d2>
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	4572      	cmp	r2, lr
 8005828:	d167      	bne.n	80058fa <ai_platform_network_process+0x1d2>
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	459c      	cmp	ip, r3
 800582e:	d164      	bne.n	80058fa <ai_platform_network_process+0x1d2>
 8005830:	6800      	ldr	r0, [r0, #0]
 8005832:	f002 fb95 	bl	8007f60 <ai_array_get_byte_size>
 8005836:	68f2      	ldr	r2, [r6, #12]
 8005838:	6973      	ldr	r3, [r6, #20]
 800583a:	68d2      	ldr	r2, [r2, #12]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	fb03 f302 	mul.w	r3, r3, r2
 8005842:	4298      	cmp	r0, r3
 8005844:	d359      	bcc.n	80058fa <ai_platform_network_process+0x1d2>
 8005846:	69b3      	ldr	r3, [r6, #24]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	f002 fb31 	bl	8007eb0 <ai_array_to_buffer_fmt>
 800584e:	682b      	ldr	r3, [r5, #0]
 8005850:	4043      	eors	r3, r0
 8005852:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005856:	d146      	bne.n	80058e6 <ai_platform_network_process+0x1be>
 8005858:	692b      	ldr	r3, [r5, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d03a      	beq.n	80058d4 <ai_platform_network_process+0x1ac>
 800585e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8005862:	f1bb 0f00 	cmp.w	fp, #0
 8005866:	d02d      	beq.n	80058c4 <ai_platform_network_process+0x19c>
 8005868:	68f2      	ldr	r2, [r6, #12]
 800586a:	6973      	ldr	r3, [r6, #20]
 800586c:	68d1      	ldr	r1, [r2, #12]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	fb02 f201 	mul.w	r2, r2, r1
 8005874:	f8ca 2008 	str.w	r2, [sl, #8]
 8005878:	88ab      	ldrh	r3, [r5, #4]
 800587a:	fb02 f203 	mul.w	r2, r2, r3
 800587e:	f8ca 200c 	str.w	r2, [sl, #12]
 8005882:	6929      	ldr	r1, [r5, #16]
 8005884:	f8ca 1004 	str.w	r1, [sl, #4]
 8005888:	692b      	ldr	r3, [r5, #16]
 800588a:	4413      	add	r3, r2
 800588c:	9a03      	ldr	r2, [sp, #12]
 800588e:	5113      	str	r3, [r2, r4]
 8005890:	69b0      	ldr	r0, [r6, #24]
 8005892:	6803      	ldr	r3, [r0, #0]
 8005894:	45d9      	cmp	r9, fp
 8005896:	bf38      	it	cc
 8005898:	46d9      	movcc	r9, fp
 800589a:	009a      	lsls	r2, r3, #2
 800589c:	d408      	bmi.n	80058b0 <ai_platform_network_process+0x188>
 800589e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	4419      	add	r1, r3
 80058a6:	6081      	str	r1, [r0, #8]
 80058a8:	69b3      	ldr	r3, [r6, #24]
 80058aa:	f8da 2004 	ldr.w	r2, [sl, #4]
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	883b      	ldrh	r3, [r7, #0]
 80058b2:	f108 0801 	add.w	r8, r8, #1
 80058b6:	3518      	adds	r5, #24
 80058b8:	e78d      	b.n	80057d6 <ai_platform_network_process+0xae>
 80058ba:	46a3      	mov	fp, r4
 80058bc:	4658      	mov	r0, fp
 80058be:	b005      	add	sp, #20
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	9c01      	ldr	r4, [sp, #4]
 80058c6:	2221      	movs	r2, #33	; 0x21
 80058c8:	f104 0010 	add.w	r0, r4, #16
 80058cc:	2112      	movs	r1, #18
 80058ce:	f000 f9ab 	bl	8005c28 <core_set_error>
 80058d2:	e7f3      	b.n	80058bc <ai_platform_network_process+0x194>
 80058d4:	9c01      	ldr	r4, [sp, #4]
 80058d6:	2217      	movs	r2, #23
 80058d8:	f104 0010 	add.w	r0, r4, #16
 80058dc:	2112      	movs	r1, #18
 80058de:	469b      	mov	fp, r3
 80058e0:	f000 f9a2 	bl	8005c28 <core_set_error>
 80058e4:	e7ea      	b.n	80058bc <ai_platform_network_process+0x194>
 80058e6:	9c01      	ldr	r4, [sp, #4]
 80058e8:	2219      	movs	r2, #25
 80058ea:	f104 0010 	add.w	r0, r4, #16
 80058ee:	2112      	movs	r1, #18
 80058f0:	f000 f99a 	bl	8005c28 <core_set_error>
 80058f4:	f04f 0b00 	mov.w	fp, #0
 80058f8:	e7e0      	b.n	80058bc <ai_platform_network_process+0x194>
 80058fa:	9c01      	ldr	r4, [sp, #4]
 80058fc:	2218      	movs	r2, #24
 80058fe:	f104 0010 	add.w	r0, r4, #16
 8005902:	2112      	movs	r1, #18
 8005904:	f000 f990 	bl	8005c28 <core_set_error>
 8005908:	f04f 0b00 	mov.w	fp, #0
 800590c:	e7d6      	b.n	80058bc <ai_platform_network_process+0x194>
 800590e:	9c01      	ldr	r4, [sp, #4]
 8005910:	f104 0010 	add.w	r0, r4, #16
 8005914:	2217      	movs	r2, #23
 8005916:	2112      	movs	r1, #18
 8005918:	f000 f986 	bl	8005c28 <core_set_error>
 800591c:	f04f 0b00 	mov.w	fp, #0
 8005920:	e7cc      	b.n	80058bc <ai_platform_network_process+0x194>
 8005922:	bf00      	nop
 8005924:	a1c00100 	.word	0xa1c00100
 8005928:	e0002000 	.word	0xe0002000
 800592c:	e0042000 	.word	0xe0042000
 8005930:	58024c08 	.word	0x58024c08
 8005934:	58024c00 	.word	0x58024c00
 8005938:	f407a5c2 	.word	0xf407a5c2
 800593c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005940:	40023008 	.word	0x40023008
 8005944:	40023000 	.word	0x40023000
 8005948:	9c01      	ldr	r4, [sp, #4]
 800594a:	9a02      	ldr	r2, [sp, #8]
 800594c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800594e:	2a00      	cmp	r2, #0
 8005950:	f000 80a9 	beq.w	8005aa6 <ai_platform_network_process+0x37e>
 8005954:	2b01      	cmp	r3, #1
 8005956:	f240 809b 	bls.w	8005a90 <ai_platform_network_process+0x368>
 800595a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800595e:	f11a 0f0c 	cmn.w	sl, #12
 8005962:	f000 8095 	beq.w	8005a90 <ai_platform_network_process+0x368>
 8005966:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8090 	beq.w	8005a90 <ai_platform_network_process+0x368>
 8005970:	9d02      	ldr	r5, [sp, #8]
 8005972:	9401      	str	r4, [sp, #4]
 8005974:	f04f 0800 	mov.w	r8, #0
 8005978:	4598      	cmp	r8, r3
 800597a:	f080 8092 	bcs.w	8005aa2 <ai_platform_network_process+0x37a>
 800597e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 808d 	beq.w	8005aa2 <ai_platform_network_process+0x37a>
 8005988:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800598c:	2e00      	cmp	r6, #0
 800598e:	f000 8088 	beq.w	8005aa2 <ai_platform_network_process+0x37a>
 8005992:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	9302      	str	r3, [sp, #8]
 800599a:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800599e:	191f      	adds	r7, r3, r4
 80059a0:	f000 812d 	beq.w	8005bfe <ai_platform_network_process+0x4d6>
 80059a4:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 80059a8:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 80059ac:	69b0      	ldr	r0, [r6, #24]
 80059ae:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80059b2:	6841      	ldr	r1, [r0, #4]
 80059b4:	fb0b f30e 	mul.w	r3, fp, lr
 80059b8:	fb0c f303 	mul.w	r3, ip, r3
 80059bc:	4299      	cmp	r1, r3
 80059be:	d366      	bcc.n	8005a8e <ai_platform_network_process+0x366>
 80059c0:	68f3      	ldr	r3, [r6, #12]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	455a      	cmp	r2, fp
 80059c6:	d162      	bne.n	8005a8e <ai_platform_network_process+0x366>
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	4572      	cmp	r2, lr
 80059cc:	d15f      	bne.n	8005a8e <ai_platform_network_process+0x366>
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	459c      	cmp	ip, r3
 80059d2:	d15c      	bne.n	8005a8e <ai_platform_network_process+0x366>
 80059d4:	6800      	ldr	r0, [r0, #0]
 80059d6:	f002 fac3 	bl	8007f60 <ai_array_get_byte_size>
 80059da:	68f2      	ldr	r2, [r6, #12]
 80059dc:	6973      	ldr	r3, [r6, #20]
 80059de:	68d2      	ldr	r2, [r2, #12]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	fb03 f302 	mul.w	r3, r3, r2
 80059e6:	4298      	cmp	r0, r3
 80059e8:	d351      	bcc.n	8005a8e <ai_platform_network_process+0x366>
 80059ea:	69b3      	ldr	r3, [r6, #24]
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	f002 fa5f 	bl	8007eb0 <ai_array_to_buffer_fmt>
 80059f2:	682b      	ldr	r3, [r5, #0]
 80059f4:	4043      	eors	r3, r0
 80059f6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80059fa:	d13e      	bne.n	8005a7a <ai_platform_network_process+0x352>
 80059fc:	692b      	ldr	r3, [r5, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d032      	beq.n	8005a68 <ai_platform_network_process+0x340>
 8005a02:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8005a06:	f1bb 0f00 	cmp.w	fp, #0
 8005a0a:	d025      	beq.n	8005a58 <ai_platform_network_process+0x330>
 8005a0c:	68f2      	ldr	r2, [r6, #12]
 8005a0e:	6973      	ldr	r3, [r6, #20]
 8005a10:	68d1      	ldr	r1, [r2, #12]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	fb02 f201 	mul.w	r2, r2, r1
 8005a18:	60ba      	str	r2, [r7, #8]
 8005a1a:	88ab      	ldrh	r3, [r5, #4]
 8005a1c:	fb02 f203 	mul.w	r2, r2, r3
 8005a20:	60fa      	str	r2, [r7, #12]
 8005a22:	6929      	ldr	r1, [r5, #16]
 8005a24:	6079      	str	r1, [r7, #4]
 8005a26:	692b      	ldr	r3, [r5, #16]
 8005a28:	4413      	add	r3, r2
 8005a2a:	9a02      	ldr	r2, [sp, #8]
 8005a2c:	5113      	str	r3, [r2, r4]
 8005a2e:	69b0      	ldr	r0, [r6, #24]
 8005a30:	6803      	ldr	r3, [r0, #0]
 8005a32:	45d9      	cmp	r9, fp
 8005a34:	bf38      	it	cc
 8005a36:	46d9      	movcc	r9, fp
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	d407      	bmi.n	8005a4c <ai_platform_network_process+0x324>
 8005a3c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	4419      	add	r1, r3
 8005a44:	6081      	str	r1, [r0, #8]
 8005a46:	69b3      	ldr	r3, [r6, #24]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	60da      	str	r2, [r3, #12]
 8005a4c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005a50:	f108 0801 	add.w	r8, r8, #1
 8005a54:	3518      	adds	r5, #24
 8005a56:	e78f      	b.n	8005978 <ai_platform_network_process+0x250>
 8005a58:	9c01      	ldr	r4, [sp, #4]
 8005a5a:	2221      	movs	r2, #33	; 0x21
 8005a5c:	f104 0010 	add.w	r0, r4, #16
 8005a60:	2113      	movs	r1, #19
 8005a62:	f000 f8e1 	bl	8005c28 <core_set_error>
 8005a66:	e729      	b.n	80058bc <ai_platform_network_process+0x194>
 8005a68:	9c01      	ldr	r4, [sp, #4]
 8005a6a:	2217      	movs	r2, #23
 8005a6c:	f104 0010 	add.w	r0, r4, #16
 8005a70:	2113      	movs	r1, #19
 8005a72:	469b      	mov	fp, r3
 8005a74:	f000 f8d8 	bl	8005c28 <core_set_error>
 8005a78:	e720      	b.n	80058bc <ai_platform_network_process+0x194>
 8005a7a:	9c01      	ldr	r4, [sp, #4]
 8005a7c:	2219      	movs	r2, #25
 8005a7e:	f104 0010 	add.w	r0, r4, #16
 8005a82:	2113      	movs	r1, #19
 8005a84:	f000 f8d0 	bl	8005c28 <core_set_error>
 8005a88:	f04f 0b00 	mov.w	fp, #0
 8005a8c:	e716      	b.n	80058bc <ai_platform_network_process+0x194>
 8005a8e:	9c01      	ldr	r4, [sp, #4]
 8005a90:	f104 0010 	add.w	r0, r4, #16
 8005a94:	2218      	movs	r2, #24
 8005a96:	2113      	movs	r1, #19
 8005a98:	f000 f8c6 	bl	8005c28 <core_set_error>
 8005a9c:	f04f 0b00 	mov.w	fp, #0
 8005aa0:	e70c      	b.n	80058bc <ai_platform_network_process+0x194>
 8005aa2:	9c01      	ldr	r4, [sp, #4]
 8005aa4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8005aa6:	f8a4 9014 	strh.w	r9, [r4, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 80a4 	beq.w	8005bf8 <ai_platform_network_process+0x4d0>
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005ab4:	f240 809e 	bls.w	8005bf4 <ai_platform_network_process+0x4cc>
 8005ab8:	f105 070c 	add.w	r7, r5, #12
 8005abc:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8005ac0:	8aa3      	ldrh	r3, [r4, #20]
 8005ac2:	455b      	cmp	r3, fp
 8005ac4:	f67f aefa 	bls.w	80058bc <ai_platform_network_process+0x194>
 8005ac8:	9401      	str	r4, [sp, #4]
 8005aca:	2d00      	cmp	r5, #0
 8005acc:	d036      	beq.n	8005b3c <ai_platform_network_process+0x414>
 8005ace:	882b      	ldrh	r3, [r5, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d033      	beq.n	8005b3c <ai_platform_network_process+0x414>
 8005ad4:	686b      	ldr	r3, [r5, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d030      	beq.n	8005b3c <ai_platform_network_process+0x414>
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f04f 0800 	mov.w	r8, #0
 8005ae0:	b9db      	cbnz	r3, 8005b1a <ai_platform_network_process+0x3f2>
 8005ae2:	e02b      	b.n	8005b3c <ai_platform_network_process+0x414>
 8005ae4:	68d4      	ldr	r4, [r2, #12]
 8005ae6:	1b00      	subs	r0, r0, r4
 8005ae8:	4401      	add	r1, r0
 8005aea:	6091      	str	r1, [r2, #8]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	6872      	ldr	r2, [r6, #4]
 8005af0:	60da      	str	r2, [r3, #12]
 8005af2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005af6:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005afa:	440b      	add	r3, r1
 8005afc:	4293      	cmp	r3, r2
 8005afe:	bf24      	itt	cs
 8005b00:	68f3      	ldrcs	r3, [r6, #12]
 8005b02:	1ad3      	subcs	r3, r2, r3
 8005b04:	6073      	str	r3, [r6, #4]
 8005b06:	882b      	ldrh	r3, [r5, #0]
 8005b08:	f108 0801 	add.w	r8, r8, #1
 8005b0c:	4598      	cmp	r8, r3
 8005b0e:	d215      	bcs.n	8005b3c <ai_platform_network_process+0x414>
 8005b10:	686b      	ldr	r3, [r5, #4]
 8005b12:	b19b      	cbz	r3, 8005b3c <ai_platform_network_process+0x414>
 8005b14:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005b18:	b183      	cbz	r3, 8005b3c <ai_platform_network_process+0x414>
 8005b1a:	68a9      	ldr	r1, [r5, #8]
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	f8d1 a000 	ldr.w	sl, [r1]
 8005b22:	6814      	ldr	r4, [r2, #0]
 8005b24:	6890      	ldr	r0, [r2, #8]
 8005b26:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005b2a:	eb0a 0609 	add.w	r6, sl, r9
 8005b2e:	00a4      	lsls	r4, r4, #2
 8005b30:	6871      	ldr	r1, [r6, #4]
 8005b32:	d5d7      	bpl.n	8005ae4 <ai_platform_network_process+0x3bc>
 8005b34:	68b2      	ldr	r2, [r6, #8]
 8005b36:	f002 fa67 	bl	8008008 <memcpy>
 8005b3a:	e7da      	b.n	8005af2 <ai_platform_network_process+0x3ca>
 8005b3c:	9801      	ldr	r0, [sp, #4]
 8005b3e:	f002 f969 	bl	8007e14 <ai_layers_forward_all>
 8005b42:	2f00      	cmp	r7, #0
 8005b44:	d047      	beq.n	8005bd6 <ai_platform_network_process+0x4ae>
 8005b46:	883b      	ldrh	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d044      	beq.n	8005bd6 <ai_platform_network_process+0x4ae>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d041      	beq.n	8005bd6 <ai_platform_network_process+0x4ae>
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d03e      	beq.n	8005bd6 <ai_platform_network_process+0x4ae>
 8005b58:	f04f 0800 	mov.w	r8, #0
 8005b5c:	e019      	b.n	8005b92 <ai_platform_network_process+0x46a>
 8005b5e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005b62:	4293      	cmp	r3, r2
 8005b64:	bf24      	itt	cs
 8005b66:	68f3      	ldrcs	r3, [r6, #12]
 8005b68:	1ad3      	subcs	r3, r2, r3
 8005b6a:	6073      	str	r3, [r6, #4]
 8005b6c:	6981      	ldr	r1, [r0, #24]
 8005b6e:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8005b72:	1b12      	subs	r2, r2, r4
 8005b74:	4413      	add	r3, r2
 8005b76:	608b      	str	r3, [r1, #8]
 8005b78:	6983      	ldr	r3, [r0, #24]
 8005b7a:	6872      	ldr	r2, [r6, #4]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	883b      	ldrh	r3, [r7, #0]
 8005b80:	f108 0801 	add.w	r8, r8, #1
 8005b84:	4598      	cmp	r8, r3
 8005b86:	d226      	bcs.n	8005bd6 <ai_platform_network_process+0x4ae>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	b323      	cbz	r3, 8005bd6 <ai_platform_network_process+0x4ae>
 8005b8c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005b90:	b308      	cbz	r0, 8005bd6 <ai_platform_network_process+0x4ae>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6981      	ldr	r1, [r0, #24]
 8005b96:	f8d3 a000 	ldr.w	sl, [r3]
 8005b9a:	680c      	ldr	r4, [r1, #0]
 8005b9c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005ba0:	eb0a 0609 	add.w	r6, sl, r9
 8005ba4:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8005ba8:	00a4      	lsls	r4, r4, #2
 8005baa:	eb0c 0302 	add.w	r3, ip, r2
 8005bae:	d5d6      	bpl.n	8005b5e <ai_platform_network_process+0x436>
 8005bb0:	6889      	ldr	r1, [r1, #8]
 8005bb2:	4660      	mov	r0, ip
 8005bb4:	f002 fa28 	bl	8008008 <memcpy>
 8005bb8:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005bbc:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005bc0:	440b      	add	r3, r1
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	bf24      	itt	cs
 8005bc6:	68f3      	ldrcs	r3, [r6, #12]
 8005bc8:	1ad3      	subcs	r3, r2, r3
 8005bca:	6073      	str	r3, [r6, #4]
 8005bcc:	883b      	ldrh	r3, [r7, #0]
 8005bce:	f108 0801 	add.w	r8, r8, #1
 8005bd2:	4598      	cmp	r8, r3
 8005bd4:	d3d8      	bcc.n	8005b88 <ai_platform_network_process+0x460>
 8005bd6:	9b01      	ldr	r3, [sp, #4]
 8005bd8:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f10b 0b01 	add.w	fp, fp, #1
 8005be2:	8a9b      	ldrh	r3, [r3, #20]
 8005be4:	fa1f fb8b 	uxth.w	fp, fp
 8005be8:	455b      	cmp	r3, fp
 8005bea:	f8a2 b016 	strh.w	fp, [r2, #22]
 8005bee:	f63f af6c 	bhi.w	8005aca <ai_platform_network_process+0x3a2>
 8005bf2:	e663      	b.n	80058bc <ai_platform_network_process+0x194>
 8005bf4:	2700      	movs	r7, #0
 8005bf6:	e761      	b.n	8005abc <ai_platform_network_process+0x394>
 8005bf8:	461d      	mov	r5, r3
 8005bfa:	461f      	mov	r7, r3
 8005bfc:	e75e      	b.n	8005abc <ai_platform_network_process+0x394>
 8005bfe:	9c01      	ldr	r4, [sp, #4]
 8005c00:	2217      	movs	r2, #23
 8005c02:	f104 0010 	add.w	r0, r4, #16
 8005c06:	2113      	movs	r1, #19
 8005c08:	f000 f80e 	bl	8005c28 <core_set_error>
 8005c0c:	46bb      	mov	fp, r7
 8005c0e:	e655      	b.n	80058bc <ai_platform_network_process+0x194>
 8005c10:	f104 0010 	add.w	r0, r4, #16
 8005c14:	2230      	movs	r2, #48	; 0x30
 8005c16:	2111      	movs	r1, #17
 8005c18:	f000 f806 	bl	8005c28 <core_set_error>
 8005c1c:	e64e      	b.n	80058bc <ai_platform_network_process+0x194>
 8005c1e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8005c20:	e5c1      	b.n	80057a6 <ai_platform_network_process+0x7e>
 8005c22:	bf00      	nop

08005c24 <core_init>:
 8005c24:	2001      	movs	r0, #1
 8005c26:	4770      	bx	lr

08005c28 <core_set_error>:
 8005c28:	7803      	ldrb	r3, [r0, #0]
 8005c2a:	b933      	cbnz	r3, 8005c3a <core_set_error+0x12>
 8005c2c:	7001      	strb	r1, [r0, #0]
 8005c2e:	6803      	ldr	r3, [r0, #0]
 8005c30:	f362 231f 	bfi	r3, r2, #8, #24
 8005c34:	6003      	str	r3, [r0, #0]
 8005c36:	2001      	movs	r0, #1
 8005c38:	4770      	bx	lr
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop

08005c40 <func_dummy>:
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop

08005c44 <ai_dict8_dot_array_f32>:
 8005c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c48:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005c4c:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8005c50:	f000 80c0 	beq.w	8005dd4 <ai_dict8_dot_array_f32+0x190>
 8005c54:	f101 0408 	add.w	r4, r1, #8
 8005c58:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005c5c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005ddc <ai_dict8_dot_array_f32+0x198>
 8005c60:	eb04 0e09 	add.w	lr, r4, r9
 8005c64:	f103 0520 	add.w	r5, r3, #32
 8005c68:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8005c6c:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8005c70:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8005c74:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8005c78:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8005c7c:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8005c80:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8005c84:	ed55 3a04 	vldr	s7, [r5, #-16]
 8005c88:	ed55 4a03 	vldr	s9, [r5, #-12]
 8005c8c:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005c90:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005c94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005c98:	edd6 7a00 	vldr	s15, [r6]
 8005c9c:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8005ca0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005ca4:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005ca8:	ed9a 3a00 	vldr	s6, [sl]
 8005cac:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8005cb0:	eee3 7a05 	vfma.f32	s15, s6, s10
 8005cb4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005cb8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005cbc:	ed97 3a00 	vldr	s6, [r7]
 8005cc0:	ed96 5a00 	vldr	s10, [r6]
 8005cc4:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8005cc8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8005ccc:	eee3 7a04 	vfma.f32	s15, s6, s8
 8005cd0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005cd4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005cd8:	ed9a 3a00 	vldr	s6, [sl]
 8005cdc:	ed96 4a00 	vldr	s8, [r6]
 8005ce0:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8005ce4:	eee5 7a06 	vfma.f32	s15, s10, s12
 8005ce8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005cec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005cf0:	ed97 5a00 	vldr	s10, [r7]
 8005cf4:	ed96 6a00 	vldr	s12, [r6]
 8005cf8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005cfc:	3408      	adds	r4, #8
 8005cfe:	45a6      	cmp	lr, r4
 8005d00:	f105 0520 	add.w	r5, r5, #32
 8005d04:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005d08:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d0c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d14:	d1a8      	bne.n	8005c68 <ai_dict8_dot_array_f32+0x24>
 8005d16:	4449      	add	r1, r9
 8005d18:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005d1c:	f01c 0c07 	ands.w	ip, ip, #7
 8005d20:	d050      	beq.n	8005dc4 <ai_dict8_dot_array_f32+0x180>
 8005d22:	780c      	ldrb	r4, [r1, #0]
 8005d24:	edd3 6a00 	vldr	s13, [r3]
 8005d28:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005d2c:	edd4 7a00 	vldr	s15, [r4]
 8005d30:	f1bc 0f01 	cmp.w	ip, #1
 8005d34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d38:	d044      	beq.n	8005dc4 <ai_dict8_dot_array_f32+0x180>
 8005d3a:	784c      	ldrb	r4, [r1, #1]
 8005d3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005d40:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005d44:	edd4 7a00 	vldr	s15, [r4]
 8005d48:	f1bc 0f02 	cmp.w	ip, #2
 8005d4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d50:	d038      	beq.n	8005dc4 <ai_dict8_dot_array_f32+0x180>
 8005d52:	788c      	ldrb	r4, [r1, #2]
 8005d54:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d58:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005d5c:	edd4 7a00 	vldr	s15, [r4]
 8005d60:	f1bc 0f03 	cmp.w	ip, #3
 8005d64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d68:	d02c      	beq.n	8005dc4 <ai_dict8_dot_array_f32+0x180>
 8005d6a:	78cc      	ldrb	r4, [r1, #3]
 8005d6c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005d70:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005d74:	edd4 7a00 	vldr	s15, [r4]
 8005d78:	f1bc 0f04 	cmp.w	ip, #4
 8005d7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d80:	d020      	beq.n	8005dc4 <ai_dict8_dot_array_f32+0x180>
 8005d82:	790c      	ldrb	r4, [r1, #4]
 8005d84:	edd3 6a04 	vldr	s13, [r3, #16]
 8005d88:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005d8c:	edd4 7a00 	vldr	s15, [r4]
 8005d90:	f1bc 0f05 	cmp.w	ip, #5
 8005d94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d98:	d014      	beq.n	8005dc4 <ai_dict8_dot_array_f32+0x180>
 8005d9a:	794c      	ldrb	r4, [r1, #5]
 8005d9c:	edd3 6a05 	vldr	s13, [r3, #20]
 8005da0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005da4:	edd4 7a00 	vldr	s15, [r4]
 8005da8:	f1bc 0f06 	cmp.w	ip, #6
 8005dac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005db0:	d008      	beq.n	8005dc4 <ai_dict8_dot_array_f32+0x180>
 8005db2:	7989      	ldrb	r1, [r1, #6]
 8005db4:	edd3 7a06 	vldr	s15, [r3, #24]
 8005db8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005dbc:	edd2 6a00 	vldr	s13, [r2]
 8005dc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005dc4:	edd0 7a00 	vldr	s15, [r0]
 8005dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dcc:	ed80 7a00 	vstr	s14, [r0]
 8005dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd4:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005ddc <ai_dict8_dot_array_f32+0x198>
 8005dd8:	e7a0      	b.n	8005d1c <ai_dict8_dot_array_f32+0xd8>
 8005dda:	bf00      	nop
 8005ddc:	00000000 	.word	0x00000000

08005de0 <ai_dict4_dot_array_f32>:
 8005de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005de6:	f027 0c01 	bic.w	ip, r7, #1
 8005dea:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8005dee:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8005df2:	f000 80ae 	beq.w	8005f52 <ai_dict4_dot_array_f32+0x172>
 8005df6:	1d0d      	adds	r5, r1, #4
 8005df8:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8005dfc:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005f58 <ai_dict4_dot_array_f32+0x178>
 8005e00:	eb05 0e09 	add.w	lr, r5, r9
 8005e04:	f103 0420 	add.w	r4, r3, #32
 8005e08:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8005e0c:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8005e10:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8005e14:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8005e18:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8005e1c:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8005e20:	ed14 5a04 	vldr	s10, [r4, #-16]
 8005e24:	ed54 5a03 	vldr	s11, [r4, #-12]
 8005e28:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005e2c:	ed54 6a01 	vldr	s13, [r4, #-4]
 8005e30:	f006 0a0f 	and.w	sl, r6, #15
 8005e34:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005e38:	edda 7a00 	vldr	s15, [sl]
 8005e3c:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8005e40:	0936      	lsrs	r6, r6, #4
 8005e42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005e46:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005e4a:	ed96 3a00 	vldr	s6, [r6]
 8005e4e:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8005e52:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005e56:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005e5a:	f00b 0b0f 	and.w	fp, fp, #15
 8005e5e:	edd6 3a00 	vldr	s7, [r6]
 8005e62:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8005e66:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005e6a:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005e6e:	3504      	adds	r5, #4
 8005e70:	ed9b 4a00 	vldr	s8, [fp]
 8005e74:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8005e78:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005e7c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005e80:	f00a 0a0f 	and.w	sl, sl, #15
 8005e84:	eddb 4a00 	vldr	s9, [fp]
 8005e88:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005e8c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005e90:	45ae      	cmp	lr, r5
 8005e92:	ed9a 5a00 	vldr	s10, [sl]
 8005e96:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8005e9a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005e9e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005ea2:	f006 060f 	and.w	r6, r6, #15
 8005ea6:	edda 5a00 	vldr	s11, [sl]
 8005eaa:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005eae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005eb2:	f104 0420 	add.w	r4, r4, #32
 8005eb6:	ed96 6a00 	vldr	s12, [r6]
 8005eba:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ec2:	d1a1      	bne.n	8005e08 <ai_dict4_dot_array_f32+0x28>
 8005ec4:	4449      	add	r1, r9
 8005ec6:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005eca:	459c      	cmp	ip, r3
 8005ecc:	d92d      	bls.n	8005f2a <ai_dict4_dot_array_f32+0x14a>
 8005ece:	f10c 0c07 	add.w	ip, ip, #7
 8005ed2:	f103 0508 	add.w	r5, r3, #8
 8005ed6:	ebac 0c05 	sub.w	ip, ip, r5
 8005eda:	f02c 0407 	bic.w	r4, ip, #7
 8005ede:	f103 0810 	add.w	r8, r3, #16
 8005ee2:	44a0      	add	r8, r4
 8005ee4:	f101 3eff 	add.w	lr, r1, #4294967295
 8005ee8:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8005eec:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005ef0:	ed55 6a02 	vldr	s13, [r5, #-8]
 8005ef4:	f004 060f 	and.w	r6, r4, #15
 8005ef8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005efc:	0924      	lsrs	r4, r4, #4
 8005efe:	edd6 7a00 	vldr	s15, [r6]
 8005f02:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005f06:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005f0a:	ed94 6a00 	vldr	s12, [r4]
 8005f0e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f12:	3508      	adds	r5, #8
 8005f14:	45a8      	cmp	r8, r5
 8005f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f1a:	d1e5      	bne.n	8005ee8 <ai_dict4_dot_array_f32+0x108>
 8005f1c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005f20:	f10c 0c01 	add.w	ip, ip, #1
 8005f24:	4461      	add	r1, ip
 8005f26:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8005f2a:	07fc      	lsls	r4, r7, #31
 8005f2c:	d509      	bpl.n	8005f42 <ai_dict4_dot_array_f32+0x162>
 8005f2e:	7809      	ldrb	r1, [r1, #0]
 8005f30:	edd3 7a00 	vldr	s15, [r3]
 8005f34:	090b      	lsrs	r3, r1, #4
 8005f36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005f3a:	edd2 6a00 	vldr	s13, [r2]
 8005f3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005f42:	edd0 7a00 	vldr	s15, [r0]
 8005f46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f4a:	ed80 7a00 	vstr	s14, [r0]
 8005f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f52:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005f58 <ai_dict4_dot_array_f32+0x178>
 8005f56:	e7b8      	b.n	8005eca <ai_dict4_dot_array_f32+0xea>
 8005f58:	00000000 	.word	0x00000000

08005f5c <ai_dict_decompress_f32>:
 8005f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f60:	9f08      	ldr	r7, [sp, #32]
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005f68:	d00e      	beq.n	8005f88 <ai_dict_decompress_f32+0x2c>
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d10a      	bne.n	8005f84 <ai_dict_decompress_f32+0x28>
 8005f6e:	42b8      	cmp	r0, r7
 8005f70:	d208      	bcs.n	8005f84 <ai_dict_decompress_f32+0x28>
 8005f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f840 3b04 	str.w	r3, [r0], #4
 8005f80:	4287      	cmp	r7, r0
 8005f82:	d8f6      	bhi.n	8005f72 <ai_dict_decompress_f32+0x16>
 8005f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f88:	9b07      	ldr	r3, [sp, #28]
 8005f8a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8005f8e:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8005f92:	f10c 38ff 	add.w	r8, ip, #4294967295
 8005f96:	f003 0e01 	and.w	lr, r3, #1
 8005f9a:	42b8      	cmp	r0, r7
 8005f9c:	d2f2      	bcs.n	8005f84 <ai_dict_decompress_f32+0x28>
 8005f9e:	f1bc 0f00 	cmp.w	ip, #0
 8005fa2:	d01a      	beq.n	8005fda <ai_dict_decompress_f32+0x7e>
 8005fa4:	f100 0508 	add.w	r5, r0, #8
 8005fa8:	1e4c      	subs	r4, r1, #1
 8005faa:	eb01 0608 	add.w	r6, r1, r8
 8005fae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005fb2:	091b      	lsrs	r3, r3, #4
 8005fb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005fb8:	42a6      	cmp	r6, r4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f845 3c08 	str.w	r3, [r5, #-8]
 8005fc0:	7823      	ldrb	r3, [r4, #0]
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005fca:	f105 0508 	add.w	r5, r5, #8
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f845 3c0c 	str.w	r3, [r5, #-12]
 8005fd4:	d1eb      	bne.n	8005fae <ai_dict_decompress_f32+0x52>
 8005fd6:	4461      	add	r1, ip
 8005fd8:	4448      	add	r0, r9
 8005fda:	f1be 0f00 	cmp.w	lr, #0
 8005fde:	d103      	bne.n	8005fe8 <ai_dict_decompress_f32+0x8c>
 8005fe0:	4287      	cmp	r7, r0
 8005fe2:	d8dc      	bhi.n	8005f9e <ai_dict_decompress_f32+0x42>
 8005fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fe8:	780b      	ldrb	r3, [r1, #0]
 8005fea:	091b      	lsrs	r3, r3, #4
 8005fec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ff0:	3101      	adds	r1, #1
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6003      	str	r3, [r0, #0]
 8005ff6:	3004      	adds	r0, #4
 8005ff8:	e7cf      	b.n	8005f9a <ai_dict_decompress_f32+0x3e>
 8005ffa:	bf00      	nop

08005ffc <forward_conv2d_nl_pool>:
 8005ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006000:	ed2d 8b10 	vpush	{d8-d15}
 8006004:	b0e1      	sub	sp, #388	; 0x184
 8006006:	6983      	ldr	r3, [r0, #24]
 8006008:	881e      	ldrh	r6, [r3, #0]
 800600a:	af0a      	add	r7, sp, #40	; 0x28
 800600c:	2e00      	cmp	r6, #0
 800600e:	f000 859b 	beq.w	8006b48 <forward_conv2d_nl_pool+0xb4c>
 8006012:	6859      	ldr	r1, [r3, #4]
 8006014:	684a      	ldr	r2, [r1, #4]
 8006016:	2a00      	cmp	r2, #0
 8006018:	f000 8593 	beq.w	8006b42 <forward_conv2d_nl_pool+0xb46>
 800601c:	f8d2 c000 	ldr.w	ip, [r2]
 8006020:	2e01      	cmp	r6, #1
 8006022:	f240 858b 	bls.w	8006b3c <forward_conv2d_nl_pool+0xb40>
 8006026:	690a      	ldr	r2, [r1, #16]
 8006028:	2a00      	cmp	r2, #0
 800602a:	f000 8582 	beq.w	8006b32 <forward_conv2d_nl_pool+0xb36>
 800602e:	f8d2 9000 	ldr.w	r9, [r2]
 8006032:	2e02      	cmp	r6, #2
 8006034:	f000 8582 	beq.w	8006b3c <forward_conv2d_nl_pool+0xb40>
 8006038:	69cd      	ldr	r5, [r1, #28]
 800603a:	2d00      	cmp	r5, #0
 800603c:	f000 8571 	beq.w	8006b22 <forward_conv2d_nl_pool+0xb26>
 8006040:	682a      	ldr	r2, [r5, #0]
 8006042:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8006046:	f111 0218 	adds.w	r2, r1, #24
 800604a:	d004      	beq.n	8006056 <forward_conv2d_nl_pool+0x5a>
 800604c:	8b0a      	ldrh	r2, [r1, #24]
 800604e:	2a01      	cmp	r2, #1
 8006050:	f240 857c 	bls.w	8006b4c <forward_conv2d_nl_pool+0xb50>
 8006054:	686a      	ldr	r2, [r5, #4]
 8006056:	68a9      	ldr	r1, [r5, #8]
 8006058:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800605a:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800605e:	f8dc b018 	ldr.w	fp, [ip, #24]
 8006062:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 8006066:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800606a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800606e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8006072:	f8db 4008 	ldr.w	r4, [fp, #8]
 8006076:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800607a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800607e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8006082:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 8006086:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800608a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800608e:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006092:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8006096:	f8de 4004 	ldr.w	r4, [lr, #4]
 800609a:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800609e:	f8de 400c 	ldr.w	r4, [lr, #12]
 80060a2:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80060a6:	f8de 4008 	ldr.w	r4, [lr, #8]
 80060aa:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 80060ae:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80060b2:	6824      	ldr	r4, [r4, #0]
 80060b4:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 80060b8:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80060bc:	6864      	ldr	r4, [r4, #4]
 80060be:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80060c2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80060c6:	68a5      	ldr	r5, [r4, #8]
 80060c8:	f8da 4004 	ldr.w	r4, [sl, #4]
 80060cc:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 80060d0:	f8da 4008 	ldr.w	r4, [sl, #8]
 80060d4:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80060d8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80060da:	6824      	ldr	r4, [r4, #0]
 80060dc:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 80060e0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80060e2:	6864      	ldr	r4, [r4, #4]
 80060e4:	643c      	str	r4, [r7, #64]	; 0x40
 80060e6:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80060ea:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 80060ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80060f0:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80060f4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80060f6:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 80060fa:	69c4      	ldr	r4, [r0, #28]
 80060fc:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 8006100:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006102:	64bc      	str	r4, [r7, #72]	; 0x48
 8006104:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006106:	647c      	str	r4, [r7, #68]	; 0x44
 8006108:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800610a:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800610e:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 8006112:	2a00      	cmp	r2, #0
 8006114:	f000 84f8 	beq.w	8006b08 <forward_conv2d_nl_pool+0xb0c>
 8006118:	6992      	ldr	r2, [r2, #24]
 800611a:	6892      	ldr	r2, [r2, #8]
 800611c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8006120:	4680      	mov	r8, r0
 8006122:	6a00      	ldr	r0, [r0, #32]
 8006124:	2900      	cmp	r1, #0
 8006126:	f000 84e4 	beq.w	8006af2 <forward_conv2d_nl_pool+0xaf6>
 800612a:	698a      	ldr	r2, [r1, #24]
 800612c:	2a00      	cmp	r2, #0
 800612e:	f000 8533 	beq.w	8006b98 <forward_conv2d_nl_pool+0xb9c>
 8006132:	694b      	ldr	r3, [r1, #20]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800613a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800613e:	6893      	ldr	r3, [r2, #8]
 8006140:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006144:	f001 ff0c 	bl	8007f60 <ai_array_get_byte_size>
 8006148:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800614c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8006150:	881e      	ldrh	r6, [r3, #0]
 8006152:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8006156:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800615a:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 800615e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006160:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8006164:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8006168:	fa11 f585 	uxtah	r5, r1, r5
 800616c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8006170:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006174:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8006178:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800617c:	3901      	subs	r1, #1
 800617e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8006182:	eb05 0e00 	add.w	lr, r5, r0
 8006186:	fa1f f28a 	uxth.w	r2, sl
 800618a:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800618e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8006192:	f8dc 4000 	ldr.w	r4, [ip]
 8006196:	f8dc 1000 	ldr.w	r1, [ip]
 800619a:	3a01      	subs	r2, #1
 800619c:	fb00 5002 	mla	r0, r0, r2, r5
 80061a0:	fa1f f28b 	uxth.w	r2, fp
 80061a4:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 80061a8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80061ac:	f3c1 5141 	ubfx	r1, r1, #21, #2
 80061b0:	1e50      	subs	r0, r2, #1
 80061b2:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80061b6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80061ba:	fa44 f101 	asr.w	r1, r4, r1
 80061be:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80061c2:	f8dc 4000 	ldr.w	r4, [ip]
 80061c6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80061ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80061ce:	f3c4 4543 	ubfx	r5, r4, #17, #4
 80061d2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80061d6:	ebae 0202 	sub.w	r2, lr, r2
 80061da:	fa1f fe81 	uxth.w	lr, r1
 80061de:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80061e2:	fbb2 f2f1 	udiv	r2, r2, r1
 80061e6:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80061ea:	3c01      	subs	r4, #1
 80061ec:	fb04 1100 	mla	r1, r4, r0, r1
 80061f0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80061f4:	1c51      	adds	r1, r2, #1
 80061f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061fa:	487c      	ldr	r0, [pc, #496]	; (80063ec <forward_conv2d_nl_pool+0x3f0>)
 80061fc:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8006200:	4611      	mov	r1, r2
 8006202:	2a00      	cmp	r2, #0
 8006204:	bf08      	it	eq
 8006206:	4601      	moveq	r1, r0
 8006208:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 800620c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8006210:	2d04      	cmp	r5, #4
 8006212:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8006216:	f000 849e 	beq.w	8006b56 <forward_conv2d_nl_pool+0xb5a>
 800621a:	2d08      	cmp	r5, #8
 800621c:	f000 849b 	beq.w	8006b56 <forward_conv2d_nl_pool+0xb5a>
 8006220:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8006224:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8006228:	2e03      	cmp	r6, #3
 800622a:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800622e:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8006232:	f240 8483 	bls.w	8006b3c <forward_conv2d_nl_pool+0xb40>
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 8489 	beq.w	8006b52 <forward_conv2d_nl_pool+0xb56>
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800624e:	6899      	ldr	r1, [r3, #8]
 8006250:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8006254:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8006258:	6896      	ldr	r6, [r2, #8]
 800625a:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800625e:	4249      	negs	r1, r1
 8006260:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8006264:	2800      	cmp	r0, #0
 8006266:	f000 82dd 	beq.w	8006824 <forward_conv2d_nl_pool+0x828>
 800626a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800626e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8006272:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006276:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 800627a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 80063f0 <forward_conv2d_nl_pool+0x3f4>
 800627e:	fb03 f200 	mul.w	r2, r3, r0
 8006282:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8006286:	008c      	lsls	r4, r1, #2
 8006288:	fb04 f000 	mul.w	r0, r4, r0
 800628c:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8006290:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8006294:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8006298:	fb01 fc02 	mul.w	ip, r1, r2
 800629c:	00a2      	lsls	r2, r4, #2
 800629e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 80062a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062a6:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 80062aa:	00ab      	lsls	r3, r5, #2
 80062ac:	4694      	mov	ip, r2
 80062ae:	fb0c f204 	mul.w	r2, ip, r4
 80062b2:	fb04 f303 	mul.w	r3, r4, r3
 80062b6:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80062ba:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80062be:	00a4      	lsls	r4, r4, #2
 80062c0:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80062c4:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 80062c8:	f04f 0c00 	mov.w	ip, #0
 80062cc:	fa0f f58b 	sxth.w	r5, fp
 80062d0:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 80062d4:	46a4      	mov	ip, r4
 80062d6:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 80062da:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 80062de:	fa0f f58a 	sxth.w	r5, sl
 80062e2:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 80062e6:	fb0c fc04 	mul.w	ip, ip, r4
 80062ea:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 80062ee:	fb06 fc03 	mul.w	ip, r6, r3
 80062f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062f6:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 80062fa:	4240      	negs	r0, r0
 80062fc:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8006300:	469c      	mov	ip, r3
 8006302:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8006306:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800630a:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800630e:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 8006312:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 8006316:	fb00 f303 	mul.w	r3, r0, r3
 800631a:	460d      	mov	r5, r1
 800631c:	fb0c fc04 	mul.w	ip, ip, r4
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
 8006322:	fb04 f305 	mul.w	r3, r4, r5
 8006326:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800632a:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006334:	46a6      	mov	lr, r4
 8006336:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 800633a:	fb05 f503 	mul.w	r5, r5, r3
 800633e:	667d      	str	r5, [r7, #100]	; 0x64
 8006340:	4625      	mov	r5, r4
 8006342:	fb05 f503 	mul.w	r5, r5, r3
 8006346:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800634a:	66bd      	str	r5, [r7, #104]	; 0x68
 800634c:	fb00 f101 	mul.w	r1, r0, r1
 8006350:	fb03 f306 	mul.w	r3, r3, r6
 8006354:	657b      	str	r3, [r7, #84]	; 0x54
 8006356:	008b      	lsls	r3, r1, #2
 8006358:	633b      	str	r3, [r7, #48]	; 0x30
 800635a:	0093      	lsls	r3, r2, #2
 800635c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800635e:	0083      	lsls	r3, r0, #2
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006366:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800636a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800636e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8006372:	2400      	movs	r4, #0
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
 8006376:	4603      	mov	r3, r0
 8006378:	fb03 f301 	mul.w	r3, r3, r1
 800637c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8006380:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8006384:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006388:	00d1      	lsls	r1, r2, #3
 800638a:	0113      	lsls	r3, r2, #4
 800638c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8006390:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006394:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006398:	fb00 f004 	mul.w	r0, r0, r4
 800639c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80063a0:	66f8      	str	r0, [r7, #108]	; 0x6c
 80063a2:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80063a6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80063aa:	469a      	mov	sl, r3
 80063ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f340 81d0 	ble.w	8006756 <forward_conv2d_nl_pool+0x75a>
 80063b6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80063ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80063be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80063c2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80063c6:	2900      	cmp	r1, #0
 80063c8:	441a      	add	r2, r3
 80063ca:	bfb4      	ite	lt
 80063cc:	2100      	movlt	r1, #0
 80063ce:	2300      	movge	r3, #0
 80063d0:	4282      	cmp	r2, r0
 80063d2:	bf28      	it	cs
 80063d4:	4602      	movcs	r2, r0
 80063d6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80063da:	2801      	cmp	r0, #1
 80063dc:	f000 83f6 	beq.w	8006bcc <forward_conv2d_nl_pool+0xbd0>
 80063e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80063e4:	4281      	cmp	r1, r0
 80063e6:	f000 822a 	beq.w	800683e <forward_conv2d_nl_pool+0x842>
 80063ea:	e003      	b.n	80063f4 <forward_conv2d_nl_pool+0x3f8>
 80063ec:	08005c41 	.word	0x08005c41
 80063f0:	00000000 	.word	0x00000000
 80063f4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80063f8:	2900      	cmp	r1, #0
 80063fa:	f000 819f 	beq.w	800673c <forward_conv2d_nl_pool+0x740>
 80063fe:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8006402:	fb93 f1f0 	sdiv	r1, r3, r0
 8006406:	fb00 3111 	mls	r1, r0, r1, r3
 800640a:	1a41      	subs	r1, r0, r1
 800640c:	1ad2      	subs	r2, r2, r3
 800640e:	fb91 f5f0 	sdiv	r5, r1, r0
 8006412:	fb00 1515 	mls	r5, r0, r5, r1
 8006416:	1b52      	subs	r2, r2, r5
 8006418:	4601      	mov	r1, r0
 800641a:	4402      	add	r2, r0
 800641c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006420:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8006424:	4604      	mov	r4, r0
 8006426:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800642a:	fbb4 f4f0 	udiv	r4, r4, r0
 800642e:	6a38      	ldr	r0, [r7, #32]
 8006430:	3a01      	subs	r2, #1
 8006432:	fb92 f8f1 	sdiv	r8, r2, r1
 8006436:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800643a:	eba0 0c04 	sub.w	ip, r0, r4
 800643e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8006442:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006446:	4614      	mov	r4, r2
 8006448:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800644c:	fbb4 f2f2 	udiv	r2, r4, r2
 8006450:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8006454:	663a      	str	r2, [r7, #96]	; 0x60
 8006456:	441d      	add	r5, r3
 8006458:	fb0e f000 	mul.w	r0, lr, r0
 800645c:	440b      	add	r3, r1
 800645e:	eba6 0608 	sub.w	r6, r6, r8
 8006462:	fb04 f505 	mul.w	r5, r4, r5
 8006466:	3b01      	subs	r3, #1
 8006468:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800646c:	fb93 f3f4 	sdiv	r3, r3, r4
 8006470:	fb00 f406 	mul.w	r4, r0, r6
 8006474:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8006478:	677d      	str	r5, [r7, #116]	; 0x74
 800647a:	0091      	lsls	r1, r2, #2
 800647c:	fb00 f003 	mul.w	r0, r0, r3
 8006480:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8006484:	65f8      	str	r0, [r7, #92]	; 0x5c
 8006486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800648a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800648e:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8006492:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8006496:	1ac3      	subs	r3, r0, r3
 8006498:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800649c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064a0:	008b      	lsls	r3, r1, #2
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a4:	00d3      	lsls	r3, r2, #3
 80064a6:	61fb      	str	r3, [r7, #28]
 80064a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064b8:	2300      	movs	r3, #0
 80064ba:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 80064be:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80064c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80064c4:	46c2      	mov	sl, r8
 80064c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064ca:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80064ce:	eb03 0c02 	add.w	ip, r3, r2
 80064d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f2c0 811c 	blt.w	8006714 <forward_conv2d_nl_pool+0x718>
 80064dc:	2000      	movs	r0, #0
 80064de:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80064e0:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 80064e4:	4605      	mov	r5, r0
 80064e6:	4606      	mov	r6, r0
 80064e8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80064f0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80064f4:	4413      	add	r3, r2
 80064f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80064fa:	440a      	add	r2, r1
 80064fc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006500:	428b      	cmp	r3, r1
 8006502:	bf94      	ite	ls
 8006504:	ebc6 0303 	rsbls	r3, r6, r3
 8006508:	ebc6 0301 	rsbhi	r3, r6, r1
 800650c:	4415      	add	r5, r2
 800650e:	1a1b      	subs	r3, r3, r0
 8006510:	00a4      	lsls	r4, r4, #2
 8006512:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8006516:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800651a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800651e:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8006520:	4602      	mov	r2, r0
 8006522:	2800      	cmp	r0, #0
 8006524:	bf08      	it	eq
 8006526:	4662      	moveq	r2, ip
 8006528:	f108 31ff 	add.w	r1, r8, #4294967295
 800652c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8006530:	fb91 f1f0 	sdiv	r1, r1, r0
 8006534:	4429      	add	r1, r5
 8006536:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800653a:	fb0e 5501 	mla	r5, lr, r1, r5
 800653e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006542:	4403      	add	r3, r0
 8006544:	fb01 6104 	mla	r1, r1, r4, r6
 8006548:	3b01      	subs	r3, #1
 800654a:	fb93 f6f0 	sdiv	r6, r3, r0
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8006554:	fb06 3110 	mls	r1, r6, r0, r3
 8006558:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800655c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8006560:	4562      	cmp	r2, ip
 8006562:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006566:	bf08      	it	eq
 8006568:	eeb0 6a48 	vmoveq.f32	s12, s16
 800656c:	1b9b      	subs	r3, r3, r6
 800656e:	2800      	cmp	r0, #0
 8006570:	d070      	beq.n	8006654 <forward_conv2d_nl_pool+0x658>
 8006572:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8006576:	fb0e f803 	mul.w	r8, lr, r3
 800657a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800657c:	fb00 fb01 	mul.w	fp, r0, r1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d067      	beq.n	8006654 <forward_conv2d_nl_pool+0x658>
 8006584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006588:	18d3      	adds	r3, r2, r3
 800658a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800658e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	62bb      	str	r3, [r7, #40]	; 0x28
 8006596:	2300      	movs	r3, #0
 8006598:	673b      	str	r3, [r7, #112]	; 0x70
 800659a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	4413      	add	r3, r2
 80065a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80065a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	4413      	add	r3, r2
 80065ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80065b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80065b4:	ecf3 7a01 	vldmia	r3!, {s15}
 80065b8:	f1ba 0f00 	cmp.w	sl, #0
 80065bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80065c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80065c4:	f340 80a4 	ble.w	8006710 <forward_conv2d_nl_pool+0x714>
 80065c8:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80065cc:	f04f 0c00 	mov.w	ip, #0
 80065d0:	2e00      	cmp	r6, #0
 80065d2:	dd19      	ble.n	8006608 <forward_conv2d_nl_pool+0x60c>
 80065d4:	2100      	movs	r1, #0
 80065d6:	eb00 040e 	add.w	r4, r0, lr
 80065da:	4284      	cmp	r4, r0
 80065dc:	d910      	bls.n	8006600 <forward_conv2d_nl_pool+0x604>
 80065de:	4603      	mov	r3, r0
 80065e0:	462a      	mov	r2, r5
 80065e2:	ecb3 7a01 	vldmia	r3!, {s14}
 80065e6:	ecf2 6a01 	vldmia	r2!, {s13}
 80065ea:	429c      	cmp	r4, r3
 80065ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80065f0:	d8f7      	bhi.n	80065e2 <forward_conv2d_nl_pool+0x5e6>
 80065f2:	43c3      	mvns	r3, r0
 80065f4:	441c      	add	r4, r3
 80065f6:	f024 0403 	bic.w	r4, r4, #3
 80065fa:	3404      	adds	r4, #4
 80065fc:	4425      	add	r5, r4
 80065fe:	4420      	add	r0, r4
 8006600:	3101      	adds	r1, #1
 8006602:	428e      	cmp	r6, r1
 8006604:	4448      	add	r0, r9
 8006606:	d1e6      	bne.n	80065d6 <forward_conv2d_nl_pool+0x5da>
 8006608:	f10c 0c01 	add.w	ip, ip, #1
 800660c:	45e2      	cmp	sl, ip
 800660e:	4458      	add	r0, fp
 8006610:	4445      	add	r5, r8
 8006612:	d1dd      	bne.n	80065d0 <forward_conv2d_nl_pool+0x5d4>
 8006614:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8006618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800661c:	441d      	add	r5, r3
 800661e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006622:	ece3 7a01 	vstmia	r3!, {s15}
 8006626:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662e:	4293      	cmp	r3, r2
 8006630:	d1be      	bne.n	80065b0 <forward_conv2d_nl_pool+0x5b4>
 8006632:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006636:	69f9      	ldr	r1, [r7, #28]
 8006638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800663a:	4472      	add	r2, lr
 800663c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8006640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006642:	1a52      	subs	r2, r2, r1
 8006644:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006648:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800664c:	3301      	adds	r3, #1
 800664e:	429a      	cmp	r2, r3
 8006650:	673b      	str	r3, [r7, #112]	; 0x70
 8006652:	d1a2      	bne.n	800659a <forward_conv2d_nl_pool+0x59e>
 8006654:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006658:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800665c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800665e:	4608      	mov	r0, r1
 8006660:	4410      	add	r0, r2
 8006662:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8006666:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800666a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800666e:	4401      	add	r1, r0
 8006670:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8006674:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006678:	1a8a      	subs	r2, r1, r2
 800667a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800667e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006682:	3301      	adds	r3, #1
 8006684:	429a      	cmp	r2, r3
 8006686:	67bb      	str	r3, [r7, #120]	; 0x78
 8006688:	f47f af1d 	bne.w	80064c6 <forward_conv2d_nl_pool+0x4ca>
 800668c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006690:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006694:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	2a00      	cmp	r2, #0
 800669c:	f000 8210 	beq.w	8006ac0 <forward_conv2d_nl_pool+0xac4>
 80066a0:	2400      	movs	r4, #0
 80066a2:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 80066a6:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 80066aa:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 80066ae:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 80066b2:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80066b6:	609e      	str	r6, [r3, #8]
 80066b8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80066bc:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 80066c0:	462b      	mov	r3, r5
 80066c2:	4641      	mov	r1, r8
 80066c4:	4640      	mov	r0, r8
 80066c6:	47a0      	blx	r4
 80066c8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80066cc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80066d0:	6859      	ldr	r1, [r3, #4]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 80066d8:	4405      	add	r5, r0
 80066da:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80066de:	0089      	lsls	r1, r1, #2
 80066e0:	4406      	add	r6, r0
 80066e2:	eba5 0c09 	sub.w	ip, r5, r9
 80066e6:	1850      	adds	r0, r2, r1
 80066e8:	45a4      	cmp	ip, r4
 80066ea:	bfa8      	it	ge
 80066ec:	464d      	movge	r5, r9
 80066ee:	4286      	cmp	r6, r0
 80066f0:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80066f4:	bf28      	it	cs
 80066f6:	1a76      	subcs	r6, r6, r1
 80066f8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80066fc:	3001      	adds	r0, #1
 80066fe:	4281      	cmp	r1, r0
 8006700:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8006704:	d1d7      	bne.n	80066b6 <forward_conv2d_nl_pool+0x6ba>
 8006706:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 800670a:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 800670e:	e019      	b.n	8006744 <forward_conv2d_nl_pool+0x748>
 8006710:	461a      	mov	r2, r3
 8006712:	e781      	b.n	8006618 <forward_conv2d_nl_pool+0x61c>
 8006714:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006718:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800671c:	fb90 f3f2 	sdiv	r3, r0, r2
 8006720:	fb02 0313 	mls	r3, r2, r3, r0
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	4605      	mov	r5, r0
 8006728:	fb93 f0f2 	sdiv	r0, r3, r2
 800672c:	fb02 3010 	mls	r0, r2, r0, r3
 8006730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006732:	462e      	mov	r6, r5
 8006734:	18c4      	adds	r4, r0, r3
 8006736:	eb02 0805 	add.w	r8, r2, r5
 800673a:	e6d5      	b.n	80064e8 <forward_conv2d_nl_pool+0x4ec>
 800673c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	609a      	str	r2, [r3, #8]
 8006746:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800674a:	3301      	adds	r3, #1
 800674c:	b21b      	sxth	r3, r3
 800674e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8006752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006756:	3b01      	subs	r3, #1
 8006758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800675c:	f100 83bf 	bmi.w	8006ede <forward_conv2d_nl_pool+0xee2>
 8006760:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006764:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8006768:	42a3      	cmp	r3, r4
 800676a:	f200 839d 	bhi.w	8006ea8 <forward_conv2d_nl_pool+0xeac>
 800676e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006772:	b29b      	uxth	r3, r3
 8006774:	6990      	ldr	r0, [r2, #24]
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800677c:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8006780:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8006784:	1a9b      	subs	r3, r3, r2
 8006786:	fa1f f188 	uxth.w	r1, r8
 800678a:	b29a      	uxth	r2, r3
 800678c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006790:	9308      	str	r3, [sp, #32]
 8006792:	9105      	str	r1, [sp, #20]
 8006794:	2601      	movs	r6, #1
 8006796:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800679a:	9607      	str	r6, [sp, #28]
 800679c:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 80067a0:	9506      	str	r5, [sp, #24]
 80067a2:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 80067a6:	9304      	str	r3, [sp, #16]
 80067a8:	1a64      	subs	r4, r4, r1
 80067aa:	b2b1      	uxth	r1, r6
 80067ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80067b6:	b224      	sxth	r4, r4
 80067b8:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 80067bc:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 80067c0:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80067c4:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80067c6:	47a0      	blx	r4
 80067c8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80067cc:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 80067d0:	688a      	ldr	r2, [r1, #8]
 80067d2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80067d4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80067d8:	fa0f f388 	sxth.w	r3, r8
 80067dc:	1af3      	subs	r3, r6, r3
 80067de:	4422      	add	r2, r4
 80067e0:	462e      	mov	r6, r5
 80067e2:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 80067e6:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 80067ea:	608a      	str	r2, [r1, #8]
 80067ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80067f0:	4426      	add	r6, r4
 80067f2:	b21b      	sxth	r3, r3
 80067f4:	1b2c      	subs	r4, r5, r4
 80067f6:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 80067fa:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 80067fc:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8006800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006808:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 800680c:	3001      	adds	r0, #1
 800680e:	442c      	add	r4, r5
 8006810:	4283      	cmp	r3, r0
 8006812:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8006816:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800681a:	f63f adc7 	bhi.w	80063ac <forward_conv2d_nl_pool+0x3b0>
 800681e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	609a      	str	r2, [r3, #8]
 8006828:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800682c:	68d3      	ldr	r3, [r2, #12]
 800682e:	6093      	str	r3, [r2, #8]
 8006830:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8006834:	46bd      	mov	sp, r7
 8006836:	ecbd 8b10 	vpop	{d8-d15}
 800683a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006840:	2901      	cmp	r1, #1
 8006842:	f47f add7 	bne.w	80063f4 <forward_conv2d_nl_pool+0x3f8>
 8006846:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800684a:	2900      	cmp	r1, #0
 800684c:	f43f af76 	beq.w	800673c <forward_conv2d_nl_pool+0x740>
 8006850:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8006854:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8006858:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800685c:	1ad2      	subs	r2, r2, r3
 800685e:	1a8c      	subs	r4, r1, r2
 8006860:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8006864:	00b2      	lsls	r2, r6, #2
 8006866:	fb02 f204 	mul.w	r2, r2, r4
 800686a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800686e:	fbb1 f1f0 	udiv	r1, r1, r0
 8006872:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8006876:	460d      	mov	r5, r1
 8006878:	62f9      	str	r1, [r7, #44]	; 0x2c
 800687a:	62ba      	str	r2, [r7, #40]	; 0x28
 800687c:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8006880:	0082      	lsls	r2, r0, #2
 8006882:	65ba      	str	r2, [r7, #88]	; 0x58
 8006884:	00ca      	lsls	r2, r1, #3
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	00aa      	lsls	r2, r5, #2
 800688a:	60ba      	str	r2, [r7, #8]
 800688c:	fb03 f206 	mul.w	r2, r3, r6
 8006890:	67ba      	str	r2, [r7, #120]	; 0x78
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	fb02 f303 	mul.w	r3, r2, r3
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800689e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068a6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80068aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80068b2:	2300      	movs	r3, #0
 80068b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f2c0 8112 	blt.w	8006ae6 <forward_conv2d_nl_pool+0xaea>
 80068c2:	2100      	movs	r1, #0
 80068c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068c6:	460a      	mov	r2, r1
 80068c8:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80068cc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80068d0:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 80068d4:	4420      	add	r0, r4
 80068d6:	4408      	add	r0, r1
 80068d8:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 80068dc:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80068e0:	190c      	adds	r4, r1, r4
 80068e2:	42ac      	cmp	r4, r5
 80068e4:	bf28      	it	cs
 80068e6:	462c      	movcs	r4, r5
 80068e8:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 80068ec:	0080      	lsls	r0, r0, #2
 80068ee:	1aa4      	subs	r4, r4, r2
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	f000 80e9 	beq.w	8006ac8 <forward_conv2d_nl_pool+0xacc>
 80068f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80068fa:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 80068fe:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8006902:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006906:	42b5      	cmp	r5, r6
 8006908:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800690c:	eba3 0204 	sub.w	r2, r3, r4
 8006910:	eba1 0104 	sub.w	r1, r1, r4
 8006914:	bf08      	it	eq
 8006916:	eef0 3a48 	vmoveq.f32	s7, s16
 800691a:	462b      	mov	r3, r5
 800691c:	697d      	ldr	r5, [r7, #20]
 800691e:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8006922:	4428      	add	r0, r5
 8006924:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8006928:	fb05 6e00 	mla	lr, r5, r0, r6
 800692c:	eb0e 000b 	add.w	r0, lr, fp
 8006930:	4586      	cmp	lr, r0
 8006932:	61f8      	str	r0, [r7, #28]
 8006934:	f080 80a5 	bcs.w	8006a82 <forward_conv2d_nl_pool+0xa86>
 8006938:	0092      	lsls	r2, r2, #2
 800693a:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800693e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006940:	fb01 f10b 	mul.w	r1, r1, fp
 8006944:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8006948:	f024 0803 	bic.w	r8, r4, #3
 800694c:	2a00      	cmp	r2, #0
 800694e:	f000 8098 	beq.w	8006a82 <forward_conv2d_nl_pool+0xa86>
 8006952:	f108 32ff 	add.w	r2, r8, #4294967295
 8006956:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006958:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800695c:	0892      	lsrs	r2, r2, #2
 800695e:	3201      	adds	r2, #1
 8006960:	4401      	add	r1, r0
 8006962:	fb02 f00a 	mul.w	r0, r2, sl
 8006966:	6638      	str	r0, [r7, #96]	; 0x60
 8006968:	0110      	lsls	r0, r2, #4
 800696a:	0092      	lsls	r2, r2, #2
 800696c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800696e:	1aca      	subs	r2, r1, r3
 8006970:	613a      	str	r2, [r7, #16]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	6738      	str	r0, [r7, #112]	; 0x70
 8006976:	4413      	add	r3, r2
 8006978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800697c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006982:	4413      	add	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	4413      	add	r3, r2
 800698e:	677b      	str	r3, [r7, #116]	; 0x74
 8006990:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006994:	ecf3 6a01 	vldmia	r3!, {s13}
 8006998:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800699c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80069a6:	dd57      	ble.n	8006a58 <forward_conv2d_nl_pool+0xa5c>
 80069a8:	4676      	mov	r6, lr
 80069aa:	f04f 0c00 	mov.w	ip, #0
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	f340 8087 	ble.w	8006ac4 <forward_conv2d_nl_pool+0xac8>
 80069b6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80069ba:	f109 0310 	add.w	r3, r9, #16
 80069be:	18b1      	adds	r1, r6, r2
 80069c0:	2000      	movs	r0, #0
 80069c2:	4632      	mov	r2, r6
 80069c4:	eb02 050b 	add.w	r5, r2, fp
 80069c8:	ed95 7a00 	vldr	s14, [r5]
 80069cc:	ed53 7a03 	vldr	s15, [r3, #-12]
 80069d0:	ed92 4a00 	vldr	s8, [r2]
 80069d4:	ed53 4a04 	vldr	s9, [r3, #-16]
 80069d8:	ed91 5a00 	vldr	s10, [r1]
 80069dc:	ed53 5a02 	vldr	s11, [r3, #-8]
 80069e0:	ed13 6a01 	vldr	s12, [r3, #-4]
 80069e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e8:	eb01 050b 	add.w	r5, r1, fp
 80069ec:	eee4 7a24 	vfma.f32	s15, s8, s9
 80069f0:	3004      	adds	r0, #4
 80069f2:	4540      	cmp	r0, r8
 80069f4:	ed95 7a00 	vldr	s14, [r5]
 80069f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80069fc:	4452      	add	r2, sl
 80069fe:	4451      	add	r1, sl
 8006a00:	f103 0310 	add.w	r3, r3, #16
 8006a04:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006a08:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006a0c:	dbda      	blt.n	80069c4 <forward_conv2d_nl_pool+0x9c8>
 8006a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a10:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006a12:	441e      	add	r6, r3
 8006a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a16:	4499      	add	r9, r3
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	da11      	bge.n	8006a40 <forward_conv2d_nl_pool+0xa44>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	4633      	mov	r3, r6
 8006a20:	4649      	mov	r1, r9
 8006a22:	edd3 7a00 	vldr	s15, [r3]
 8006a26:	ecb1 7a01 	vldmia	r1!, {s14}
 8006a2a:	3201      	adds	r2, #1
 8006a2c:	42a2      	cmp	r2, r4
 8006a2e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006a32:	445b      	add	r3, fp
 8006a34:	d1f5      	bne.n	8006a22 <forward_conv2d_nl_pool+0xa26>
 8006a36:	1a20      	subs	r0, r4, r0
 8006a38:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8006a3c:	fb00 660b 	mla	r6, r0, fp, r6
 8006a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a44:	441e      	add	r6, r3
 8006a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a4a:	4499      	add	r9, r3
 8006a4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a50:	f10c 0c01 	add.w	ip, ip, #1
 8006a54:	4563      	cmp	r3, ip
 8006a56:	d1aa      	bne.n	80069ae <forward_conv2d_nl_pool+0x9b2>
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	4499      	add	r9, r3
 8006a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a5e:	ece3 6a01 	vstmia	r3!, {s13}
 8006a62:	677b      	str	r3, [r7, #116]	; 0x74
 8006a64:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d191      	bne.n	8006990 <forward_conv2d_nl_pool+0x994>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	1a9b      	subs	r3, r3, r2
 8006a72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	f10e 0e04 	add.w	lr, lr, #4
 8006a7c:	459e      	cmp	lr, r3
 8006a7e:	f4ff af7d 	bcc.w	800697c <forward_conv2d_nl_pool+0x980>
 8006a82:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8006a86:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8006a8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a8e:	440a      	add	r2, r1
 8006a90:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8006a94:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8006a98:	4608      	mov	r0, r1
 8006a9a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006a9e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8006aa2:	4410      	add	r0, r2
 8006aa4:	1a8a      	subs	r2, r1, r2
 8006aa6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006aaa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006aae:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006aba:	f47f aefd 	bne.w	80068b8 <forward_conv2d_nl_pool+0x8bc>
 8006abe:	e5e7      	b.n	8006690 <forward_conv2d_nl_pool+0x694>
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	e63f      	b.n	8006744 <forward_conv2d_nl_pool+0x748>
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	e7a7      	b.n	8006a18 <forward_conv2d_nl_pool+0xa1c>
 8006ac8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006acc:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8006ad0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006ad4:	1b19      	subs	r1, r3, r4
 8006ad6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006ada:	eef0 3a48 	vmov.f32	s7, s16
 8006ade:	1b1a      	subs	r2, r3, r4
 8006ae0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006ae4:	e71a      	b.n	800691c <forward_conv2d_nl_pool+0x920>
 8006ae6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8006aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aec:	460a      	mov	r2, r1
 8006aee:	440b      	add	r3, r1
 8006af0:	e6ea      	b.n	80068c8 <forward_conv2d_nl_pool+0x8cc>
 8006af2:	b168      	cbz	r0, 8006b10 <forward_conv2d_nl_pool+0xb14>
 8006af4:	6882      	ldr	r2, [r0, #8]
 8006af6:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8006afa:	2201      	movs	r2, #1
 8006afc:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8006b00:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006b04:	f7ff bb29 	b.w	800615a <forward_conv2d_nl_pool+0x15e>
 8006b08:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8006b0c:	f7ff bb08 	b.w	8006120 <forward_conv2d_nl_pool+0x124>
 8006b10:	2201      	movs	r2, #1
 8006b12:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8006b16:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8006b1a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006b1e:	f7ff bb1c 	b.w	800615a <forward_conv2d_nl_pool+0x15e>
 8006b22:	3118      	adds	r1, #24
 8006b24:	d008      	beq.n	8006b38 <forward_conv2d_nl_pool+0xb3c>
 8006b26:	462a      	mov	r2, r5
 8006b28:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7ff ba93 	b.w	8006058 <forward_conv2d_nl_pool+0x5c>
 8006b32:	4691      	mov	r9, r2
 8006b34:	f7ff ba7d 	b.w	8006032 <forward_conv2d_nl_pool+0x36>
 8006b38:	68cb      	ldr	r3, [r1, #12]
 8006b3a:	deff      	udf	#255	; 0xff
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	deff      	udf	#255	; 0xff
 8006b42:	4694      	mov	ip, r2
 8006b44:	f7ff ba6c 	b.w	8006020 <forward_conv2d_nl_pool+0x24>
 8006b48:	6873      	ldr	r3, [r6, #4]
 8006b4a:	deff      	udf	#255	; 0xff
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f7ff ba82 	b.w	8006056 <forward_conv2d_nl_pool+0x5a>
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	deff      	udf	#255	; 0xff
 8006b56:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8006b5a:	2a00      	cmp	r2, #0
 8006b5c:	f43f ab60 	beq.w	8006220 <forward_conv2d_nl_pool+0x224>
 8006b60:	2e03      	cmp	r6, #3
 8006b62:	d9eb      	bls.n	8006b3c <forward_conv2d_nl_pool+0xb40>
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	b323      	cbz	r3, 8006bb4 <forward_conv2d_nl_pool+0xbb8>
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	b313      	cbz	r3, 8006bb4 <forward_conv2d_nl_pool+0xbb8>
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006b74:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006b7e:	9000      	str	r0, [sp, #0]
 8006b80:	4673      	mov	r3, lr
 8006b82:	4620      	mov	r0, r4
 8006b84:	f7ff f9ea 	bl	8005f5c <ai_dict_decompress_f32>
 8006b88:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006b8c:	b17c      	cbz	r4, 8006bae <forward_conv2d_nl_pool+0xbb2>
 8006b8e:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8006b92:	881e      	ldrh	r6, [r3, #0]
 8006b94:	f7ff bb44 	b.w	8006220 <forward_conv2d_nl_pool+0x224>
 8006b98:	b178      	cbz	r0, 8006bba <forward_conv2d_nl_pool+0xbbe>
 8006b9a:	6881      	ldr	r1, [r0, #8]
 8006b9c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8006ba6:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006baa:	f7ff bad6 	b.w	800615a <forward_conv2d_nl_pool+0x15e>
 8006bae:	881e      	ldrh	r6, [r3, #0]
 8006bb0:	f7ff bb36 	b.w	8006220 <forward_conv2d_nl_pool+0x224>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	deff      	udf	#255	; 0xff
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8006bc0:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8006bc4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006bc8:	f7ff bac7 	b.w	800615a <forward_conv2d_nl_pool+0x15e>
 8006bcc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8006bce:	2801      	cmp	r0, #1
 8006bd0:	f47f ac10 	bne.w	80063f4 <forward_conv2d_nl_pool+0x3f8>
 8006bd4:	1ad2      	subs	r2, r2, r3
 8006bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bd8:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8006bdc:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8006be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006be2:	fb00 4101 	mla	r1, r0, r1, r4
 8006be6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8006bea:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8006bee:	f080 81c4 	bcs.w	8006f7a <forward_conv2d_nl_pool+0xf7e>
 8006bf2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	f43f ad4a 	beq.w	8006690 <forward_conv2d_nl_pool+0x694>
 8006bfc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006c00:	fb02 f303 	mul.w	r3, r2, r3
 8006c04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c06:	677b      	str	r3, [r7, #116]	; 0x74
 8006c08:	1a9b      	subs	r3, r3, r2
 8006c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c0c:	188b      	adds	r3, r1, r2
 8006c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c20:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8006c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 8133 	beq.w	8006ea2 <forward_conv2d_nl_pool+0xea6>
 8006c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c40:	ed93 6a00 	vldr	s12, [r3]
 8006c44:	3304      	adds	r3, #4
 8006c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 8101 	beq.w	8006e56 <forward_conv2d_nl_pool+0xe5a>
 8006c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c58:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006c5c:	eb03 0802 	add.w	r8, r3, r2
 8006c60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c70:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c7a:	f04f 0b00 	mov.w	fp, #0
 8006c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f2c0 8104 	blt.w	8006e90 <forward_conv2d_nl_pool+0xe94>
 8006c88:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006c8c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006c94:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8006c98:	eb02 0c04 	add.w	ip, r2, r4
 8006c9c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006ca0:	4540      	cmp	r0, r8
 8006ca2:	bf94      	ite	ls
 8006ca4:	ebc3 0300 	rsbls	r3, r3, r0
 8006ca8:	ebc3 0308 	rsbhi	r3, r3, r8
 8006cac:	eba2 0903 	sub.w	r9, r2, r3
 8006cb0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006cb4:	1ac4      	subs	r4, r0, r3
 8006cb6:	fb03 f302 	mul.w	r3, r3, r2
 8006cba:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	f340 80e3 	ble.w	8006e8a <forward_conv2d_nl_pool+0xe8e>
 8006cc4:	f023 050f 	bic.w	r5, r3, #15
 8006cc8:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8006ccc:	1e68      	subs	r0, r5, #1
 8006cce:	0900      	lsrs	r0, r0, #4
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	fb06 f204 	mul.w	r2, r6, r4
 8006cd6:	673a      	str	r2, [r7, #112]	; 0x70
 8006cd8:	0102      	lsls	r2, r0, #4
 8006cda:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cdc:	fb06 f909 	mul.w	r9, r6, r9
 8006ce0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8006ce4:	eef0 6a46 	vmov.f32	s13, s12
 8006ce8:	f04f 0e00 	mov.w	lr, #0
 8006cec:	4662      	mov	r2, ip
 8006cee:	2d00      	cmp	r5, #0
 8006cf0:	f340 80c9 	ble.w	8006e86 <forward_conv2d_nl_pool+0xe8a>
 8006cf4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8006cf8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8006cfc:	2600      	movs	r6, #0
 8006cfe:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8006d02:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8006d06:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8006d0a:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8006d0e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8006d12:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8006d16:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8006d1a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8006d1e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8006d22:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8006d26:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8006d2a:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 8006d2e:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 8006d32:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 8006d36:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8006d3a:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8006d3e:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 8006d42:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 8006d46:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8006d4a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8006d4e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8006d52:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8006d56:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8006d5a:	ed50 3a04 	vldr	s7, [r0, #-16]
 8006d5e:	ed14 4a04 	vldr	s8, [r4, #-16]
 8006d62:	ed50 4a03 	vldr	s9, [r0, #-12]
 8006d66:	ed14 5a03 	vldr	s10, [r4, #-12]
 8006d6a:	ed50 5a02 	vldr	s11, [r0, #-8]
 8006d6e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8006d72:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8006d76:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8006d7a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8006d7e:	3610      	adds	r6, #16
 8006d80:	42ae      	cmp	r6, r5
 8006d82:	ed14 fa01 	vldr	s30, [r4, #-4]
 8006d86:	ed50 ea01 	vldr	s29, [r0, #-4]
 8006d8a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8006d8e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8006d92:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8006d96:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8006d9a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8006d9e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8006da2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8006da6:	eee9 7a89 	vfma.f32	s15, s19, s18
 8006daa:	eee8 7a80 	vfma.f32	s15, s17, s0
 8006dae:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006db2:	eee1 7a82 	vfma.f32	s15, s3, s4
 8006db6:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006dba:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006dbe:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006dc2:	eee5 7a87 	vfma.f32	s15, s11, s14
 8006dc6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8006dca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006dce:	db96      	blt.n	8006cfe <forward_conv2d_nl_pool+0xd02>
 8006dd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006dd2:	4451      	add	r1, sl
 8006dd4:	4452      	add	r2, sl
 8006dd6:	4283      	cmp	r3, r0
 8006dd8:	dd0f      	ble.n	8006dfa <forward_conv2d_nl_pool+0xdfe>
 8006dda:	4604      	mov	r4, r0
 8006ddc:	468c      	mov	ip, r1
 8006dde:	4616      	mov	r6, r2
 8006de0:	ecb6 7a01 	vldmia	r6!, {s14}
 8006de4:	ecfc 7a01 	vldmia	ip!, {s15}
 8006de8:	3401      	adds	r4, #1
 8006dea:	42a3      	cmp	r3, r4
 8006dec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006df0:	d1f6      	bne.n	8006de0 <forward_conv2d_nl_pool+0xde4>
 8006df2:	1a18      	subs	r0, r3, r0
 8006df4:	0080      	lsls	r0, r0, #2
 8006df6:	4402      	add	r2, r0
 8006df8:	4401      	add	r1, r0
 8006dfa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006dfc:	4402      	add	r2, r0
 8006dfe:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8006e02:	f10e 0e01 	add.w	lr, lr, #1
 8006e06:	4570      	cmp	r0, lr
 8006e08:	4449      	add	r1, r9
 8006e0a:	f47f af70 	bne.w	8006cee <forward_conv2d_nl_pool+0xcf2>
 8006e0e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e14:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006e18:	edc3 6a00 	vstr	s13, [r3]
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8006e22:	440b      	add	r3, r1
 8006e24:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006e28:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e2a:	4410      	add	r0, r2
 8006e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e2e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8006e32:	4608      	mov	r0, r1
 8006e34:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006e38:	4418      	add	r0, r3
 8006e3a:	1acb      	subs	r3, r1, r3
 8006e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e40:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006e44:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8006e48:	f10b 0b01 	add.w	fp, fp, #1
 8006e4c:	455b      	cmp	r3, fp
 8006e4e:	eba8 0802 	sub.w	r8, r8, r2
 8006e52:	f47f af14 	bne.w	8006c7e <forward_conv2d_nl_pool+0xc82>
 8006e56:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006e5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e60:	440a      	add	r2, r1
 8006e62:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8006e66:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8006e6a:	3204      	adds	r2, #4
 8006e6c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006e70:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006e74:	3301      	adds	r3, #1
 8006e76:	429a      	cmp	r2, r3
 8006e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e7c:	f47f aed9 	bne.w	8006c32 <forward_conv2d_nl_pool+0xc36>
 8006e80:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8006e84:	e404      	b.n	8006690 <forward_conv2d_nl_pool+0x694>
 8006e86:	2000      	movs	r0, #0
 8006e88:	e7a5      	b.n	8006dd6 <forward_conv2d_nl_pool+0xdda>
 8006e8a:	eef0 6a46 	vmov.f32	s13, s12
 8006e8e:	e7be      	b.n	8006e0e <forward_conv2d_nl_pool+0xe12>
 8006e90:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006e94:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8006e98:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006e9c:	eba8 0303 	sub.w	r3, r8, r3
 8006ea0:	e6f6      	b.n	8006c90 <forward_conv2d_nl_pool+0xc94>
 8006ea2:	eeb0 6a48 	vmov.f32	s12, s16
 8006ea6:	e6d0      	b.n	8006c4a <forward_conv2d_nl_pool+0xc4e>
 8006ea8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006eb6:	4419      	add	r1, r3
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ebe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec4:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8006ec8:	4413      	add	r3, r2
 8006eca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006ece:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ed2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	f63f aa68 	bhi.w	80063ac <forward_conv2d_nl_pool+0x3b0>
 8006edc:	e49f      	b.n	800681e <forward_conv2d_nl_pool+0x822>
 8006ede:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ee2:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8006ee6:	699a      	ldr	r2, [r3, #24]
 8006ee8:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8006eec:	68d1      	ldr	r1, [r2, #12]
 8006eee:	6853      	ldr	r3, [r2, #4]
 8006ef0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ef2:	fb00 4012 	mls	r0, r0, r2, r4
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4281      	cmp	r1, r0
 8006efa:	bf88      	it	hi
 8006efc:	18c0      	addhi	r0, r0, r3
 8006efe:	4281      	cmp	r1, r0
 8006f00:	eb01 0203 	add.w	r2, r1, r3
 8006f04:	d216      	bcs.n	8006f34 <forward_conv2d_nl_pool+0xf38>
 8006f06:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 8006f0a:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8006f0e:	42a1      	cmp	r1, r4
 8006f10:	d010      	beq.n	8006f34 <forward_conv2d_nl_pool+0xf38>
 8006f12:	4290      	cmp	r0, r2
 8006f14:	d20e      	bcs.n	8006f34 <forward_conv2d_nl_pool+0xf38>
 8006f16:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8006f1a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8006f1e:	f850 3b04 	ldr.w	r3, [r0], #4
 8006f22:	f841 3b04 	str.w	r3, [r1], #4
 8006f26:	69a2      	ldr	r2, [r4, #24]
 8006f28:	6853      	ldr	r3, [r2, #4]
 8006f2a:	68d2      	ldr	r2, [r2, #12]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	441a      	add	r2, r3
 8006f30:	4282      	cmp	r2, r0
 8006f32:	d8f4      	bhi.n	8006f1e <forward_conv2d_nl_pool+0xf22>
 8006f34:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8006f38:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8006f3c:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 8006f40:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8006f42:	4420      	add	r0, r4
 8006f44:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8006f48:	1a40      	subs	r0, r0, r1
 8006f4a:	4421      	add	r1, r4
 8006f4c:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8006f50:	442c      	add	r4, r5
 8006f52:	b209      	sxth	r1, r1
 8006f54:	b200      	sxth	r0, r0
 8006f56:	4294      	cmp	r4, r2
 8006f58:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8006f5c:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8006f60:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8006f64:	4621      	mov	r1, r4
 8006f66:	f4ff abfb 	bcc.w	8006760 <forward_conv2d_nl_pool+0x764>
 8006f6a:	425b      	negs	r3, r3
 8006f6c:	4419      	add	r1, r3
 8006f6e:	4291      	cmp	r1, r2
 8006f70:	d2fc      	bcs.n	8006f6c <forward_conv2d_nl_pool+0xf70>
 8006f72:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8006f76:	f7ff bbf3 	b.w	8006760 <forward_conv2d_nl_pool+0x764>
 8006f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f7e:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8006f82:	320a      	adds	r2, #10
 8006f84:	f022 0207 	bic.w	r2, r2, #7
 8006f88:	ebad 0d02 	sub.w	sp, sp, r2
 8006f8c:	aa0a      	add	r2, sp, #40	; 0x28
 8006f8e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8006f92:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	f000 8153 	beq.w	8007242 <forward_conv2d_nl_pool+0x1246>
 8006f9c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006fa0:	f8c7 b01c 	str.w	fp, [r7, #28]
 8006fa4:	fb02 f303 	mul.w	r3, r2, r3
 8006fa8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006faa:	663b      	str	r3, [r7, #96]	; 0x60
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006fb4:	f8c7 a014 	str.w	sl, [r7, #20]
 8006fb8:	4413      	add	r3, r2
 8006fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006fc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fdc:	b13b      	cbz	r3, 8006fee <forward_conv2d_nl_pool+0xff2>
 8006fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006fe2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8006fe6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8006fea:	f001 f80d 	bl	8008008 <memcpy>
 8006fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8137 	beq.w	8007266 <forward_conv2d_nl_pool+0x126a>
 8006ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ffa:	ed93 6a00 	vldr	s12, [r3]
 8006ffe:	3304      	adds	r3, #4
 8007000:	67bb      	str	r3, [r7, #120]	; 0x78
 8007002:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 8101 	beq.w	800720e <forward_conv2d_nl_pool+0x1212>
 800700c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007010:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007014:	eb03 0802 	add.w	r8, r3, r2
 8007018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800701a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007028:	677b      	str	r3, [r7, #116]	; 0x74
 800702a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800702e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007032:	f04f 0b00 	mov.w	fp, #0
 8007036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800703a:	2b00      	cmp	r3, #0
 800703c:	f2c0 810a 	blt.w	8007254 <forward_conv2d_nl_pool+0x1258>
 8007040:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007046:	2300      	movs	r3, #0
 8007048:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800704c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8007050:	eb02 0c04 	add.w	ip, r2, r4
 8007054:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007058:	4540      	cmp	r0, r8
 800705a:	bf94      	ite	ls
 800705c:	ebc3 0300 	rsbls	r3, r3, r0
 8007060:	ebc3 0308 	rsbhi	r3, r3, r8
 8007064:	eba2 0903 	sub.w	r9, r2, r3
 8007068:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800706c:	1ac4      	subs	r4, r0, r3
 800706e:	fb03 f302 	mul.w	r3, r3, r2
 8007072:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8007076:	2a00      	cmp	r2, #0
 8007078:	f340 80e9 	ble.w	800724e <forward_conv2d_nl_pool+0x1252>
 800707c:	f023 050f 	bic.w	r5, r3, #15
 8007080:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8007084:	1e68      	subs	r0, r5, #1
 8007086:	0900      	lsrs	r0, r0, #4
 8007088:	3001      	adds	r0, #1
 800708a:	fb06 f204 	mul.w	r2, r6, r4
 800708e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007090:	0102      	lsls	r2, r0, #4
 8007092:	62ba      	str	r2, [r7, #40]	; 0x28
 8007094:	fb06 f909 	mul.w	r9, r6, r9
 8007098:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800709c:	eef0 6a46 	vmov.f32	s13, s12
 80070a0:	f04f 0e00 	mov.w	lr, #0
 80070a4:	4662      	mov	r2, ip
 80070a6:	2d00      	cmp	r5, #0
 80070a8:	f340 80cf 	ble.w	800724a <forward_conv2d_nl_pool+0x124e>
 80070ac:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80070b0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80070b4:	2600      	movs	r6, #0
 80070b6:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 80070ba:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80070be:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 80070c2:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 80070c6:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80070ca:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80070ce:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80070d2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80070d6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80070da:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80070de:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80070e2:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 80070e6:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80070ea:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 80070ee:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80070f2:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 80070f6:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80070fa:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 80070fe:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8007102:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8007106:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800710a:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800710e:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8007112:	ed50 3a04 	vldr	s7, [r0, #-16]
 8007116:	ed14 4a04 	vldr	s8, [r4, #-16]
 800711a:	ed54 4a03 	vldr	s9, [r4, #-12]
 800711e:	ed10 5a03 	vldr	s10, [r0, #-12]
 8007122:	ed50 5a02 	vldr	s11, [r0, #-8]
 8007126:	ed14 7a02 	vldr	s14, [r4, #-8]
 800712a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800712e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8007132:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8007136:	3610      	adds	r6, #16
 8007138:	42ae      	cmp	r6, r5
 800713a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800713e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8007142:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8007146:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800714a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800714e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8007152:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8007156:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800715a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800715e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8007162:	eee8 7a80 	vfma.f32	s15, s17, s0
 8007166:	eee0 7a81 	vfma.f32	s15, s1, s2
 800716a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800716e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007172:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007176:	eee4 7a85 	vfma.f32	s15, s9, s10
 800717a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800717e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8007182:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007186:	db96      	blt.n	80070b6 <forward_conv2d_nl_pool+0x10ba>
 8007188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718a:	4451      	add	r1, sl
 800718c:	4452      	add	r2, sl
 800718e:	4283      	cmp	r3, r0
 8007190:	dd0f      	ble.n	80071b2 <forward_conv2d_nl_pool+0x11b6>
 8007192:	4604      	mov	r4, r0
 8007194:	468c      	mov	ip, r1
 8007196:	4616      	mov	r6, r2
 8007198:	ecb6 7a01 	vldmia	r6!, {s14}
 800719c:	ecfc 7a01 	vldmia	ip!, {s15}
 80071a0:	3401      	adds	r4, #1
 80071a2:	42a3      	cmp	r3, r4
 80071a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80071a8:	d1f6      	bne.n	8007198 <forward_conv2d_nl_pool+0x119c>
 80071aa:	1a18      	subs	r0, r3, r0
 80071ac:	0080      	lsls	r0, r0, #2
 80071ae:	4402      	add	r2, r0
 80071b0:	4401      	add	r1, r0
 80071b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80071b4:	4402      	add	r2, r0
 80071b6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80071ba:	f10e 0e01 	add.w	lr, lr, #1
 80071be:	4570      	cmp	r0, lr
 80071c0:	4449      	add	r1, r9
 80071c2:	f47f af70 	bne.w	80070a6 <forward_conv2d_nl_pool+0x10aa>
 80071c6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80071ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80071d0:	edc3 6a00 	vstr	s13, [r3]
 80071d4:	4608      	mov	r0, r1
 80071d6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80071da:	440b      	add	r3, r1
 80071dc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80071e0:	677b      	str	r3, [r7, #116]	; 0x74
 80071e2:	4410      	add	r0, r2
 80071e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071e6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80071ea:	4608      	mov	r0, r1
 80071ec:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80071f0:	4418      	add	r0, r3
 80071f2:	1acb      	subs	r3, r1, r3
 80071f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80071fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8007200:	f10b 0b01 	add.w	fp, fp, #1
 8007204:	455b      	cmp	r3, fp
 8007206:	eba8 0802 	sub.w	r8, r8, r2
 800720a:	f47f af14 	bne.w	8007036 <forward_conv2d_nl_pool+0x103a>
 800720e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007212:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800721a:	440a      	add	r2, r1
 800721c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8007220:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007224:	3204      	adds	r2, #4
 8007226:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800722a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800722e:	3301      	adds	r3, #1
 8007230:	429a      	cmp	r2, r3
 8007232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007236:	f47f aecf 	bne.w	8006fd8 <forward_conv2d_nl_pool+0xfdc>
 800723a:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800723e:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8007242:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8007246:	f7ff ba23 	b.w	8006690 <forward_conv2d_nl_pool+0x694>
 800724a:	2000      	movs	r0, #0
 800724c:	e79f      	b.n	800718e <forward_conv2d_nl_pool+0x1192>
 800724e:	eef0 6a46 	vmov.f32	s13, s12
 8007252:	e7b8      	b.n	80071c6 <forward_conv2d_nl_pool+0x11ca>
 8007254:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007258:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800725c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8007260:	eba8 0303 	sub.w	r3, r8, r3
 8007264:	e6f0      	b.n	8007048 <forward_conv2d_nl_pool+0x104c>
 8007266:	eeb0 6a48 	vmov.f32	s12, s16
 800726a:	e6ca      	b.n	8007002 <forward_conv2d_nl_pool+0x1006>

0800726c <forward_dense>:
 800726c:	6983      	ldr	r3, [r0, #24]
 800726e:	881a      	ldrh	r2, [r3, #0]
 8007270:	2a00      	cmp	r2, #0
 8007272:	f000 80b5 	beq.w	80073e0 <forward_dense+0x174>
 8007276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727a:	ed2d 8b10 	vpush	{d8-d15}
 800727e:	685f      	ldr	r7, [r3, #4]
 8007280:	687e      	ldr	r6, [r7, #4]
 8007282:	b091      	sub	sp, #68	; 0x44
 8007284:	b106      	cbz	r6, 8007288 <forward_dense+0x1c>
 8007286:	6836      	ldr	r6, [r6, #0]
 8007288:	2a01      	cmp	r2, #1
 800728a:	f240 80a6 	bls.w	80073da <forward_dense+0x16e>
 800728e:	693d      	ldr	r5, [r7, #16]
 8007290:	b105      	cbz	r5, 8007294 <forward_dense+0x28>
 8007292:	682d      	ldr	r5, [r5, #0]
 8007294:	2a02      	cmp	r2, #2
 8007296:	f000 80a5 	beq.w	80073e4 <forward_dense+0x178>
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 821b 	beq.w	80076d8 <forward_dense+0x46c>
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	9106      	str	r1, [sp, #24]
 80072a6:	f117 0118 	adds.w	r1, r7, #24
 80072aa:	f000 80c9 	beq.w	8007440 <forward_dense+0x1d4>
 80072ae:	8b39      	ldrh	r1, [r7, #24]
 80072b0:	2901      	cmp	r1, #1
 80072b2:	f240 820e 	bls.w	80076d2 <forward_dense+0x466>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 80c4 	beq.w	8007444 <forward_dense+0x1d8>
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	9307      	str	r3, [sp, #28]
 80072c0:	9b06      	ldr	r3, [sp, #24]
 80072c2:	68ec      	ldr	r4, [r5, #12]
 80072c4:	6998      	ldr	r0, [r3, #24]
 80072c6:	68f1      	ldr	r1, [r6, #12]
 80072c8:	6803      	ldr	r3, [r0, #0]
 80072ca:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80072ce:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 80072d2:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 80072d6:	f3c3 5141 	ubfx	r1, r3, #21, #2
 80072da:	fa49 f101 	asr.w	r1, r9, r1
 80072de:	910b      	str	r1, [sp, #44]	; 0x2c
 80072e0:	2a03      	cmp	r2, #3
 80072e2:	fb0e f10c 	mul.w	r1, lr, ip
 80072e6:	6864      	ldr	r4, [r4, #4]
 80072e8:	9108      	str	r1, [sp, #32]
 80072ea:	f000 81de 	beq.w	80076aa <forward_dense+0x43e>
 80072ee:	6abf      	ldr	r7, [r7, #40]	; 0x28
 80072f0:	b117      	cbz	r7, 80072f8 <forward_dense+0x8c>
 80072f2:	683f      	ldr	r7, [r7, #0]
 80072f4:	b107      	cbz	r7, 80072f8 <forward_dense+0x8c>
 80072f6:	69bf      	ldr	r7, [r7, #24]
 80072f8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	f000 81d7 	beq.w	80076b0 <forward_dense+0x444>
 8007302:	2b08      	cmp	r3, #8
 8007304:	f000 81d4 	beq.w	80076b0 <forward_dense+0x444>
 8007308:	f04f 0a00 	mov.w	sl, #0
 800730c:	69ab      	ldr	r3, [r5, #24]
 800730e:	69b2      	ldr	r2, [r6, #24]
 8007310:	6899      	ldr	r1, [r3, #8]
 8007312:	9b06      	ldr	r3, [sp, #24]
 8007314:	9104      	str	r1, [sp, #16]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	6897      	ldr	r7, [r2, #8]
 800731a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800731e:	00a3      	lsls	r3, r4, #2
 8007320:	9309      	str	r3, [sp, #36]	; 0x24
 8007322:	18ce      	adds	r6, r1, r3
 8007324:	9b08      	ldr	r3, [sp, #32]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d052      	beq.n	80073d0 <forward_dense+0x164>
 800732a:	f1a8 0310 	sub.w	r3, r8, #16
 800732e:	091b      	lsrs	r3, r3, #4
 8007330:	3301      	adds	r3, #1
 8007332:	019b      	lsls	r3, r3, #6
 8007334:	930c      	str	r3, [sp, #48]	; 0x30
 8007336:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800733a:	930a      	str	r3, [sp, #40]	; 0x28
 800733c:	2300      	movs	r3, #0
 800733e:	9305      	str	r3, [sp, #20]
 8007340:	eddf aace 	vldr	s21, [pc, #824]	; 800767c <forward_dense+0x410>
 8007344:	f008 030f 	and.w	r3, r8, #15
 8007348:	930d      	str	r3, [sp, #52]	; 0x34
 800734a:	9b06      	ldr	r3, [sp, #24]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	689d      	ldr	r5, [r3, #8]
 8007350:	9b07      	ldr	r3, [sp, #28]
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 818f 	beq.w	8007676 <forward_dense+0x40a>
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	689c      	ldr	r4, [r3, #8]
 800735c:	9b04      	ldr	r3, [sp, #16]
 800735e:	f1ba 0f00 	cmp.w	sl, #0
 8007362:	d071      	beq.n	8007448 <forward_dense+0x1dc>
 8007364:	42b3      	cmp	r3, r6
 8007366:	d229      	bcs.n	80073bc <forward_dense+0x150>
 8007368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800736a:	469b      	mov	fp, r3
 800736c:	ab0f      	add	r3, sp, #60	; 0x3c
 800736e:	9303      	str	r3, [sp, #12]
 8007370:	2a04      	cmp	r2, #4
 8007372:	4633      	mov	r3, r6
 8007374:	4646      	mov	r6, r8
 8007376:	4698      	mov	r8, r3
 8007378:	d037      	beq.n	80073ea <forward_dense+0x17e>
 800737a:	2c00      	cmp	r4, #0
 800737c:	f000 8180 	beq.w	8007680 <forward_dense+0x414>
 8007380:	f8d4 c000 	ldr.w	ip, [r4]
 8007384:	9803      	ldr	r0, [sp, #12]
 8007386:	9600      	str	r6, [sp, #0]
 8007388:	463b      	mov	r3, r7
 800738a:	4629      	mov	r1, r5
 800738c:	4652      	mov	r2, sl
 800738e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8007392:	f7fe fc57 	bl	8005c44 <ai_dict8_dot_array_f32>
 8007396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007398:	f84b 3b04 	str.w	r3, [fp], #4
 800739c:	45c3      	cmp	fp, r8
 800739e:	f104 0404 	add.w	r4, r4, #4
 80073a2:	444d      	add	r5, r9
 80073a4:	d3e9      	bcc.n	800737a <forward_dense+0x10e>
 80073a6:	4643      	mov	r3, r8
 80073a8:	46b0      	mov	r8, r6
 80073aa:	461e      	mov	r6, r3
 80073ac:	9a04      	ldr	r2, [sp, #16]
 80073ae:	43d3      	mvns	r3, r2
 80073b0:	4433      	add	r3, r6
 80073b2:	f023 0303 	bic.w	r3, r3, #3
 80073b6:	3304      	adds	r3, #4
 80073b8:	18d3      	adds	r3, r2, r3
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073be:	9b05      	ldr	r3, [sp, #20]
 80073c0:	4417      	add	r7, r2
 80073c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073c4:	4416      	add	r6, r2
 80073c6:	9a08      	ldr	r2, [sp, #32]
 80073c8:	3301      	adds	r3, #1
 80073ca:	4293      	cmp	r3, r2
 80073cc:	9305      	str	r3, [sp, #20]
 80073ce:	d1bc      	bne.n	800734a <forward_dense+0xde>
 80073d0:	b011      	add	sp, #68	; 0x44
 80073d2:	ecbd 8b10 	vpop	{d8-d15}
 80073d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073da:	2300      	movs	r3, #0
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	deff      	udf	#255	; 0xff
 80073e0:	6853      	ldr	r3, [r2, #4]
 80073e2:	deff      	udf	#255	; 0xff
 80073e4:	2300      	movs	r3, #0
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	deff      	udf	#255	; 0xff
 80073ea:	b1a4      	cbz	r4, 8007416 <forward_dense+0x1aa>
 80073ec:	f8d4 c000 	ldr.w	ip, [r4]
 80073f0:	9803      	ldr	r0, [sp, #12]
 80073f2:	9600      	str	r6, [sp, #0]
 80073f4:	463b      	mov	r3, r7
 80073f6:	4629      	mov	r1, r5
 80073f8:	4652      	mov	r2, sl
 80073fa:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80073fe:	f7fe fcef 	bl	8005de0 <ai_dict4_dot_array_f32>
 8007402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007404:	f84b 3b04 	str.w	r3, [fp], #4
 8007408:	45c3      	cmp	fp, r8
 800740a:	f104 0404 	add.w	r4, r4, #4
 800740e:	444d      	add	r5, r9
 8007410:	d2c9      	bcs.n	80073a6 <forward_dense+0x13a>
 8007412:	2c00      	cmp	r4, #0
 8007414:	d1ea      	bne.n	80073ec <forward_dense+0x180>
 8007416:	4634      	mov	r4, r6
 8007418:	4646      	mov	r6, r8
 800741a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800741e:	9400      	str	r4, [sp, #0]
 8007420:	463b      	mov	r3, r7
 8007422:	4629      	mov	r1, r5
 8007424:	4652      	mov	r2, sl
 8007426:	4640      	mov	r0, r8
 8007428:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800742c:	f7fe fcd8 	bl	8005de0 <ai_dict4_dot_array_f32>
 8007430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007432:	f84b 3b04 	str.w	r3, [fp], #4
 8007436:	45b3      	cmp	fp, r6
 8007438:	444d      	add	r5, r9
 800743a:	d3f0      	bcc.n	800741e <forward_dense+0x1b2>
 800743c:	46a0      	mov	r8, r4
 800743e:	e7b5      	b.n	80073ac <forward_dense+0x140>
 8007440:	9107      	str	r1, [sp, #28]
 8007442:	e73d      	b.n	80072c0 <forward_dense+0x54>
 8007444:	9307      	str	r3, [sp, #28]
 8007446:	e73b      	b.n	80072c0 <forward_dense+0x54>
 8007448:	42b3      	cmp	r3, r6
 800744a:	d2b7      	bcs.n	80073bc <forward_dense+0x150>
 800744c:	4618      	mov	r0, r3
 800744e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007450:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8007454:	eb07 0c03 	add.w	ip, r7, r3
 8007458:	469e      	mov	lr, r3
 800745a:	2c00      	cmp	r4, #0
 800745c:	f000 80ff 	beq.w	800765e <forward_dense+0x3f2>
 8007460:	f1b8 0f0f 	cmp.w	r8, #15
 8007464:	edd4 fa00 	vldr	s31, [r4]
 8007468:	eddf 6a84 	vldr	s13, [pc, #528]	; 800767c <forward_dense+0x410>
 800746c:	f104 0404 	add.w	r4, r4, #4
 8007470:	f240 80fd 	bls.w	800766e <forward_dense+0x402>
 8007474:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007478:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800747c:	4641      	mov	r1, r8
 800747e:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8007482:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8007486:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800748a:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800748e:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8007492:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8007496:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800749a:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800749e:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 80074a2:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 80074a6:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 80074aa:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 80074ae:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 80074b2:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 80074b6:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 80074ba:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 80074be:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 80074c2:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 80074c6:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 80074ca:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 80074ce:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 80074d2:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 80074d6:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 80074da:	ed12 4a04 	vldr	s8, [r2, #-16]
 80074de:	ed53 4a04 	vldr	s9, [r3, #-16]
 80074e2:	ed13 5a03 	vldr	s10, [r3, #-12]
 80074e6:	ed52 5a03 	vldr	s11, [r2, #-12]
 80074ea:	ed13 6a02 	vldr	s12, [r3, #-8]
 80074ee:	ed12 7a02 	vldr	s14, [r2, #-8]
 80074f2:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80074f6:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80074fa:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80074fe:	3910      	subs	r1, #16
 8007500:	290f      	cmp	r1, #15
 8007502:	ed52 ea01 	vldr	s29, [r2, #-4]
 8007506:	ed13 ea01 	vldr	s28, [r3, #-4]
 800750a:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800750e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007512:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007516:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800751a:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800751e:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8007522:	eee9 7a89 	vfma.f32	s15, s19, s18
 8007526:	eee8 7a88 	vfma.f32	s15, s17, s16
 800752a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800752e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007532:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007536:	eee3 7a23 	vfma.f32	s15, s6, s7
 800753a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800753e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007542:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007546:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800754a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800754e:	d896      	bhi.n	800747e <forward_dense+0x212>
 8007550:	eb05 010e 	add.w	r1, r5, lr
 8007554:	465b      	mov	r3, fp
 8007556:	4662      	mov	r2, ip
 8007558:	2b00      	cmp	r3, #0
 800755a:	d075      	beq.n	8007648 <forward_dense+0x3dc>
 800755c:	ed91 7a00 	vldr	s14, [r1]
 8007560:	edd2 7a00 	vldr	s15, [r2]
 8007564:	2b01      	cmp	r3, #1
 8007566:	eee7 6a27 	vfma.f32	s13, s14, s15
 800756a:	d06d      	beq.n	8007648 <forward_dense+0x3dc>
 800756c:	ed91 7a01 	vldr	s14, [r1, #4]
 8007570:	edd2 7a01 	vldr	s15, [r2, #4]
 8007574:	2b02      	cmp	r3, #2
 8007576:	eee7 6a27 	vfma.f32	s13, s14, s15
 800757a:	d065      	beq.n	8007648 <forward_dense+0x3dc>
 800757c:	ed91 7a02 	vldr	s14, [r1, #8]
 8007580:	edd2 7a02 	vldr	s15, [r2, #8]
 8007584:	2b03      	cmp	r3, #3
 8007586:	eee7 6a27 	vfma.f32	s13, s14, s15
 800758a:	d05d      	beq.n	8007648 <forward_dense+0x3dc>
 800758c:	ed91 7a03 	vldr	s14, [r1, #12]
 8007590:	edd2 7a03 	vldr	s15, [r2, #12]
 8007594:	2b04      	cmp	r3, #4
 8007596:	eee7 6a27 	vfma.f32	s13, s14, s15
 800759a:	d055      	beq.n	8007648 <forward_dense+0x3dc>
 800759c:	ed91 7a04 	vldr	s14, [r1, #16]
 80075a0:	edd2 7a04 	vldr	s15, [r2, #16]
 80075a4:	2b05      	cmp	r3, #5
 80075a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80075aa:	d04d      	beq.n	8007648 <forward_dense+0x3dc>
 80075ac:	ed91 7a05 	vldr	s14, [r1, #20]
 80075b0:	edd2 7a05 	vldr	s15, [r2, #20]
 80075b4:	2b06      	cmp	r3, #6
 80075b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80075ba:	d045      	beq.n	8007648 <forward_dense+0x3dc>
 80075bc:	ed91 7a06 	vldr	s14, [r1, #24]
 80075c0:	edd2 7a06 	vldr	s15, [r2, #24]
 80075c4:	2b07      	cmp	r3, #7
 80075c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80075ca:	d03d      	beq.n	8007648 <forward_dense+0x3dc>
 80075cc:	ed91 7a07 	vldr	s14, [r1, #28]
 80075d0:	edd2 7a07 	vldr	s15, [r2, #28]
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80075da:	d035      	beq.n	8007648 <forward_dense+0x3dc>
 80075dc:	ed91 7a08 	vldr	s14, [r1, #32]
 80075e0:	edd2 7a08 	vldr	s15, [r2, #32]
 80075e4:	2b09      	cmp	r3, #9
 80075e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80075ea:	d02d      	beq.n	8007648 <forward_dense+0x3dc>
 80075ec:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80075f0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80075f4:	2b0a      	cmp	r3, #10
 80075f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80075fa:	d025      	beq.n	8007648 <forward_dense+0x3dc>
 80075fc:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8007600:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007604:	2b0b      	cmp	r3, #11
 8007606:	eee7 6a27 	vfma.f32	s13, s14, s15
 800760a:	d01d      	beq.n	8007648 <forward_dense+0x3dc>
 800760c:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8007610:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007614:	2b0c      	cmp	r3, #12
 8007616:	eee7 6a27 	vfma.f32	s13, s14, s15
 800761a:	d015      	beq.n	8007648 <forward_dense+0x3dc>
 800761c:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8007620:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007624:	2b0d      	cmp	r3, #13
 8007626:	eee7 6a27 	vfma.f32	s13, s14, s15
 800762a:	d00d      	beq.n	8007648 <forward_dense+0x3dc>
 800762c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8007630:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8007634:	2b0e      	cmp	r3, #14
 8007636:	eee7 6a27 	vfma.f32	s13, s14, s15
 800763a:	d005      	beq.n	8007648 <forward_dense+0x3dc>
 800763c:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8007640:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007644:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007648:	444d      	add	r5, r9
 800764a:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800764e:	ece0 6a01 	vstmia	r0!, {s13}
 8007652:	42b0      	cmp	r0, r6
 8007654:	f4bf aeaa 	bcs.w	80073ac <forward_dense+0x140>
 8007658:	2c00      	cmp	r4, #0
 800765a:	f47f af01 	bne.w	8007460 <forward_dense+0x1f4>
 800765e:	f1b8 0f0f 	cmp.w	r8, #15
 8007662:	eef0 fa6a 	vmov.f32	s31, s21
 8007666:	eddf 6a05 	vldr	s13, [pc, #20]	; 800767c <forward_dense+0x410>
 800766a:	f63f af03 	bhi.w	8007474 <forward_dense+0x208>
 800766e:	4643      	mov	r3, r8
 8007670:	4629      	mov	r1, r5
 8007672:	463a      	mov	r2, r7
 8007674:	e770      	b.n	8007558 <forward_dense+0x2ec>
 8007676:	461c      	mov	r4, r3
 8007678:	e670      	b.n	800735c <forward_dense+0xf0>
 800767a:	bf00      	nop
 800767c:	00000000 	.word	0x00000000
 8007680:	4634      	mov	r4, r6
 8007682:	4646      	mov	r6, r8
 8007684:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007688:	9400      	str	r4, [sp, #0]
 800768a:	463b      	mov	r3, r7
 800768c:	4629      	mov	r1, r5
 800768e:	4652      	mov	r2, sl
 8007690:	4640      	mov	r0, r8
 8007692:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8007696:	f7fe fad5 	bl	8005c44 <ai_dict8_dot_array_f32>
 800769a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800769c:	f84b 3b04 	str.w	r3, [fp], #4
 80076a0:	455e      	cmp	r6, fp
 80076a2:	444d      	add	r5, r9
 80076a4:	d8f0      	bhi.n	8007688 <forward_dense+0x41c>
 80076a6:	46a0      	mov	r8, r4
 80076a8:	e680      	b.n	80073ac <forward_dense+0x140>
 80076aa:	2300      	movs	r3, #0
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	deff      	udf	#255	; 0xff
 80076b0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80076b4:	2f00      	cmp	r7, #0
 80076b6:	f43f ae29 	beq.w	800730c <forward_dense+0xa0>
 80076ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076be:	f000 fc4f 	bl	8007f60 <ai_array_get_byte_size>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4602      	mov	r2, r0
 80076c6:	4651      	mov	r1, sl
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fc9d 	bl	8008008 <memcpy>
 80076ce:	4682      	mov	sl, r0
 80076d0:	e61c      	b.n	800730c <forward_dense+0xa0>
 80076d2:	2300      	movs	r3, #0
 80076d4:	9307      	str	r3, [sp, #28]
 80076d6:	e5f3      	b.n	80072c0 <forward_dense+0x54>
 80076d8:	9306      	str	r3, [sp, #24]
 80076da:	e5e4      	b.n	80072a6 <forward_dense+0x3a>

080076dc <nl_func_relu_array_f32>:
 80076dc:	b410      	push	{r4}
 80076de:	698c      	ldr	r4, [r1, #24]
 80076e0:	6981      	ldr	r1, [r0, #24]
 80076e2:	68a3      	ldr	r3, [r4, #8]
 80076e4:	6889      	ldr	r1, [r1, #8]
 80076e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80076ea:	3a01      	subs	r2, #1
 80076ec:	0092      	lsls	r2, r2, #2
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	d216      	bcs.n	8007720 <nl_func_relu_array_f32+0x44>
 80076f2:	3204      	adds	r2, #4
 80076f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007728 <nl_func_relu_array_f32+0x4c>
 80076f8:	4411      	add	r1, r2
 80076fa:	3304      	adds	r3, #4
 80076fc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007708:	bfb8      	it	lt
 800770a:	eef0 7a47 	vmovlt.f32	s15, s14
 800770e:	ed61 7a01 	vstmdb	r1!, {s15}
 8007712:	68a0      	ldr	r0, [r4, #8]
 8007714:	f1a3 0208 	sub.w	r2, r3, #8
 8007718:	4290      	cmp	r0, r2
 800771a:	f1a3 0304 	sub.w	r3, r3, #4
 800771e:	d9ed      	bls.n	80076fc <nl_func_relu_array_f32+0x20>
 8007720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	00000000 	.word	0x00000000

0800772c <nl_func_sm_array_f32>:
 800772c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007730:	ed2d 8b04 	vpush	{d8-d9}
 8007734:	b089      	sub	sp, #36	; 0x24
 8007736:	698f      	ldr	r7, [r1, #24]
 8007738:	6984      	ldr	r4, [r0, #24]
 800773a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800773e:	68bd      	ldr	r5, [r7, #8]
 8007740:	9402      	str	r4, [sp, #8]
 8007742:	4626      	mov	r6, r4
 8007744:	4696      	mov	lr, r2
 8007746:	eba2 020c 	sub.w	r2, r2, ip
 800774a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800774e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	68b6      	ldr	r6, [r6, #8]
 8007754:	ebae 0e04 	sub.w	lr, lr, r4
 8007758:	4295      	cmp	r5, r2
 800775a:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800775e:	d354      	bcc.n	800780a <nl_func_sm_array_f32+0xde>
 8007760:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007764:	f1cc 0200 	rsb	r2, ip, #0
 8007768:	00a4      	lsls	r4, r4, #2
 800776a:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800776e:	9303      	str	r3, [sp, #12]
 8007770:	9204      	str	r2, [sp, #16]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4262      	negs	r2, r4
 8007776:	9205      	str	r2, [sp, #20]
 8007778:	9301      	str	r3, [sp, #4]
 800777a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800777e:	9b02      	ldr	r3, [sp, #8]
 8007780:	9a07      	ldr	r2, [sp, #28]
 8007782:	60bd      	str	r5, [r7, #8]
 8007784:	609e      	str	r6, [r3, #8]
 8007786:	9b06      	ldr	r3, [sp, #24]
 8007788:	6992      	ldr	r2, [r2, #24]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	6894      	ldr	r4, [r2, #8]
 800778e:	9a03      	ldr	r2, [sp, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	2a01      	cmp	r2, #1
 8007794:	ed93 8a00 	vldr	s16, [r3]
 8007798:	d940      	bls.n	800781c <nl_func_sm_array_f32+0xf0>
 800779a:	9901      	ldr	r1, [sp, #4]
 800779c:	1d1a      	adds	r2, r3, #4
 800779e:	eb03 0b01 	add.w	fp, r3, r1
 80077a2:	ecf2 7a01 	vldmia	r2!, {s15}
 80077a6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80077aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ae:	bfb8      	it	lt
 80077b0:	eeb0 8a67 	vmovlt.f32	s16, s15
 80077b4:	4593      	cmp	fp, r2
 80077b6:	d1f4      	bne.n	80077a2 <nl_func_sm_array_f32+0x76>
 80077b8:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8007828 <nl_func_sm_array_f32+0xfc>
 80077bc:	469a      	mov	sl, r3
 80077be:	46a1      	mov	r9, r4
 80077c0:	46a0      	mov	r8, r4
 80077c2:	ecba 0a01 	vldmia	sl!, {s0}
 80077c6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80077ca:	f003 fab1 	bl	800ad30 <expf>
 80077ce:	45d3      	cmp	fp, sl
 80077d0:	eca8 0a01 	vstmia	r8!, {s0}
 80077d4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80077d8:	d1f3      	bne.n	80077c2 <nl_func_sm_array_f32+0x96>
 80077da:	eef5 8a40 	vcmp.f32	s17, #0.0
 80077de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e2:	d00b      	beq.n	80077fc <nl_func_sm_array_f32+0xd0>
 80077e4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80077e8:	9b01      	ldr	r3, [sp, #4]
 80077ea:	441c      	add	r4, r3
 80077ec:	edd9 7a00 	vldr	s15, [r9]
 80077f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077f4:	ece9 7a01 	vstmia	r9!, {s15}
 80077f8:	454c      	cmp	r4, r9
 80077fa:	d1f7      	bne.n	80077ec <nl_func_sm_array_f32+0xc0>
 80077fc:	9b04      	ldr	r3, [sp, #16]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	441d      	add	r5, r3
 8007802:	9b05      	ldr	r3, [sp, #20]
 8007804:	42aa      	cmp	r2, r5
 8007806:	441e      	add	r6, r3
 8007808:	d9b9      	bls.n	800777e <nl_func_sm_array_f32+0x52>
 800780a:	60ba      	str	r2, [r7, #8]
 800780c:	9a02      	ldr	r2, [sp, #8]
 800780e:	68d3      	ldr	r3, [r2, #12]
 8007810:	6093      	str	r3, [r2, #8]
 8007812:	b009      	add	sp, #36	; 0x24
 8007814:	ecbd 8b04 	vpop	{d8-d9}
 8007818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781c:	2a00      	cmp	r2, #0
 800781e:	d0ed      	beq.n	80077fc <nl_func_sm_array_f32+0xd0>
 8007820:	9a01      	ldr	r2, [sp, #4]
 8007822:	eb03 0b02 	add.w	fp, r3, r2
 8007826:	e7c7      	b.n	80077b8 <nl_func_sm_array_f32+0x8c>
 8007828:	00000000 	.word	0x00000000

0800782c <nl_func_relu_generic_array_f32>:
 800782c:	b430      	push	{r4, r5}
 800782e:	6989      	ldr	r1, [r1, #24]
 8007830:	6980      	ldr	r0, [r0, #24]
 8007832:	edd3 6a02 	vldr	s13, [r3, #8]
 8007836:	688c      	ldr	r4, [r1, #8]
 8007838:	6880      	ldr	r0, [r0, #8]
 800783a:	ed93 7a00 	vldr	s14, [r3]
 800783e:	ed93 6a01 	vldr	s12, [r3, #4]
 8007842:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007846:	3a01      	subs	r2, #1
 8007848:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800784c:	0092      	lsls	r2, r2, #2
 800784e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007852:	4410      	add	r0, r2
 8007854:	4422      	add	r2, r4
 8007856:	d421      	bmi.n	800789c <nl_func_relu_generic_array_f32+0x70>
 8007858:	4294      	cmp	r4, r2
 800785a:	d83d      	bhi.n	80078d8 <nl_func_relu_generic_array_f32+0xac>
 800785c:	1d13      	adds	r3, r2, #4
 800785e:	1d02      	adds	r2, r0, #4
 8007860:	e010      	b.n	8007884 <nl_func_relu_generic_array_f32+0x58>
 8007862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800786a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800786e:	d501      	bpl.n	8007874 <nl_func_relu_generic_array_f32+0x48>
 8007870:	ee65 7a86 	vmul.f32	s15, s11, s12
 8007874:	ed62 7a01 	vstmdb	r2!, {s15}
 8007878:	6888      	ldr	r0, [r1, #8]
 800787a:	f1a3 0408 	sub.w	r4, r3, #8
 800787e:	4284      	cmp	r4, r0
 8007880:	462b      	mov	r3, r5
 8007882:	d329      	bcc.n	80078d8 <nl_func_relu_generic_array_f32+0xac>
 8007884:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007888:	eef4 7ae6 	vcmpe.f32	s15, s13
 800788c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007890:	f1a3 0504 	sub.w	r5, r3, #4
 8007894:	d4e5      	bmi.n	8007862 <nl_func_relu_generic_array_f32+0x36>
 8007896:	eef0 7a66 	vmov.f32	s15, s13
 800789a:	e7eb      	b.n	8007874 <nl_func_relu_generic_array_f32+0x48>
 800789c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80078a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a4:	d01a      	beq.n	80078dc <nl_func_relu_generic_array_f32+0xb0>
 80078a6:	4294      	cmp	r4, r2
 80078a8:	d816      	bhi.n	80078d8 <nl_func_relu_generic_array_f32+0xac>
 80078aa:	1d13      	adds	r3, r2, #4
 80078ac:	1d02      	adds	r2, r0, #4
 80078ae:	ed53 7a01 	vldr	s15, [r3, #-4]
 80078b2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80078b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ba:	f1a3 0408 	sub.w	r4, r3, #8
 80078be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c2:	f1a3 0004 	sub.w	r0, r3, #4
 80078c6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80078ca:	4623      	mov	r3, r4
 80078cc:	d51e      	bpl.n	800790c <nl_func_relu_generic_array_f32+0xe0>
 80078ce:	ed62 6a01 	vstmdb	r2!, {s13}
 80078d2:	688b      	ldr	r3, [r1, #8]
 80078d4:	42a3      	cmp	r3, r4
 80078d6:	d91e      	bls.n	8007916 <nl_func_relu_generic_array_f32+0xea>
 80078d8:	bc30      	pop	{r4, r5}
 80078da:	4770      	bx	lr
 80078dc:	4294      	cmp	r4, r2
 80078de:	d8fb      	bhi.n	80078d8 <nl_func_relu_generic_array_f32+0xac>
 80078e0:	1d13      	adds	r3, r2, #4
 80078e2:	2500      	movs	r5, #0
 80078e4:	1d02      	adds	r2, r0, #4
 80078e6:	ed53 7a01 	vldr	s15, [r3, #-4]
 80078ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ee:	f1a3 0408 	sub.w	r4, r3, #8
 80078f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f6:	f1a3 0004 	sub.w	r0, r3, #4
 80078fa:	4623      	mov	r3, r4
 80078fc:	db0d      	blt.n	800791a <nl_func_relu_generic_array_f32+0xee>
 80078fe:	ed62 7a01 	vstmdb	r2!, {s15}
 8007902:	688b      	ldr	r3, [r1, #8]
 8007904:	42a3      	cmp	r3, r4
 8007906:	d8e7      	bhi.n	80078d8 <nl_func_relu_generic_array_f32+0xac>
 8007908:	4603      	mov	r3, r0
 800790a:	e7ec      	b.n	80078e6 <nl_func_relu_generic_array_f32+0xba>
 800790c:	ed62 7a01 	vstmdb	r2!, {s15}
 8007910:	688c      	ldr	r4, [r1, #8]
 8007912:	429c      	cmp	r4, r3
 8007914:	d8e0      	bhi.n	80078d8 <nl_func_relu_generic_array_f32+0xac>
 8007916:	4603      	mov	r3, r0
 8007918:	e7c9      	b.n	80078ae <nl_func_relu_generic_array_f32+0x82>
 800791a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800791e:	688c      	ldr	r4, [r1, #8]
 8007920:	429c      	cmp	r4, r3
 8007922:	d8d9      	bhi.n	80078d8 <nl_func_relu_generic_array_f32+0xac>
 8007924:	4603      	mov	r3, r0
 8007926:	e7de      	b.n	80078e6 <nl_func_relu_generic_array_f32+0xba>

08007928 <forward_relu>:
 8007928:	6982      	ldr	r2, [r0, #24]
 800792a:	8813      	ldrh	r3, [r2, #0]
 800792c:	b333      	cbz	r3, 800797c <forward_relu+0x54>
 800792e:	6852      	ldr	r2, [r2, #4]
 8007930:	6851      	ldr	r1, [r2, #4]
 8007932:	b101      	cbz	r1, 8007936 <forward_relu+0xe>
 8007934:	6809      	ldr	r1, [r1, #0]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d91d      	bls.n	8007976 <forward_relu+0x4e>
 800793a:	b4f0      	push	{r4, r5, r6, r7}
 800793c:	6917      	ldr	r7, [r2, #16]
 800793e:	b107      	cbz	r7, 8007942 <forward_relu+0x1a>
 8007940:	683f      	ldr	r7, [r7, #0]
 8007942:	688c      	ldr	r4, [r1, #8]
 8007944:	69c3      	ldr	r3, [r0, #28]
 8007946:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800794a:	2b00      	cmp	r3, #0
 800794c:	d044      	beq.n	80079d8 <forward_relu+0xb0>
 800794e:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8007952:	2d01      	cmp	r5, #1
 8007954:	d014      	beq.n	8007980 <forward_relu+0x58>
 8007956:	2c00      	cmp	r4, #0
 8007958:	d074      	beq.n	8007a44 <forward_relu+0x11c>
 800795a:	68ce      	ldr	r6, [r1, #12]
 800795c:	2201      	movs	r2, #1
 800795e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8007962:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007966:	42a6      	cmp	r6, r4
 8007968:	fb05 f202 	mul.w	r2, r5, r2
 800796c:	d1f9      	bne.n	8007962 <forward_relu+0x3a>
 800796e:	4638      	mov	r0, r7
 8007970:	bcf0      	pop	{r4, r5, r6, r7}
 8007972:	f7ff bf5b 	b.w	800782c <nl_func_relu_generic_array_f32>
 8007976:	2300      	movs	r3, #0
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	deff      	udf	#255	; 0xff
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	deff      	udf	#255	; 0xff
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	6988      	ldr	r0, [r1, #24]
 8007984:	6896      	ldr	r6, [r2, #8]
 8007986:	ed93 7a00 	vldr	s14, [r3]
 800798a:	6882      	ldr	r2, [r0, #8]
 800798c:	b184      	cbz	r4, 80079b0 <forward_relu+0x88>
 800798e:	68cf      	ldr	r7, [r1, #12]
 8007990:	462b      	mov	r3, r5
 8007992:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8007996:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800799a:	42a7      	cmp	r7, r4
 800799c:	fb01 f303 	mul.w	r3, r1, r3
 80079a0:	d1f9      	bne.n	8007996 <forward_relu+0x6e>
 80079a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079a6:	3b01      	subs	r3, #1
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	18d2      	adds	r2, r2, r3
 80079ac:	441e      	add	r6, r3
 80079ae:	d23f      	bcs.n	8007a30 <forward_relu+0x108>
 80079b0:	1d13      	adds	r3, r2, #4
 80079b2:	2500      	movs	r5, #0
 80079b4:	1d32      	adds	r2, r6, #4
 80079b6:	ed53 7a01 	vldr	s15, [r3, #-4]
 80079ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c2:	f1a3 0104 	sub.w	r1, r3, #4
 80079c6:	d835      	bhi.n	8007a34 <forward_relu+0x10c>
 80079c8:	ed62 7a01 	vstmdb	r2!, {s15}
 80079cc:	6884      	ldr	r4, [r0, #8]
 80079ce:	3b08      	subs	r3, #8
 80079d0:	429c      	cmp	r4, r3
 80079d2:	d82d      	bhi.n	8007a30 <forward_relu+0x108>
 80079d4:	460b      	mov	r3, r1
 80079d6:	e7ee      	b.n	80079b6 <forward_relu+0x8e>
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	698d      	ldr	r5, [r1, #24]
 80079dc:	6898      	ldr	r0, [r3, #8]
 80079de:	68ab      	ldr	r3, [r5, #8]
 80079e0:	b184      	cbz	r4, 8007a04 <forward_relu+0xdc>
 80079e2:	68ce      	ldr	r6, [r1, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80079ea:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80079ee:	42a6      	cmp	r6, r4
 80079f0:	fb01 f202 	mul.w	r2, r1, r2
 80079f4:	d1f9      	bne.n	80079ea <forward_relu+0xc2>
 80079f6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80079fa:	3a01      	subs	r2, #1
 80079fc:	0092      	lsls	r2, r2, #2
 80079fe:	189b      	adds	r3, r3, r2
 8007a00:	4410      	add	r0, r2
 8007a02:	d215      	bcs.n	8007a30 <forward_relu+0x108>
 8007a04:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007a48 <forward_relu+0x120>
 8007a08:	3304      	adds	r3, #4
 8007a0a:	1d01      	adds	r1, r0, #4
 8007a0c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007a10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a18:	bfb8      	it	lt
 8007a1a:	eef0 7a47 	vmovlt.f32	s15, s14
 8007a1e:	ed61 7a01 	vstmdb	r1!, {s15}
 8007a22:	68a8      	ldr	r0, [r5, #8]
 8007a24:	f1a3 0208 	sub.w	r2, r3, #8
 8007a28:	4290      	cmp	r0, r2
 8007a2a:	f1a3 0304 	sub.w	r3, r3, #4
 8007a2e:	d9ed      	bls.n	8007a0c <forward_relu+0xe4>
 8007a30:	bcf0      	pop	{r4, r5, r6, r7}
 8007a32:	4770      	bx	lr
 8007a34:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007a38:	6884      	ldr	r4, [r0, #8]
 8007a3a:	3b08      	subs	r3, #8
 8007a3c:	429c      	cmp	r4, r3
 8007a3e:	d8f7      	bhi.n	8007a30 <forward_relu+0x108>
 8007a40:	460b      	mov	r3, r1
 8007a42:	e7b8      	b.n	80079b6 <forward_relu+0x8e>
 8007a44:	2201      	movs	r2, #1
 8007a46:	e792      	b.n	800796e <forward_relu+0x46>
 8007a48:	00000000 	.word	0x00000000

08007a4c <forward_sm>:
 8007a4c:	6982      	ldr	r2, [r0, #24]
 8007a4e:	8813      	ldrh	r3, [r2, #0]
 8007a50:	b32b      	cbz	r3, 8007a9e <forward_sm+0x52>
 8007a52:	6852      	ldr	r2, [r2, #4]
 8007a54:	6851      	ldr	r1, [r2, #4]
 8007a56:	b101      	cbz	r1, 8007a5a <forward_sm+0xe>
 8007a58:	6809      	ldr	r1, [r1, #0]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d91c      	bls.n	8007a98 <forward_sm+0x4c>
 8007a5e:	6913      	ldr	r3, [r2, #16]
 8007a60:	b1c3      	cbz	r3, 8007a94 <forward_sm+0x48>
 8007a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	688c      	ldr	r4, [r1, #8]
 8007a68:	68c3      	ldr	r3, [r0, #12]
 8007a6a:	68ce      	ldr	r6, [r1, #12]
 8007a6c:	685f      	ldr	r7, [r3, #4]
 8007a6e:	6873      	ldr	r3, [r6, #4]
 8007a70:	0a24      	lsrs	r4, r4, #8
 8007a72:	b083      	sub	sp, #12
 8007a74:	d015      	beq.n	8007aa2 <forward_sm+0x56>
 8007a76:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a80:	42a6      	cmp	r6, r4
 8007a82:	fb05 f202 	mul.w	r2, r5, r2
 8007a86:	d1f9      	bne.n	8007a7c <forward_sm+0x30>
 8007a88:	e9cd 3700 	strd	r3, r7, [sp]
 8007a8c:	f7ff fe4e 	bl	800772c <nl_func_sm_array_f32>
 8007a90:	b003      	add	sp, #12
 8007a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	deff      	udf	#255	; 0xff
 8007a98:	2300      	movs	r3, #0
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	deff      	udf	#255	; 0xff
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	deff      	udf	#255	; 0xff
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	e9cd 3700 	strd	r3, r7, [sp]
 8007aa8:	f7ff fe40 	bl	800772c <nl_func_sm_array_f32>
 8007aac:	b003      	add	sp, #12
 8007aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ab0 <pool_func_mp_array_f32>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	b093      	sub	sp, #76	; 0x4c
 8007ab6:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8007aba:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8007abc:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8007ac0:	68a8      	ldr	r0, [r5, #8]
 8007ac2:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 8007ac6:	9508      	str	r5, [sp, #32]
 8007ac8:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 8007acc:	9002      	str	r0, [sp, #8]
 8007ace:	950d      	str	r5, [sp, #52]	; 0x34
 8007ad0:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 8007ad4:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8007ad8:	9004      	str	r0, [sp, #16]
 8007ada:	9506      	str	r5, [sp, #24]
 8007adc:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8007ae0:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8007ae4:	9009      	str	r0, [sp, #36]	; 0x24
 8007ae6:	950b      	str	r5, [sp, #44]	; 0x2c
 8007ae8:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8007aec:	9200      	str	r2, [sp, #0]
 8007aee:	468a      	mov	sl, r1
 8007af0:	4699      	mov	r9, r3
 8007af2:	b95c      	cbnz	r4, 8007b0c <pool_func_mp_array_f32+0x5c>
 8007af4:	b950      	cbnz	r0, 8007b0c <pool_func_mp_array_f32+0x5c>
 8007af6:	9b04      	ldr	r3, [sp, #16]
 8007af8:	1a5a      	subs	r2, r3, r1
 8007afa:	9b06      	ldr	r3, [sp, #24]
 8007afc:	9908      	ldr	r1, [sp, #32]
 8007afe:	3a01      	subs	r2, #1
 8007b00:	3b01      	subs	r3, #1
 8007b02:	fb13 2301 	smlabb	r3, r3, r1, r2
 8007b06:	041a      	lsls	r2, r3, #16
 8007b08:	f100 809b 	bmi.w	8007c42 <pool_func_mp_array_f32+0x192>
 8007b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 808b 	beq.w	8007c2a <pool_func_mp_array_f32+0x17a>
 8007b14:	9b06      	ldr	r3, [sp, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 8087 	beq.w	8007c2a <pool_func_mp_array_f32+0x17a>
 8007b1c:	f1b9 0f00 	cmp.w	r9, #0
 8007b20:	f000 8083 	beq.w	8007c2a <pool_func_mp_array_f32+0x17a>
 8007b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b26:	1b1c      	subs	r4, r3, r4
 8007b28:	9b04      	ldr	r3, [sp, #16]
 8007b2a:	1a1b      	subs	r3, r3, r0
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	4240      	negs	r0, r0
 8007b30:	2200      	movs	r2, #0
 8007b32:	b2a1      	uxth	r1, r4
 8007b34:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b36:	b283      	uxth	r3, r0
 8007b38:	920e      	str	r2, [sp, #56]	; 0x38
 8007b3a:	910c      	str	r1, [sp, #48]	; 0x30
 8007b3c:	9310      	str	r3, [sp, #64]	; 0x40
 8007b3e:	9c06      	ldr	r4, [sp, #24]
 8007b40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b44:	fb02 f204 	mul.w	r2, r2, r4
 8007b48:	1acb      	subs	r3, r1, r3
 8007b4a:	920a      	str	r2, [sp, #40]	; 0x28
 8007b4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b4e:	9205      	str	r2, [sp, #20]
 8007b50:	2000      	movs	r0, #0
 8007b52:	b21b      	sxth	r3, r3
 8007b54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b56:	9303      	str	r3, [sp, #12]
 8007b58:	9007      	str	r0, [sp, #28]
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	fa0f f881 	sxth.w	r8, r1
 8007b60:	9204      	str	r2, [sp, #16]
 8007b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b64:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8007b68:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f04f 0e00 	mov.w	lr, #0
 8007b72:	fb09 f303 	mul.w	r3, r9, r3
 8007b76:	9301      	str	r3, [sp, #4]
 8007b78:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8007b7c:	4675      	mov	r5, lr
 8007b7e:	9903      	ldr	r1, [sp, #12]
 8007b80:	eddf 7a78 	vldr	s15, [pc, #480]	; 8007d64 <pool_func_mp_array_f32+0x2b4>
 8007b84:	4588      	cmp	r8, r1
 8007b86:	dd24      	ble.n	8007bd2 <pool_func_mp_array_f32+0x122>
 8007b88:	4564      	cmp	r4, ip
 8007b8a:	dd1e      	ble.n	8007bca <pool_func_mp_array_f32+0x11a>
 8007b8c:	2900      	cmp	r1, #0
 8007b8e:	fb0a f601 	mul.w	r6, sl, r1
 8007b92:	db1a      	blt.n	8007bca <pool_func_mp_array_f32+0x11a>
 8007b94:	9b00      	ldr	r3, [sp, #0]
 8007b96:	4299      	cmp	r1, r3
 8007b98:	da17      	bge.n	8007bca <pool_func_mp_array_f32+0x11a>
 8007b9a:	f1bc 0f00 	cmp.w	ip, #0
 8007b9e:	4663      	mov	r3, ip
 8007ba0:	db46      	blt.n	8007c30 <pool_func_mp_array_f32+0x180>
 8007ba2:	18f2      	adds	r2, r6, r3
 8007ba4:	fb09 5202 	mla	r2, r9, r2, r5
 8007ba8:	1c58      	adds	r0, r3, #1
 8007baa:	459a      	cmp	sl, r3
 8007bac:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8007bb0:	b203      	sxth	r3, r0
 8007bb2:	dd08      	ble.n	8007bc6 <pool_func_mp_array_f32+0x116>
 8007bb4:	ed92 7a00 	vldr	s14, [r2]
 8007bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc0:	bfb8      	it	lt
 8007bc2:	eef0 7a47 	vmovlt.f32	s15, s14
 8007bc6:	429c      	cmp	r4, r3
 8007bc8:	dceb      	bgt.n	8007ba2 <pool_func_mp_array_f32+0xf2>
 8007bca:	3101      	adds	r1, #1
 8007bcc:	b209      	sxth	r1, r1
 8007bce:	4588      	cmp	r8, r1
 8007bd0:	dcda      	bgt.n	8007b88 <pool_func_mp_array_f32+0xd8>
 8007bd2:	9b01      	ldr	r3, [sp, #4]
 8007bd4:	f10e 0e01 	add.w	lr, lr, #1
 8007bd8:	441d      	add	r5, r3
 8007bda:	9b02      	ldr	r3, [sp, #8]
 8007bdc:	fa0f fe8e 	sxth.w	lr, lr
 8007be0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007be4:	45ce      	cmp	lr, r9
 8007be6:	edc5 7a00 	vstr	s15, [r5]
 8007bea:	4675      	mov	r5, lr
 8007bec:	dbc7      	blt.n	8007b7e <pool_func_mp_array_f32+0xce>
 8007bee:	9b07      	ldr	r3, [sp, #28]
 8007bf0:	9808      	ldr	r0, [sp, #32]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	b219      	sxth	r1, r3
 8007bf6:	9b05      	ldr	r3, [sp, #20]
 8007bf8:	9107      	str	r1, [sp, #28]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4402      	add	r2, r0
 8007bfe:	9b04      	ldr	r3, [sp, #16]
 8007c00:	b292      	uxth	r2, r2
 8007c02:	9205      	str	r2, [sp, #20]
 8007c04:	9a06      	ldr	r2, [sp, #24]
 8007c06:	4403      	add	r3, r0
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	428a      	cmp	r2, r1
 8007c0c:	9304      	str	r3, [sp, #16]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	dca7      	bgt.n	8007b62 <pool_func_mp_array_f32+0xb2>
 8007c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c14:	3301      	adds	r3, #1
 8007c16:	b21a      	sxth	r2, r3
 8007c18:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8007c1c:	440b      	add	r3, r1
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	930c      	str	r3, [sp, #48]	; 0x30
 8007c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c24:	920e      	str	r2, [sp, #56]	; 0x38
 8007c26:	4293      	cmp	r3, r2
 8007c28:	dc89      	bgt.n	8007b3e <pool_func_mp_array_f32+0x8e>
 8007c2a:	b013      	add	sp, #76	; 0x4c
 8007c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c30:	3301      	adds	r3, #1
 8007c32:	b21b      	sxth	r3, r3
 8007c34:	42bb      	cmp	r3, r7
 8007c36:	dac6      	bge.n	8007bc6 <pool_func_mp_array_f32+0x116>
 8007c38:	3301      	adds	r3, #1
 8007c3a:	b21b      	sxth	r3, r3
 8007c3c:	42bb      	cmp	r3, r7
 8007c3e:	dbf7      	blt.n	8007c30 <pool_func_mp_array_f32+0x180>
 8007c40:	e7c1      	b.n	8007bc6 <pool_func_mp_array_f32+0x116>
 8007c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c44:	9a00      	ldr	r2, [sp, #0]
 8007c46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c48:	1a9a      	subs	r2, r3, r2
 8007c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c4c:	3a01      	subs	r2, #1
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	fb13 2301 	smlabb	r3, r3, r1, r2
 8007c54:	041b      	lsls	r3, r3, #16
 8007c56:	f57f af59 	bpl.w	8007b0c <pool_func_mp_array_f32+0x5c>
 8007c5a:	fb0a f309 	mul.w	r3, sl, r9
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8007c64:	930e      	str	r3, [sp, #56]	; 0x38
 8007c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c68:	9001      	str	r0, [sp, #4]
 8007c6a:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8007c74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c76:	429a      	cmp	r2, r3
 8007c78:	ddd7      	ble.n	8007c2a <pool_func_mp_array_f32+0x17a>
 8007c7a:	9a00      	ldr	r2, [sp, #0]
 8007c7c:	9906      	ldr	r1, [sp, #24]
 8007c7e:	fa0f f882 	sxth.w	r8, r2
 8007c82:	2900      	cmp	r1, #0
 8007c84:	d062      	beq.n	8007d4c <pool_func_mp_array_f32+0x29c>
 8007c86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c88:	fb01 f303 	mul.w	r3, r1, r3
 8007c8c:	1a12      	subs	r2, r2, r0
 8007c8e:	9305      	str	r3, [sp, #20]
 8007c90:	b213      	sxth	r3, r2
 8007c92:	9307      	str	r3, [sp, #28]
 8007c94:	f1b9 0f00 	cmp.w	r9, #0
 8007c98:	d058      	beq.n	8007d4c <pool_func_mp_array_f32+0x29c>
 8007c9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c9c:	fb02 f303 	mul.w	r3, r2, r3
 8007ca0:	2600      	movs	r6, #0
 8007ca2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ca4:	9b04      	ldr	r3, [sp, #16]
 8007ca6:	9303      	str	r3, [sp, #12]
 8007ca8:	4637      	mov	r7, r6
 8007caa:	46b2      	mov	sl, r6
 8007cac:	9b05      	ldr	r3, [sp, #20]
 8007cae:	9611      	str	r6, [sp, #68]	; 0x44
 8007cb0:	eb0a 0b03 	add.w	fp, sl, r3
 8007cb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb6:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8007cba:	b235      	sxth	r5, r6
 8007cbc:	18eb      	adds	r3, r5, r3
 8007cbe:	f04f 0a00 	mov.w	sl, #0
 8007cc2:	fb09 f303 	mul.w	r3, r9, r3
 8007cc6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8007cca:	fb09 fb0b 	mul.w	fp, r9, fp
 8007cce:	46d6      	mov	lr, sl
 8007cd0:	9807      	ldr	r0, [sp, #28]
 8007cd2:	4580      	cmp	r8, r0
 8007cd4:	dd43      	ble.n	8007d5e <pool_func_mp_array_f32+0x2ae>
 8007cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd8:	eddf 7a22 	vldr	s15, [pc, #136]	; 8007d64 <pool_func_mp_array_f32+0x2b4>
 8007cdc:	eb0e 0403 	add.w	r4, lr, r3
 8007ce0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ce2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ce6:	42a9      	cmp	r1, r5
 8007ce8:	dd0f      	ble.n	8007d0a <pool_func_mp_array_f32+0x25a>
 8007cea:	4622      	mov	r2, r4
 8007cec:	462b      	mov	r3, r5
 8007cee:	ed92 7a00 	vldr	s14, [r2]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cfc:	b21b      	sxth	r3, r3
 8007cfe:	bfb8      	it	lt
 8007d00:	eef0 7a47 	vmovlt.f32	s15, s14
 8007d04:	4299      	cmp	r1, r3
 8007d06:	4462      	add	r2, ip
 8007d08:	d1f1      	bne.n	8007cee <pool_func_mp_array_f32+0x23e>
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	b200      	sxth	r0, r0
 8007d0e:	4580      	cmp	r8, r0
 8007d10:	4434      	add	r4, r6
 8007d12:	d1e8      	bne.n	8007ce6 <pool_func_mp_array_f32+0x236>
 8007d14:	f10a 0a01 	add.w	sl, sl, #1
 8007d18:	9a02      	ldr	r2, [sp, #8]
 8007d1a:	eb0b 030e 	add.w	r3, fp, lr
 8007d1e:	fa0f fa8a 	sxth.w	sl, sl
 8007d22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d26:	45ca      	cmp	sl, r9
 8007d28:	edc3 7a00 	vstr	s15, [r3]
 8007d2c:	46d6      	mov	lr, sl
 8007d2e:	dbcf      	blt.n	8007cd0 <pool_func_mp_array_f32+0x220>
 8007d30:	9b03      	ldr	r3, [sp, #12]
 8007d32:	9a08      	ldr	r2, [sp, #32]
 8007d34:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007d36:	4413      	add	r3, r2
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	3701      	adds	r7, #1
 8007d3c:	9303      	str	r3, [sp, #12]
 8007d3e:	9b06      	ldr	r3, [sp, #24]
 8007d40:	b23f      	sxth	r7, r7
 8007d42:	4416      	add	r6, r2
 8007d44:	42bb      	cmp	r3, r7
 8007d46:	b2b6      	uxth	r6, r6
 8007d48:	46ba      	mov	sl, r7
 8007d4a:	dcaf      	bgt.n	8007cac <pool_func_mp_array_f32+0x1fc>
 8007d4c:	9b00      	ldr	r3, [sp, #0]
 8007d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d50:	4413      	add	r3, r2
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	e788      	b.n	8007c70 <pool_func_mp_array_f32+0x1c0>
 8007d5e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007d64 <pool_func_mp_array_f32+0x2b4>
 8007d62:	e7d7      	b.n	8007d14 <pool_func_mp_array_f32+0x264>
 8007d64:	cf000000 	.word	0xcf000000

08007d68 <ai_check_custom_types>:
 8007d68:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <ai_check_custom_types+0x50>)
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	b118      	cbz	r0, 8007d7a <ai_check_custom_types+0x12>
 8007d72:	7803      	ldrb	r3, [r0, #0]
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d002      	beq.n	8007d7e <ai_check_custom_types+0x16>
 8007d78:	2000      	movs	r0, #0
 8007d7a:	b002      	add	sp, #8
 8007d7c:	4770      	bx	lr
 8007d7e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <ai_check_custom_types+0x28>
 8007d86:	2001      	movs	r0, #1
 8007d88:	f080 0001 	eor.w	r0, r0, #1
 8007d8c:	b002      	add	sp, #8
 8007d8e:	4770      	bx	lr
 8007d90:	7842      	ldrb	r2, [r0, #1]
 8007d92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	f100 0001 	add.w	r0, r0, #1
 8007d9c:	d1f3      	bne.n	8007d86 <ai_check_custom_types+0x1e>
 8007d9e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007da2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d1ed      	bne.n	8007d86 <ai_check_custom_types+0x1e>
 8007daa:	7842      	ldrb	r2, [r0, #1]
 8007dac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d1e8      	bne.n	8007d86 <ai_check_custom_types+0x1e>
 8007db4:	2000      	movs	r0, #0
 8007db6:	e7e7      	b.n	8007d88 <ai_check_custom_types+0x20>
 8007db8:	0800b164 	.word	0x0800b164

08007dbc <ai_layers_init_all>:
 8007dbc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007dbe:	b17a      	cbz	r2, 8007de0 <ai_layers_init_all+0x24>
 8007dc0:	6913      	ldr	r3, [r2, #16]
 8007dc2:	60d0      	str	r0, [r2, #12]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	f04f 0201 	mov.w	r2, #1
 8007dca:	d009      	beq.n	8007de0 <ai_layers_init_all+0x24>
 8007dcc:	b143      	cbz	r3, 8007de0 <ai_layers_init_all+0x24>
 8007dce:	6919      	ldr	r1, [r3, #16]
 8007dd0:	60d8      	str	r0, [r3, #12]
 8007dd2:	4299      	cmp	r1, r3
 8007dd4:	f102 0201 	add.w	r2, r2, #1
 8007dd8:	d002      	beq.n	8007de0 <ai_layers_init_all+0x24>
 8007dda:	460b      	mov	r3, r1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f6      	bne.n	8007dce <ai_layers_init_all+0x12>
 8007de0:	4610      	mov	r0, r2
 8007de2:	4770      	bx	lr

08007de4 <ai_layers_post_init_all>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007de8:	b18c      	cbz	r4, 8007e0e <ai_layers_post_init_all+0x2a>
 8007dea:	2500      	movs	r5, #0
 8007dec:	6863      	ldr	r3, [r4, #4]
 8007dee:	f013 0f01 	tst.w	r3, #1
 8007df2:	4620      	mov	r0, r4
 8007df4:	d003      	beq.n	8007dfe <ai_layers_post_init_all+0x1a>
 8007df6:	6a23      	ldr	r3, [r4, #32]
 8007df8:	b10b      	cbz	r3, 8007dfe <ai_layers_post_init_all+0x1a>
 8007dfa:	4798      	blx	r3
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	42a3      	cmp	r3, r4
 8007e02:	d002      	beq.n	8007e0a <ai_layers_post_init_all+0x26>
 8007e04:	461c      	mov	r4, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1f0      	bne.n	8007dec <ai_layers_post_init_all+0x8>
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	4625      	mov	r5, r4
 8007e10:	e7fb      	b.n	8007e0a <ai_layers_post_init_all+0x26>
 8007e12:	bf00      	nop

08007e14 <ai_layers_forward_all>:
 8007e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e18:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8007e1a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	2f00      	cmp	r7, #0
 8007e20:	d02c      	beq.n	8007e7c <ai_layers_forward_all+0x68>
 8007e22:	2d00      	cmp	r5, #0
 8007e24:	d03f      	beq.n	8007ea6 <ai_layers_forward_all+0x92>
 8007e26:	6385      	str	r5, [r0, #56]	; 0x38
 8007e28:	4629      	mov	r1, r5
 8007e2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	47b8      	blx	r7
 8007e30:	2600      	movs	r6, #0
 8007e32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e34:	46b0      	mov	r8, r6
 8007e36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e38:	2002      	movs	r0, #2
 8007e3a:	47b8      	blx	r7
 8007e3c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007e3e:	696b      	ldr	r3, [r5, #20]
 8007e40:	4628      	mov	r0, r5
 8007e42:	4798      	blx	r3
 8007e44:	692b      	ldr	r3, [r5, #16]
 8007e46:	429d      	cmp	r5, r3
 8007e48:	f04f 0003 	mov.w	r0, #3
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	d009      	beq.n	8007e64 <ai_layers_forward_all+0x50>
 8007e50:	63a3      	str	r3, [r4, #56]	; 0x38
 8007e52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e54:	47b8      	blx	r7
 8007e56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e58:	3601      	adds	r6, #1
 8007e5a:	2900      	cmp	r1, #0
 8007e5c:	d1eb      	bne.n	8007e36 <ai_layers_forward_all+0x22>
 8007e5e:	4630      	mov	r0, r6
 8007e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e64:	2100      	movs	r1, #0
 8007e66:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8007e6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e6c:	47b8      	blx	r7
 8007e6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e70:	3601      	adds	r6, #1
 8007e72:	2900      	cmp	r1, #0
 8007e74:	d1df      	bne.n	8007e36 <ai_layers_forward_all+0x22>
 8007e76:	4630      	mov	r0, r6
 8007e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e7c:	b19d      	cbz	r5, 8007ea6 <ai_layers_forward_all+0x92>
 8007e7e:	6385      	str	r5, [r0, #56]	; 0x38
 8007e80:	463e      	mov	r6, r7
 8007e82:	696b      	ldr	r3, [r5, #20]
 8007e84:	4628      	mov	r0, r5
 8007e86:	4798      	blx	r3
 8007e88:	692b      	ldr	r3, [r5, #16]
 8007e8a:	42ab      	cmp	r3, r5
 8007e8c:	f106 0601 	add.w	r6, r6, #1
 8007e90:	d004      	beq.n	8007e9c <ai_layers_forward_all+0x88>
 8007e92:	63a3      	str	r3, [r4, #56]	; 0x38
 8007e94:	461d      	mov	r5, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f3      	bne.n	8007e82 <ai_layers_forward_all+0x6e>
 8007e9a:	e7e0      	b.n	8007e5e <ai_layers_forward_all+0x4a>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea6:	462e      	mov	r6, r5
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eae:	bf00      	nop

08007eb0 <ai_array_to_buffer_fmt>:
 8007eb0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d029      	beq.n	8007f0c <ai_array_to_buffer_fmt+0x5c>
 8007eb8:	4a22      	ldr	r2, [pc, #136]	; (8007f44 <ai_array_to_buffer_fmt+0x94>)
 8007eba:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d010      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007ec2:	dd13      	ble.n	8007eec <ai_array_to_buffer_fmt+0x3c>
 8007ec4:	4a20      	ldr	r2, [pc, #128]	; (8007f48 <ai_array_to_buffer_fmt+0x98>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d00c      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007eca:	dc27      	bgt.n	8007f1c <ai_array_to_buffer_fmt+0x6c>
 8007ecc:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d007      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007ed4:	3207      	adds	r2, #7
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d004      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007eda:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d000      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007ee2:	2340      	movs	r3, #64	; 0x40
 8007ee4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007ee8:	4318      	orrs	r0, r3
 8007eea:	4770      	bx	lr
 8007eec:	4a17      	ldr	r2, [pc, #92]	; (8007f4c <ai_array_to_buffer_fmt+0x9c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d0f8      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007ef2:	dd1e      	ble.n	8007f32 <ai_array_to_buffer_fmt+0x82>
 8007ef4:	4a16      	ldr	r2, [pc, #88]	; (8007f50 <ai_array_to_buffer_fmt+0xa0>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d0f4      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007efa:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d0f0      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007f02:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d1eb      	bne.n	8007ee2 <ai_array_to_buffer_fmt+0x32>
 8007f0a:	e7eb      	b.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007f0c:	4b11      	ldr	r3, [pc, #68]	; (8007f54 <ai_array_to_buffer_fmt+0xa4>)
 8007f0e:	4003      	ands	r3, r0
 8007f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f14:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007f18:	4318      	orrs	r0, r3
 8007f1a:	4770      	bx	lr
 8007f1c:	4a0e      	ldr	r2, [pc, #56]	; (8007f58 <ai_array_to_buffer_fmt+0xa8>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d0e0      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007f22:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d0dc      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007f2a:	4a0c      	ldr	r2, [pc, #48]	; (8007f5c <ai_array_to_buffer_fmt+0xac>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d1d8      	bne.n	8007ee2 <ai_array_to_buffer_fmt+0x32>
 8007f30:	e7d8      	b.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007f32:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d0d4      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d0d0      	beq.n	8007ee4 <ai_array_to_buffer_fmt+0x34>
 8007f42:	e7ce      	b.n	8007ee2 <ai_array_to_buffer_fmt+0x32>
 8007f44:	00060440 	.word	0x00060440
 8007f48:	00840840 	.word	0x00840840
 8007f4c:	00040447 	.word	0x00040447
 8007f50:	0004084f 	.word	0x0004084f
 8007f54:	00803fff 	.word	0x00803fff
 8007f58:	00841040 	.word	0x00841040
 8007f5c:	0084084f 	.word	0x0084084f

08007f60 <ai_array_get_byte_size>:
 8007f60:	b1c1      	cbz	r1, 8007f94 <ai_array_get_byte_size+0x34>
 8007f62:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8007f66:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007f6a:	4413      	add	r3, r2
 8007f6c:	fb01 f103 	mul.w	r1, r1, r3
 8007f70:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8007f74:	3107      	adds	r1, #7
 8007f76:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8007f7a:	f021 0107 	bic.w	r1, r1, #7
 8007f7e:	2804      	cmp	r0, #4
 8007f80:	fa21 f102 	lsr.w	r1, r1, r2
 8007f84:	d008      	beq.n	8007f98 <ai_array_get_byte_size+0x38>
 8007f86:	2808      	cmp	r0, #8
 8007f88:	d101      	bne.n	8007f8e <ai_array_get_byte_size+0x2e>
 8007f8a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8007f8e:	3107      	adds	r1, #7
 8007f90:	08c8      	lsrs	r0, r1, #3
 8007f92:	4770      	bx	lr
 8007f94:	4608      	mov	r0, r1
 8007f96:	4770      	bx	lr
 8007f98:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8007f9c:	3107      	adds	r1, #7
 8007f9e:	08c8      	lsrs	r0, r1, #3
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop

08007fa4 <__errno>:
 8007fa4:	4b01      	ldr	r3, [pc, #4]	; (8007fac <__errno+0x8>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	20000c1c 	.word	0x20000c1c

08007fb0 <__libc_init_array>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	4d0d      	ldr	r5, [pc, #52]	; (8007fe8 <__libc_init_array+0x38>)
 8007fb4:	4c0d      	ldr	r4, [pc, #52]	; (8007fec <__libc_init_array+0x3c>)
 8007fb6:	1b64      	subs	r4, r4, r5
 8007fb8:	10a4      	asrs	r4, r4, #2
 8007fba:	2600      	movs	r6, #0
 8007fbc:	42a6      	cmp	r6, r4
 8007fbe:	d109      	bne.n	8007fd4 <__libc_init_array+0x24>
 8007fc0:	4d0b      	ldr	r5, [pc, #44]	; (8007ff0 <__libc_init_array+0x40>)
 8007fc2:	4c0c      	ldr	r4, [pc, #48]	; (8007ff4 <__libc_init_array+0x44>)
 8007fc4:	f003 f816 	bl	800aff4 <_init>
 8007fc8:	1b64      	subs	r4, r4, r5
 8007fca:	10a4      	asrs	r4, r4, #2
 8007fcc:	2600      	movs	r6, #0
 8007fce:	42a6      	cmp	r6, r4
 8007fd0:	d105      	bne.n	8007fde <__libc_init_array+0x2e>
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd8:	4798      	blx	r3
 8007fda:	3601      	adds	r6, #1
 8007fdc:	e7ee      	b.n	8007fbc <__libc_init_array+0xc>
 8007fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe2:	4798      	blx	r3
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	e7f2      	b.n	8007fce <__libc_init_array+0x1e>
 8007fe8:	0800e45c 	.word	0x0800e45c
 8007fec:	0800e45c 	.word	0x0800e45c
 8007ff0:	0800e45c 	.word	0x0800e45c
 8007ff4:	0800e460 	.word	0x0800e460

08007ff8 <malloc>:
 8007ff8:	4b02      	ldr	r3, [pc, #8]	; (8008004 <malloc+0xc>)
 8007ffa:	4601      	mov	r1, r0
 8007ffc:	6818      	ldr	r0, [r3, #0]
 8007ffe:	f000 b869 	b.w	80080d4 <_malloc_r>
 8008002:	bf00      	nop
 8008004:	20000c1c 	.word	0x20000c1c

08008008 <memcpy>:
 8008008:	440a      	add	r2, r1
 800800a:	4291      	cmp	r1, r2
 800800c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008010:	d100      	bne.n	8008014 <memcpy+0xc>
 8008012:	4770      	bx	lr
 8008014:	b510      	push	{r4, lr}
 8008016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800801a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800801e:	4291      	cmp	r1, r2
 8008020:	d1f9      	bne.n	8008016 <memcpy+0xe>
 8008022:	bd10      	pop	{r4, pc}

08008024 <memset>:
 8008024:	4402      	add	r2, r0
 8008026:	4603      	mov	r3, r0
 8008028:	4293      	cmp	r3, r2
 800802a:	d100      	bne.n	800802e <memset+0xa>
 800802c:	4770      	bx	lr
 800802e:	f803 1b01 	strb.w	r1, [r3], #1
 8008032:	e7f9      	b.n	8008028 <memset+0x4>

08008034 <_free_r>:
 8008034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008036:	2900      	cmp	r1, #0
 8008038:	d048      	beq.n	80080cc <_free_r+0x98>
 800803a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800803e:	9001      	str	r0, [sp, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f1a1 0404 	sub.w	r4, r1, #4
 8008046:	bfb8      	it	lt
 8008048:	18e4      	addlt	r4, r4, r3
 800804a:	f001 fbb5 	bl	80097b8 <__malloc_lock>
 800804e:	4a20      	ldr	r2, [pc, #128]	; (80080d0 <_free_r+0x9c>)
 8008050:	9801      	ldr	r0, [sp, #4]
 8008052:	6813      	ldr	r3, [r2, #0]
 8008054:	4615      	mov	r5, r2
 8008056:	b933      	cbnz	r3, 8008066 <_free_r+0x32>
 8008058:	6063      	str	r3, [r4, #4]
 800805a:	6014      	str	r4, [r2, #0]
 800805c:	b003      	add	sp, #12
 800805e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008062:	f001 bbaf 	b.w	80097c4 <__malloc_unlock>
 8008066:	42a3      	cmp	r3, r4
 8008068:	d90b      	bls.n	8008082 <_free_r+0x4e>
 800806a:	6821      	ldr	r1, [r4, #0]
 800806c:	1862      	adds	r2, r4, r1
 800806e:	4293      	cmp	r3, r2
 8008070:	bf04      	itt	eq
 8008072:	681a      	ldreq	r2, [r3, #0]
 8008074:	685b      	ldreq	r3, [r3, #4]
 8008076:	6063      	str	r3, [r4, #4]
 8008078:	bf04      	itt	eq
 800807a:	1852      	addeq	r2, r2, r1
 800807c:	6022      	streq	r2, [r4, #0]
 800807e:	602c      	str	r4, [r5, #0]
 8008080:	e7ec      	b.n	800805c <_free_r+0x28>
 8008082:	461a      	mov	r2, r3
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	b10b      	cbz	r3, 800808c <_free_r+0x58>
 8008088:	42a3      	cmp	r3, r4
 800808a:	d9fa      	bls.n	8008082 <_free_r+0x4e>
 800808c:	6811      	ldr	r1, [r2, #0]
 800808e:	1855      	adds	r5, r2, r1
 8008090:	42a5      	cmp	r5, r4
 8008092:	d10b      	bne.n	80080ac <_free_r+0x78>
 8008094:	6824      	ldr	r4, [r4, #0]
 8008096:	4421      	add	r1, r4
 8008098:	1854      	adds	r4, r2, r1
 800809a:	42a3      	cmp	r3, r4
 800809c:	6011      	str	r1, [r2, #0]
 800809e:	d1dd      	bne.n	800805c <_free_r+0x28>
 80080a0:	681c      	ldr	r4, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	6053      	str	r3, [r2, #4]
 80080a6:	4421      	add	r1, r4
 80080a8:	6011      	str	r1, [r2, #0]
 80080aa:	e7d7      	b.n	800805c <_free_r+0x28>
 80080ac:	d902      	bls.n	80080b4 <_free_r+0x80>
 80080ae:	230c      	movs	r3, #12
 80080b0:	6003      	str	r3, [r0, #0]
 80080b2:	e7d3      	b.n	800805c <_free_r+0x28>
 80080b4:	6825      	ldr	r5, [r4, #0]
 80080b6:	1961      	adds	r1, r4, r5
 80080b8:	428b      	cmp	r3, r1
 80080ba:	bf04      	itt	eq
 80080bc:	6819      	ldreq	r1, [r3, #0]
 80080be:	685b      	ldreq	r3, [r3, #4]
 80080c0:	6063      	str	r3, [r4, #4]
 80080c2:	bf04      	itt	eq
 80080c4:	1949      	addeq	r1, r1, r5
 80080c6:	6021      	streq	r1, [r4, #0]
 80080c8:	6054      	str	r4, [r2, #4]
 80080ca:	e7c7      	b.n	800805c <_free_r+0x28>
 80080cc:	b003      	add	sp, #12
 80080ce:	bd30      	pop	{r4, r5, pc}
 80080d0:	20000ed0 	.word	0x20000ed0

080080d4 <_malloc_r>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	1ccd      	adds	r5, r1, #3
 80080d8:	f025 0503 	bic.w	r5, r5, #3
 80080dc:	3508      	adds	r5, #8
 80080de:	2d0c      	cmp	r5, #12
 80080e0:	bf38      	it	cc
 80080e2:	250c      	movcc	r5, #12
 80080e4:	2d00      	cmp	r5, #0
 80080e6:	4606      	mov	r6, r0
 80080e8:	db01      	blt.n	80080ee <_malloc_r+0x1a>
 80080ea:	42a9      	cmp	r1, r5
 80080ec:	d903      	bls.n	80080f6 <_malloc_r+0x22>
 80080ee:	230c      	movs	r3, #12
 80080f0:	6033      	str	r3, [r6, #0]
 80080f2:	2000      	movs	r0, #0
 80080f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f6:	f001 fb5f 	bl	80097b8 <__malloc_lock>
 80080fa:	4921      	ldr	r1, [pc, #132]	; (8008180 <_malloc_r+0xac>)
 80080fc:	680a      	ldr	r2, [r1, #0]
 80080fe:	4614      	mov	r4, r2
 8008100:	b99c      	cbnz	r4, 800812a <_malloc_r+0x56>
 8008102:	4f20      	ldr	r7, [pc, #128]	; (8008184 <_malloc_r+0xb0>)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	b923      	cbnz	r3, 8008112 <_malloc_r+0x3e>
 8008108:	4621      	mov	r1, r4
 800810a:	4630      	mov	r0, r6
 800810c:	f000 fca6 	bl	8008a5c <_sbrk_r>
 8008110:	6038      	str	r0, [r7, #0]
 8008112:	4629      	mov	r1, r5
 8008114:	4630      	mov	r0, r6
 8008116:	f000 fca1 	bl	8008a5c <_sbrk_r>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d123      	bne.n	8008166 <_malloc_r+0x92>
 800811e:	230c      	movs	r3, #12
 8008120:	6033      	str	r3, [r6, #0]
 8008122:	4630      	mov	r0, r6
 8008124:	f001 fb4e 	bl	80097c4 <__malloc_unlock>
 8008128:	e7e3      	b.n	80080f2 <_malloc_r+0x1e>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	1b5b      	subs	r3, r3, r5
 800812e:	d417      	bmi.n	8008160 <_malloc_r+0x8c>
 8008130:	2b0b      	cmp	r3, #11
 8008132:	d903      	bls.n	800813c <_malloc_r+0x68>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	441c      	add	r4, r3
 8008138:	6025      	str	r5, [r4, #0]
 800813a:	e004      	b.n	8008146 <_malloc_r+0x72>
 800813c:	6863      	ldr	r3, [r4, #4]
 800813e:	42a2      	cmp	r2, r4
 8008140:	bf0c      	ite	eq
 8008142:	600b      	streq	r3, [r1, #0]
 8008144:	6053      	strne	r3, [r2, #4]
 8008146:	4630      	mov	r0, r6
 8008148:	f001 fb3c 	bl	80097c4 <__malloc_unlock>
 800814c:	f104 000b 	add.w	r0, r4, #11
 8008150:	1d23      	adds	r3, r4, #4
 8008152:	f020 0007 	bic.w	r0, r0, #7
 8008156:	1ac2      	subs	r2, r0, r3
 8008158:	d0cc      	beq.n	80080f4 <_malloc_r+0x20>
 800815a:	1a1b      	subs	r3, r3, r0
 800815c:	50a3      	str	r3, [r4, r2]
 800815e:	e7c9      	b.n	80080f4 <_malloc_r+0x20>
 8008160:	4622      	mov	r2, r4
 8008162:	6864      	ldr	r4, [r4, #4]
 8008164:	e7cc      	b.n	8008100 <_malloc_r+0x2c>
 8008166:	1cc4      	adds	r4, r0, #3
 8008168:	f024 0403 	bic.w	r4, r4, #3
 800816c:	42a0      	cmp	r0, r4
 800816e:	d0e3      	beq.n	8008138 <_malloc_r+0x64>
 8008170:	1a21      	subs	r1, r4, r0
 8008172:	4630      	mov	r0, r6
 8008174:	f000 fc72 	bl	8008a5c <_sbrk_r>
 8008178:	3001      	adds	r0, #1
 800817a:	d1dd      	bne.n	8008138 <_malloc_r+0x64>
 800817c:	e7cf      	b.n	800811e <_malloc_r+0x4a>
 800817e:	bf00      	nop
 8008180:	20000ed0 	.word	0x20000ed0
 8008184:	20000ed4 	.word	0x20000ed4

08008188 <__cvt>:
 8008188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800818c:	ec55 4b10 	vmov	r4, r5, d0
 8008190:	2d00      	cmp	r5, #0
 8008192:	460e      	mov	r6, r1
 8008194:	4619      	mov	r1, r3
 8008196:	462b      	mov	r3, r5
 8008198:	bfbb      	ittet	lt
 800819a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800819e:	461d      	movlt	r5, r3
 80081a0:	2300      	movge	r3, #0
 80081a2:	232d      	movlt	r3, #45	; 0x2d
 80081a4:	700b      	strb	r3, [r1, #0]
 80081a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081ac:	4691      	mov	r9, r2
 80081ae:	f023 0820 	bic.w	r8, r3, #32
 80081b2:	bfbc      	itt	lt
 80081b4:	4622      	movlt	r2, r4
 80081b6:	4614      	movlt	r4, r2
 80081b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081bc:	d005      	beq.n	80081ca <__cvt+0x42>
 80081be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081c2:	d100      	bne.n	80081c6 <__cvt+0x3e>
 80081c4:	3601      	adds	r6, #1
 80081c6:	2102      	movs	r1, #2
 80081c8:	e000      	b.n	80081cc <__cvt+0x44>
 80081ca:	2103      	movs	r1, #3
 80081cc:	ab03      	add	r3, sp, #12
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	ab02      	add	r3, sp, #8
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	ec45 4b10 	vmov	d0, r4, r5
 80081d8:	4653      	mov	r3, sl
 80081da:	4632      	mov	r2, r6
 80081dc:	f000 fcfc 	bl	8008bd8 <_dtoa_r>
 80081e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80081e4:	4607      	mov	r7, r0
 80081e6:	d102      	bne.n	80081ee <__cvt+0x66>
 80081e8:	f019 0f01 	tst.w	r9, #1
 80081ec:	d022      	beq.n	8008234 <__cvt+0xac>
 80081ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081f2:	eb07 0906 	add.w	r9, r7, r6
 80081f6:	d110      	bne.n	800821a <__cvt+0x92>
 80081f8:	783b      	ldrb	r3, [r7, #0]
 80081fa:	2b30      	cmp	r3, #48	; 0x30
 80081fc:	d10a      	bne.n	8008214 <__cvt+0x8c>
 80081fe:	2200      	movs	r2, #0
 8008200:	2300      	movs	r3, #0
 8008202:	4620      	mov	r0, r4
 8008204:	4629      	mov	r1, r5
 8008206:	f7f8 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800820a:	b918      	cbnz	r0, 8008214 <__cvt+0x8c>
 800820c:	f1c6 0601 	rsb	r6, r6, #1
 8008210:	f8ca 6000 	str.w	r6, [sl]
 8008214:	f8da 3000 	ldr.w	r3, [sl]
 8008218:	4499      	add	r9, r3
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	4620      	mov	r0, r4
 8008220:	4629      	mov	r1, r5
 8008222:	f7f8 fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 8008226:	b108      	cbz	r0, 800822c <__cvt+0xa4>
 8008228:	f8cd 900c 	str.w	r9, [sp, #12]
 800822c:	2230      	movs	r2, #48	; 0x30
 800822e:	9b03      	ldr	r3, [sp, #12]
 8008230:	454b      	cmp	r3, r9
 8008232:	d307      	bcc.n	8008244 <__cvt+0xbc>
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008238:	1bdb      	subs	r3, r3, r7
 800823a:	4638      	mov	r0, r7
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	b004      	add	sp, #16
 8008240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008244:	1c59      	adds	r1, r3, #1
 8008246:	9103      	str	r1, [sp, #12]
 8008248:	701a      	strb	r2, [r3, #0]
 800824a:	e7f0      	b.n	800822e <__cvt+0xa6>

0800824c <__exponent>:
 800824c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800824e:	4603      	mov	r3, r0
 8008250:	2900      	cmp	r1, #0
 8008252:	bfb8      	it	lt
 8008254:	4249      	neglt	r1, r1
 8008256:	f803 2b02 	strb.w	r2, [r3], #2
 800825a:	bfb4      	ite	lt
 800825c:	222d      	movlt	r2, #45	; 0x2d
 800825e:	222b      	movge	r2, #43	; 0x2b
 8008260:	2909      	cmp	r1, #9
 8008262:	7042      	strb	r2, [r0, #1]
 8008264:	dd2a      	ble.n	80082bc <__exponent+0x70>
 8008266:	f10d 0407 	add.w	r4, sp, #7
 800826a:	46a4      	mov	ip, r4
 800826c:	270a      	movs	r7, #10
 800826e:	46a6      	mov	lr, r4
 8008270:	460a      	mov	r2, r1
 8008272:	fb91 f6f7 	sdiv	r6, r1, r7
 8008276:	fb07 1516 	mls	r5, r7, r6, r1
 800827a:	3530      	adds	r5, #48	; 0x30
 800827c:	2a63      	cmp	r2, #99	; 0x63
 800827e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008282:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008286:	4631      	mov	r1, r6
 8008288:	dcf1      	bgt.n	800826e <__exponent+0x22>
 800828a:	3130      	adds	r1, #48	; 0x30
 800828c:	f1ae 0502 	sub.w	r5, lr, #2
 8008290:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008294:	1c44      	adds	r4, r0, #1
 8008296:	4629      	mov	r1, r5
 8008298:	4561      	cmp	r1, ip
 800829a:	d30a      	bcc.n	80082b2 <__exponent+0x66>
 800829c:	f10d 0209 	add.w	r2, sp, #9
 80082a0:	eba2 020e 	sub.w	r2, r2, lr
 80082a4:	4565      	cmp	r5, ip
 80082a6:	bf88      	it	hi
 80082a8:	2200      	movhi	r2, #0
 80082aa:	4413      	add	r3, r2
 80082ac:	1a18      	subs	r0, r3, r0
 80082ae:	b003      	add	sp, #12
 80082b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80082ba:	e7ed      	b.n	8008298 <__exponent+0x4c>
 80082bc:	2330      	movs	r3, #48	; 0x30
 80082be:	3130      	adds	r1, #48	; 0x30
 80082c0:	7083      	strb	r3, [r0, #2]
 80082c2:	70c1      	strb	r1, [r0, #3]
 80082c4:	1d03      	adds	r3, r0, #4
 80082c6:	e7f1      	b.n	80082ac <__exponent+0x60>

080082c8 <_printf_float>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	ed2d 8b02 	vpush	{d8}
 80082d0:	b08d      	sub	sp, #52	; 0x34
 80082d2:	460c      	mov	r4, r1
 80082d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80082d8:	4616      	mov	r6, r2
 80082da:	461f      	mov	r7, r3
 80082dc:	4605      	mov	r5, r0
 80082de:	f001 fa67 	bl	80097b0 <_localeconv_r>
 80082e2:	f8d0 a000 	ldr.w	sl, [r0]
 80082e6:	4650      	mov	r0, sl
 80082e8:	f7f7 ff72 	bl	80001d0 <strlen>
 80082ec:	2300      	movs	r3, #0
 80082ee:	930a      	str	r3, [sp, #40]	; 0x28
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	9305      	str	r3, [sp, #20]
 80082f4:	f8d8 3000 	ldr.w	r3, [r8]
 80082f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80082fc:	3307      	adds	r3, #7
 80082fe:	f023 0307 	bic.w	r3, r3, #7
 8008302:	f103 0208 	add.w	r2, r3, #8
 8008306:	f8c8 2000 	str.w	r2, [r8]
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008312:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008316:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800831a:	9307      	str	r3, [sp, #28]
 800831c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008320:	ee08 0a10 	vmov	s16, r0
 8008324:	4b9f      	ldr	r3, [pc, #636]	; (80085a4 <_printf_float+0x2dc>)
 8008326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800832a:	f04f 32ff 	mov.w	r2, #4294967295
 800832e:	f7f8 fbfd 	bl	8000b2c <__aeabi_dcmpun>
 8008332:	bb88      	cbnz	r0, 8008398 <_printf_float+0xd0>
 8008334:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008338:	4b9a      	ldr	r3, [pc, #616]	; (80085a4 <_printf_float+0x2dc>)
 800833a:	f04f 32ff 	mov.w	r2, #4294967295
 800833e:	f7f8 fbd7 	bl	8000af0 <__aeabi_dcmple>
 8008342:	bb48      	cbnz	r0, 8008398 <_printf_float+0xd0>
 8008344:	2200      	movs	r2, #0
 8008346:	2300      	movs	r3, #0
 8008348:	4640      	mov	r0, r8
 800834a:	4649      	mov	r1, r9
 800834c:	f7f8 fbc6 	bl	8000adc <__aeabi_dcmplt>
 8008350:	b110      	cbz	r0, 8008358 <_printf_float+0x90>
 8008352:	232d      	movs	r3, #45	; 0x2d
 8008354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008358:	4b93      	ldr	r3, [pc, #588]	; (80085a8 <_printf_float+0x2e0>)
 800835a:	4894      	ldr	r0, [pc, #592]	; (80085ac <_printf_float+0x2e4>)
 800835c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008360:	bf94      	ite	ls
 8008362:	4698      	movls	r8, r3
 8008364:	4680      	movhi	r8, r0
 8008366:	2303      	movs	r3, #3
 8008368:	6123      	str	r3, [r4, #16]
 800836a:	9b05      	ldr	r3, [sp, #20]
 800836c:	f023 0204 	bic.w	r2, r3, #4
 8008370:	6022      	str	r2, [r4, #0]
 8008372:	f04f 0900 	mov.w	r9, #0
 8008376:	9700      	str	r7, [sp, #0]
 8008378:	4633      	mov	r3, r6
 800837a:	aa0b      	add	r2, sp, #44	; 0x2c
 800837c:	4621      	mov	r1, r4
 800837e:	4628      	mov	r0, r5
 8008380:	f000 f9d8 	bl	8008734 <_printf_common>
 8008384:	3001      	adds	r0, #1
 8008386:	f040 8090 	bne.w	80084aa <_printf_float+0x1e2>
 800838a:	f04f 30ff 	mov.w	r0, #4294967295
 800838e:	b00d      	add	sp, #52	; 0x34
 8008390:	ecbd 8b02 	vpop	{d8}
 8008394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008398:	4642      	mov	r2, r8
 800839a:	464b      	mov	r3, r9
 800839c:	4640      	mov	r0, r8
 800839e:	4649      	mov	r1, r9
 80083a0:	f7f8 fbc4 	bl	8000b2c <__aeabi_dcmpun>
 80083a4:	b140      	cbz	r0, 80083b8 <_printf_float+0xf0>
 80083a6:	464b      	mov	r3, r9
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bfbc      	itt	lt
 80083ac:	232d      	movlt	r3, #45	; 0x2d
 80083ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083b2:	487f      	ldr	r0, [pc, #508]	; (80085b0 <_printf_float+0x2e8>)
 80083b4:	4b7f      	ldr	r3, [pc, #508]	; (80085b4 <_printf_float+0x2ec>)
 80083b6:	e7d1      	b.n	800835c <_printf_float+0x94>
 80083b8:	6863      	ldr	r3, [r4, #4]
 80083ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80083be:	9206      	str	r2, [sp, #24]
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	d13f      	bne.n	8008444 <_printf_float+0x17c>
 80083c4:	2306      	movs	r3, #6
 80083c6:	6063      	str	r3, [r4, #4]
 80083c8:	9b05      	ldr	r3, [sp, #20]
 80083ca:	6861      	ldr	r1, [r4, #4]
 80083cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80083d0:	2300      	movs	r3, #0
 80083d2:	9303      	str	r3, [sp, #12]
 80083d4:	ab0a      	add	r3, sp, #40	; 0x28
 80083d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80083da:	ab09      	add	r3, sp, #36	; 0x24
 80083dc:	ec49 8b10 	vmov	d0, r8, r9
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	6022      	str	r2, [r4, #0]
 80083e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083e8:	4628      	mov	r0, r5
 80083ea:	f7ff fecd 	bl	8008188 <__cvt>
 80083ee:	9b06      	ldr	r3, [sp, #24]
 80083f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083f2:	2b47      	cmp	r3, #71	; 0x47
 80083f4:	4680      	mov	r8, r0
 80083f6:	d108      	bne.n	800840a <_printf_float+0x142>
 80083f8:	1cc8      	adds	r0, r1, #3
 80083fa:	db02      	blt.n	8008402 <_printf_float+0x13a>
 80083fc:	6863      	ldr	r3, [r4, #4]
 80083fe:	4299      	cmp	r1, r3
 8008400:	dd41      	ble.n	8008486 <_printf_float+0x1be>
 8008402:	f1ab 0b02 	sub.w	fp, fp, #2
 8008406:	fa5f fb8b 	uxtb.w	fp, fp
 800840a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800840e:	d820      	bhi.n	8008452 <_printf_float+0x18a>
 8008410:	3901      	subs	r1, #1
 8008412:	465a      	mov	r2, fp
 8008414:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008418:	9109      	str	r1, [sp, #36]	; 0x24
 800841a:	f7ff ff17 	bl	800824c <__exponent>
 800841e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008420:	1813      	adds	r3, r2, r0
 8008422:	2a01      	cmp	r2, #1
 8008424:	4681      	mov	r9, r0
 8008426:	6123      	str	r3, [r4, #16]
 8008428:	dc02      	bgt.n	8008430 <_printf_float+0x168>
 800842a:	6822      	ldr	r2, [r4, #0]
 800842c:	07d2      	lsls	r2, r2, #31
 800842e:	d501      	bpl.n	8008434 <_printf_float+0x16c>
 8008430:	3301      	adds	r3, #1
 8008432:	6123      	str	r3, [r4, #16]
 8008434:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008438:	2b00      	cmp	r3, #0
 800843a:	d09c      	beq.n	8008376 <_printf_float+0xae>
 800843c:	232d      	movs	r3, #45	; 0x2d
 800843e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008442:	e798      	b.n	8008376 <_printf_float+0xae>
 8008444:	9a06      	ldr	r2, [sp, #24]
 8008446:	2a47      	cmp	r2, #71	; 0x47
 8008448:	d1be      	bne.n	80083c8 <_printf_float+0x100>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1bc      	bne.n	80083c8 <_printf_float+0x100>
 800844e:	2301      	movs	r3, #1
 8008450:	e7b9      	b.n	80083c6 <_printf_float+0xfe>
 8008452:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008456:	d118      	bne.n	800848a <_printf_float+0x1c2>
 8008458:	2900      	cmp	r1, #0
 800845a:	6863      	ldr	r3, [r4, #4]
 800845c:	dd0b      	ble.n	8008476 <_printf_float+0x1ae>
 800845e:	6121      	str	r1, [r4, #16]
 8008460:	b913      	cbnz	r3, 8008468 <_printf_float+0x1a0>
 8008462:	6822      	ldr	r2, [r4, #0]
 8008464:	07d0      	lsls	r0, r2, #31
 8008466:	d502      	bpl.n	800846e <_printf_float+0x1a6>
 8008468:	3301      	adds	r3, #1
 800846a:	440b      	add	r3, r1
 800846c:	6123      	str	r3, [r4, #16]
 800846e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008470:	f04f 0900 	mov.w	r9, #0
 8008474:	e7de      	b.n	8008434 <_printf_float+0x16c>
 8008476:	b913      	cbnz	r3, 800847e <_printf_float+0x1b6>
 8008478:	6822      	ldr	r2, [r4, #0]
 800847a:	07d2      	lsls	r2, r2, #31
 800847c:	d501      	bpl.n	8008482 <_printf_float+0x1ba>
 800847e:	3302      	adds	r3, #2
 8008480:	e7f4      	b.n	800846c <_printf_float+0x1a4>
 8008482:	2301      	movs	r3, #1
 8008484:	e7f2      	b.n	800846c <_printf_float+0x1a4>
 8008486:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800848a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848c:	4299      	cmp	r1, r3
 800848e:	db05      	blt.n	800849c <_printf_float+0x1d4>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	6121      	str	r1, [r4, #16]
 8008494:	07d8      	lsls	r0, r3, #31
 8008496:	d5ea      	bpl.n	800846e <_printf_float+0x1a6>
 8008498:	1c4b      	adds	r3, r1, #1
 800849a:	e7e7      	b.n	800846c <_printf_float+0x1a4>
 800849c:	2900      	cmp	r1, #0
 800849e:	bfd4      	ite	le
 80084a0:	f1c1 0202 	rsble	r2, r1, #2
 80084a4:	2201      	movgt	r2, #1
 80084a6:	4413      	add	r3, r2
 80084a8:	e7e0      	b.n	800846c <_printf_float+0x1a4>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	055a      	lsls	r2, r3, #21
 80084ae:	d407      	bmi.n	80084c0 <_printf_float+0x1f8>
 80084b0:	6923      	ldr	r3, [r4, #16]
 80084b2:	4642      	mov	r2, r8
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	d12c      	bne.n	8008518 <_printf_float+0x250>
 80084be:	e764      	b.n	800838a <_printf_float+0xc2>
 80084c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084c4:	f240 80e0 	bls.w	8008688 <_printf_float+0x3c0>
 80084c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084cc:	2200      	movs	r2, #0
 80084ce:	2300      	movs	r3, #0
 80084d0:	f7f8 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d034      	beq.n	8008542 <_printf_float+0x27a>
 80084d8:	4a37      	ldr	r2, [pc, #220]	; (80085b8 <_printf_float+0x2f0>)
 80084da:	2301      	movs	r3, #1
 80084dc:	4631      	mov	r1, r6
 80084de:	4628      	mov	r0, r5
 80084e0:	47b8      	blx	r7
 80084e2:	3001      	adds	r0, #1
 80084e4:	f43f af51 	beq.w	800838a <_printf_float+0xc2>
 80084e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084ec:	429a      	cmp	r2, r3
 80084ee:	db02      	blt.n	80084f6 <_printf_float+0x22e>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	07d8      	lsls	r0, r3, #31
 80084f4:	d510      	bpl.n	8008518 <_printf_float+0x250>
 80084f6:	ee18 3a10 	vmov	r3, s16
 80084fa:	4652      	mov	r2, sl
 80084fc:	4631      	mov	r1, r6
 80084fe:	4628      	mov	r0, r5
 8008500:	47b8      	blx	r7
 8008502:	3001      	adds	r0, #1
 8008504:	f43f af41 	beq.w	800838a <_printf_float+0xc2>
 8008508:	f04f 0800 	mov.w	r8, #0
 800850c:	f104 091a 	add.w	r9, r4, #26
 8008510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008512:	3b01      	subs	r3, #1
 8008514:	4543      	cmp	r3, r8
 8008516:	dc09      	bgt.n	800852c <_printf_float+0x264>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	079b      	lsls	r3, r3, #30
 800851c:	f100 8105 	bmi.w	800872a <_printf_float+0x462>
 8008520:	68e0      	ldr	r0, [r4, #12]
 8008522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008524:	4298      	cmp	r0, r3
 8008526:	bfb8      	it	lt
 8008528:	4618      	movlt	r0, r3
 800852a:	e730      	b.n	800838e <_printf_float+0xc6>
 800852c:	2301      	movs	r3, #1
 800852e:	464a      	mov	r2, r9
 8008530:	4631      	mov	r1, r6
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	f43f af27 	beq.w	800838a <_printf_float+0xc2>
 800853c:	f108 0801 	add.w	r8, r8, #1
 8008540:	e7e6      	b.n	8008510 <_printf_float+0x248>
 8008542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008544:	2b00      	cmp	r3, #0
 8008546:	dc39      	bgt.n	80085bc <_printf_float+0x2f4>
 8008548:	4a1b      	ldr	r2, [pc, #108]	; (80085b8 <_printf_float+0x2f0>)
 800854a:	2301      	movs	r3, #1
 800854c:	4631      	mov	r1, r6
 800854e:	4628      	mov	r0, r5
 8008550:	47b8      	blx	r7
 8008552:	3001      	adds	r0, #1
 8008554:	f43f af19 	beq.w	800838a <_printf_float+0xc2>
 8008558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800855c:	4313      	orrs	r3, r2
 800855e:	d102      	bne.n	8008566 <_printf_float+0x29e>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	07d9      	lsls	r1, r3, #31
 8008564:	d5d8      	bpl.n	8008518 <_printf_float+0x250>
 8008566:	ee18 3a10 	vmov	r3, s16
 800856a:	4652      	mov	r2, sl
 800856c:	4631      	mov	r1, r6
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f af09 	beq.w	800838a <_printf_float+0xc2>
 8008578:	f04f 0900 	mov.w	r9, #0
 800857c:	f104 0a1a 	add.w	sl, r4, #26
 8008580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008582:	425b      	negs	r3, r3
 8008584:	454b      	cmp	r3, r9
 8008586:	dc01      	bgt.n	800858c <_printf_float+0x2c4>
 8008588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858a:	e792      	b.n	80084b2 <_printf_float+0x1ea>
 800858c:	2301      	movs	r3, #1
 800858e:	4652      	mov	r2, sl
 8008590:	4631      	mov	r1, r6
 8008592:	4628      	mov	r0, r5
 8008594:	47b8      	blx	r7
 8008596:	3001      	adds	r0, #1
 8008598:	f43f aef7 	beq.w	800838a <_printf_float+0xc2>
 800859c:	f109 0901 	add.w	r9, r9, #1
 80085a0:	e7ee      	b.n	8008580 <_printf_float+0x2b8>
 80085a2:	bf00      	nop
 80085a4:	7fefffff 	.word	0x7fefffff
 80085a8:	0800e060 	.word	0x0800e060
 80085ac:	0800e064 	.word	0x0800e064
 80085b0:	0800e06c 	.word	0x0800e06c
 80085b4:	0800e068 	.word	0x0800e068
 80085b8:	0800e070 	.word	0x0800e070
 80085bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085c0:	429a      	cmp	r2, r3
 80085c2:	bfa8      	it	ge
 80085c4:	461a      	movge	r2, r3
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	4691      	mov	r9, r2
 80085ca:	dc37      	bgt.n	800863c <_printf_float+0x374>
 80085cc:	f04f 0b00 	mov.w	fp, #0
 80085d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085d4:	f104 021a 	add.w	r2, r4, #26
 80085d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085da:	9305      	str	r3, [sp, #20]
 80085dc:	eba3 0309 	sub.w	r3, r3, r9
 80085e0:	455b      	cmp	r3, fp
 80085e2:	dc33      	bgt.n	800864c <_printf_float+0x384>
 80085e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085e8:	429a      	cmp	r2, r3
 80085ea:	db3b      	blt.n	8008664 <_printf_float+0x39c>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	07da      	lsls	r2, r3, #31
 80085f0:	d438      	bmi.n	8008664 <_printf_float+0x39c>
 80085f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085f4:	9b05      	ldr	r3, [sp, #20]
 80085f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	eba2 0901 	sub.w	r9, r2, r1
 80085fe:	4599      	cmp	r9, r3
 8008600:	bfa8      	it	ge
 8008602:	4699      	movge	r9, r3
 8008604:	f1b9 0f00 	cmp.w	r9, #0
 8008608:	dc35      	bgt.n	8008676 <_printf_float+0x3ae>
 800860a:	f04f 0800 	mov.w	r8, #0
 800860e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008612:	f104 0a1a 	add.w	sl, r4, #26
 8008616:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800861a:	1a9b      	subs	r3, r3, r2
 800861c:	eba3 0309 	sub.w	r3, r3, r9
 8008620:	4543      	cmp	r3, r8
 8008622:	f77f af79 	ble.w	8008518 <_printf_float+0x250>
 8008626:	2301      	movs	r3, #1
 8008628:	4652      	mov	r2, sl
 800862a:	4631      	mov	r1, r6
 800862c:	4628      	mov	r0, r5
 800862e:	47b8      	blx	r7
 8008630:	3001      	adds	r0, #1
 8008632:	f43f aeaa 	beq.w	800838a <_printf_float+0xc2>
 8008636:	f108 0801 	add.w	r8, r8, #1
 800863a:	e7ec      	b.n	8008616 <_printf_float+0x34e>
 800863c:	4613      	mov	r3, r2
 800863e:	4631      	mov	r1, r6
 8008640:	4642      	mov	r2, r8
 8008642:	4628      	mov	r0, r5
 8008644:	47b8      	blx	r7
 8008646:	3001      	adds	r0, #1
 8008648:	d1c0      	bne.n	80085cc <_printf_float+0x304>
 800864a:	e69e      	b.n	800838a <_printf_float+0xc2>
 800864c:	2301      	movs	r3, #1
 800864e:	4631      	mov	r1, r6
 8008650:	4628      	mov	r0, r5
 8008652:	9205      	str	r2, [sp, #20]
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	f43f ae97 	beq.w	800838a <_printf_float+0xc2>
 800865c:	9a05      	ldr	r2, [sp, #20]
 800865e:	f10b 0b01 	add.w	fp, fp, #1
 8008662:	e7b9      	b.n	80085d8 <_printf_float+0x310>
 8008664:	ee18 3a10 	vmov	r3, s16
 8008668:	4652      	mov	r2, sl
 800866a:	4631      	mov	r1, r6
 800866c:	4628      	mov	r0, r5
 800866e:	47b8      	blx	r7
 8008670:	3001      	adds	r0, #1
 8008672:	d1be      	bne.n	80085f2 <_printf_float+0x32a>
 8008674:	e689      	b.n	800838a <_printf_float+0xc2>
 8008676:	9a05      	ldr	r2, [sp, #20]
 8008678:	464b      	mov	r3, r9
 800867a:	4442      	add	r2, r8
 800867c:	4631      	mov	r1, r6
 800867e:	4628      	mov	r0, r5
 8008680:	47b8      	blx	r7
 8008682:	3001      	adds	r0, #1
 8008684:	d1c1      	bne.n	800860a <_printf_float+0x342>
 8008686:	e680      	b.n	800838a <_printf_float+0xc2>
 8008688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800868a:	2a01      	cmp	r2, #1
 800868c:	dc01      	bgt.n	8008692 <_printf_float+0x3ca>
 800868e:	07db      	lsls	r3, r3, #31
 8008690:	d538      	bpl.n	8008704 <_printf_float+0x43c>
 8008692:	2301      	movs	r3, #1
 8008694:	4642      	mov	r2, r8
 8008696:	4631      	mov	r1, r6
 8008698:	4628      	mov	r0, r5
 800869a:	47b8      	blx	r7
 800869c:	3001      	adds	r0, #1
 800869e:	f43f ae74 	beq.w	800838a <_printf_float+0xc2>
 80086a2:	ee18 3a10 	vmov	r3, s16
 80086a6:	4652      	mov	r2, sl
 80086a8:	4631      	mov	r1, r6
 80086aa:	4628      	mov	r0, r5
 80086ac:	47b8      	blx	r7
 80086ae:	3001      	adds	r0, #1
 80086b0:	f43f ae6b 	beq.w	800838a <_printf_float+0xc2>
 80086b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086b8:	2200      	movs	r2, #0
 80086ba:	2300      	movs	r3, #0
 80086bc:	f7f8 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 80086c0:	b9d8      	cbnz	r0, 80086fa <_printf_float+0x432>
 80086c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c4:	f108 0201 	add.w	r2, r8, #1
 80086c8:	3b01      	subs	r3, #1
 80086ca:	4631      	mov	r1, r6
 80086cc:	4628      	mov	r0, r5
 80086ce:	47b8      	blx	r7
 80086d0:	3001      	adds	r0, #1
 80086d2:	d10e      	bne.n	80086f2 <_printf_float+0x42a>
 80086d4:	e659      	b.n	800838a <_printf_float+0xc2>
 80086d6:	2301      	movs	r3, #1
 80086d8:	4652      	mov	r2, sl
 80086da:	4631      	mov	r1, r6
 80086dc:	4628      	mov	r0, r5
 80086de:	47b8      	blx	r7
 80086e0:	3001      	adds	r0, #1
 80086e2:	f43f ae52 	beq.w	800838a <_printf_float+0xc2>
 80086e6:	f108 0801 	add.w	r8, r8, #1
 80086ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ec:	3b01      	subs	r3, #1
 80086ee:	4543      	cmp	r3, r8
 80086f0:	dcf1      	bgt.n	80086d6 <_printf_float+0x40e>
 80086f2:	464b      	mov	r3, r9
 80086f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80086f8:	e6dc      	b.n	80084b4 <_printf_float+0x1ec>
 80086fa:	f04f 0800 	mov.w	r8, #0
 80086fe:	f104 0a1a 	add.w	sl, r4, #26
 8008702:	e7f2      	b.n	80086ea <_printf_float+0x422>
 8008704:	2301      	movs	r3, #1
 8008706:	4642      	mov	r2, r8
 8008708:	e7df      	b.n	80086ca <_printf_float+0x402>
 800870a:	2301      	movs	r3, #1
 800870c:	464a      	mov	r2, r9
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	f43f ae38 	beq.w	800838a <_printf_float+0xc2>
 800871a:	f108 0801 	add.w	r8, r8, #1
 800871e:	68e3      	ldr	r3, [r4, #12]
 8008720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008722:	1a5b      	subs	r3, r3, r1
 8008724:	4543      	cmp	r3, r8
 8008726:	dcf0      	bgt.n	800870a <_printf_float+0x442>
 8008728:	e6fa      	b.n	8008520 <_printf_float+0x258>
 800872a:	f04f 0800 	mov.w	r8, #0
 800872e:	f104 0919 	add.w	r9, r4, #25
 8008732:	e7f4      	b.n	800871e <_printf_float+0x456>

08008734 <_printf_common>:
 8008734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008738:	4616      	mov	r6, r2
 800873a:	4699      	mov	r9, r3
 800873c:	688a      	ldr	r2, [r1, #8]
 800873e:	690b      	ldr	r3, [r1, #16]
 8008740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008744:	4293      	cmp	r3, r2
 8008746:	bfb8      	it	lt
 8008748:	4613      	movlt	r3, r2
 800874a:	6033      	str	r3, [r6, #0]
 800874c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008750:	4607      	mov	r7, r0
 8008752:	460c      	mov	r4, r1
 8008754:	b10a      	cbz	r2, 800875a <_printf_common+0x26>
 8008756:	3301      	adds	r3, #1
 8008758:	6033      	str	r3, [r6, #0]
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	0699      	lsls	r1, r3, #26
 800875e:	bf42      	ittt	mi
 8008760:	6833      	ldrmi	r3, [r6, #0]
 8008762:	3302      	addmi	r3, #2
 8008764:	6033      	strmi	r3, [r6, #0]
 8008766:	6825      	ldr	r5, [r4, #0]
 8008768:	f015 0506 	ands.w	r5, r5, #6
 800876c:	d106      	bne.n	800877c <_printf_common+0x48>
 800876e:	f104 0a19 	add.w	sl, r4, #25
 8008772:	68e3      	ldr	r3, [r4, #12]
 8008774:	6832      	ldr	r2, [r6, #0]
 8008776:	1a9b      	subs	r3, r3, r2
 8008778:	42ab      	cmp	r3, r5
 800877a:	dc26      	bgt.n	80087ca <_printf_common+0x96>
 800877c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008780:	1e13      	subs	r3, r2, #0
 8008782:	6822      	ldr	r2, [r4, #0]
 8008784:	bf18      	it	ne
 8008786:	2301      	movne	r3, #1
 8008788:	0692      	lsls	r2, r2, #26
 800878a:	d42b      	bmi.n	80087e4 <_printf_common+0xb0>
 800878c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008790:	4649      	mov	r1, r9
 8008792:	4638      	mov	r0, r7
 8008794:	47c0      	blx	r8
 8008796:	3001      	adds	r0, #1
 8008798:	d01e      	beq.n	80087d8 <_printf_common+0xa4>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	68e5      	ldr	r5, [r4, #12]
 800879e:	6832      	ldr	r2, [r6, #0]
 80087a0:	f003 0306 	and.w	r3, r3, #6
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	bf08      	it	eq
 80087a8:	1aad      	subeq	r5, r5, r2
 80087aa:	68a3      	ldr	r3, [r4, #8]
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	bf0c      	ite	eq
 80087b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087b4:	2500      	movne	r5, #0
 80087b6:	4293      	cmp	r3, r2
 80087b8:	bfc4      	itt	gt
 80087ba:	1a9b      	subgt	r3, r3, r2
 80087bc:	18ed      	addgt	r5, r5, r3
 80087be:	2600      	movs	r6, #0
 80087c0:	341a      	adds	r4, #26
 80087c2:	42b5      	cmp	r5, r6
 80087c4:	d11a      	bne.n	80087fc <_printf_common+0xc8>
 80087c6:	2000      	movs	r0, #0
 80087c8:	e008      	b.n	80087dc <_printf_common+0xa8>
 80087ca:	2301      	movs	r3, #1
 80087cc:	4652      	mov	r2, sl
 80087ce:	4649      	mov	r1, r9
 80087d0:	4638      	mov	r0, r7
 80087d2:	47c0      	blx	r8
 80087d4:	3001      	adds	r0, #1
 80087d6:	d103      	bne.n	80087e0 <_printf_common+0xac>
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295
 80087dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e0:	3501      	adds	r5, #1
 80087e2:	e7c6      	b.n	8008772 <_printf_common+0x3e>
 80087e4:	18e1      	adds	r1, r4, r3
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	2030      	movs	r0, #48	; 0x30
 80087ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087ee:	4422      	add	r2, r4
 80087f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087f8:	3302      	adds	r3, #2
 80087fa:	e7c7      	b.n	800878c <_printf_common+0x58>
 80087fc:	2301      	movs	r3, #1
 80087fe:	4622      	mov	r2, r4
 8008800:	4649      	mov	r1, r9
 8008802:	4638      	mov	r0, r7
 8008804:	47c0      	blx	r8
 8008806:	3001      	adds	r0, #1
 8008808:	d0e6      	beq.n	80087d8 <_printf_common+0xa4>
 800880a:	3601      	adds	r6, #1
 800880c:	e7d9      	b.n	80087c2 <_printf_common+0x8e>
	...

08008810 <_printf_i>:
 8008810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008814:	460c      	mov	r4, r1
 8008816:	4691      	mov	r9, r2
 8008818:	7e27      	ldrb	r7, [r4, #24]
 800881a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800881c:	2f78      	cmp	r7, #120	; 0x78
 800881e:	4680      	mov	r8, r0
 8008820:	469a      	mov	sl, r3
 8008822:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008826:	d807      	bhi.n	8008838 <_printf_i+0x28>
 8008828:	2f62      	cmp	r7, #98	; 0x62
 800882a:	d80a      	bhi.n	8008842 <_printf_i+0x32>
 800882c:	2f00      	cmp	r7, #0
 800882e:	f000 80d8 	beq.w	80089e2 <_printf_i+0x1d2>
 8008832:	2f58      	cmp	r7, #88	; 0x58
 8008834:	f000 80a3 	beq.w	800897e <_printf_i+0x16e>
 8008838:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800883c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008840:	e03a      	b.n	80088b8 <_printf_i+0xa8>
 8008842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008846:	2b15      	cmp	r3, #21
 8008848:	d8f6      	bhi.n	8008838 <_printf_i+0x28>
 800884a:	a001      	add	r0, pc, #4	; (adr r0, 8008850 <_printf_i+0x40>)
 800884c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008850:	080088a9 	.word	0x080088a9
 8008854:	080088bd 	.word	0x080088bd
 8008858:	08008839 	.word	0x08008839
 800885c:	08008839 	.word	0x08008839
 8008860:	08008839 	.word	0x08008839
 8008864:	08008839 	.word	0x08008839
 8008868:	080088bd 	.word	0x080088bd
 800886c:	08008839 	.word	0x08008839
 8008870:	08008839 	.word	0x08008839
 8008874:	08008839 	.word	0x08008839
 8008878:	08008839 	.word	0x08008839
 800887c:	080089c9 	.word	0x080089c9
 8008880:	080088ed 	.word	0x080088ed
 8008884:	080089ab 	.word	0x080089ab
 8008888:	08008839 	.word	0x08008839
 800888c:	08008839 	.word	0x08008839
 8008890:	080089eb 	.word	0x080089eb
 8008894:	08008839 	.word	0x08008839
 8008898:	080088ed 	.word	0x080088ed
 800889c:	08008839 	.word	0x08008839
 80088a0:	08008839 	.word	0x08008839
 80088a4:	080089b3 	.word	0x080089b3
 80088a8:	680b      	ldr	r3, [r1, #0]
 80088aa:	1d1a      	adds	r2, r3, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	600a      	str	r2, [r1, #0]
 80088b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088b8:	2301      	movs	r3, #1
 80088ba:	e0a3      	b.n	8008a04 <_printf_i+0x1f4>
 80088bc:	6825      	ldr	r5, [r4, #0]
 80088be:	6808      	ldr	r0, [r1, #0]
 80088c0:	062e      	lsls	r6, r5, #24
 80088c2:	f100 0304 	add.w	r3, r0, #4
 80088c6:	d50a      	bpl.n	80088de <_printf_i+0xce>
 80088c8:	6805      	ldr	r5, [r0, #0]
 80088ca:	600b      	str	r3, [r1, #0]
 80088cc:	2d00      	cmp	r5, #0
 80088ce:	da03      	bge.n	80088d8 <_printf_i+0xc8>
 80088d0:	232d      	movs	r3, #45	; 0x2d
 80088d2:	426d      	negs	r5, r5
 80088d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d8:	485e      	ldr	r0, [pc, #376]	; (8008a54 <_printf_i+0x244>)
 80088da:	230a      	movs	r3, #10
 80088dc:	e019      	b.n	8008912 <_printf_i+0x102>
 80088de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80088e2:	6805      	ldr	r5, [r0, #0]
 80088e4:	600b      	str	r3, [r1, #0]
 80088e6:	bf18      	it	ne
 80088e8:	b22d      	sxthne	r5, r5
 80088ea:	e7ef      	b.n	80088cc <_printf_i+0xbc>
 80088ec:	680b      	ldr	r3, [r1, #0]
 80088ee:	6825      	ldr	r5, [r4, #0]
 80088f0:	1d18      	adds	r0, r3, #4
 80088f2:	6008      	str	r0, [r1, #0]
 80088f4:	0628      	lsls	r0, r5, #24
 80088f6:	d501      	bpl.n	80088fc <_printf_i+0xec>
 80088f8:	681d      	ldr	r5, [r3, #0]
 80088fa:	e002      	b.n	8008902 <_printf_i+0xf2>
 80088fc:	0669      	lsls	r1, r5, #25
 80088fe:	d5fb      	bpl.n	80088f8 <_printf_i+0xe8>
 8008900:	881d      	ldrh	r5, [r3, #0]
 8008902:	4854      	ldr	r0, [pc, #336]	; (8008a54 <_printf_i+0x244>)
 8008904:	2f6f      	cmp	r7, #111	; 0x6f
 8008906:	bf0c      	ite	eq
 8008908:	2308      	moveq	r3, #8
 800890a:	230a      	movne	r3, #10
 800890c:	2100      	movs	r1, #0
 800890e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008912:	6866      	ldr	r6, [r4, #4]
 8008914:	60a6      	str	r6, [r4, #8]
 8008916:	2e00      	cmp	r6, #0
 8008918:	bfa2      	ittt	ge
 800891a:	6821      	ldrge	r1, [r4, #0]
 800891c:	f021 0104 	bicge.w	r1, r1, #4
 8008920:	6021      	strge	r1, [r4, #0]
 8008922:	b90d      	cbnz	r5, 8008928 <_printf_i+0x118>
 8008924:	2e00      	cmp	r6, #0
 8008926:	d04d      	beq.n	80089c4 <_printf_i+0x1b4>
 8008928:	4616      	mov	r6, r2
 800892a:	fbb5 f1f3 	udiv	r1, r5, r3
 800892e:	fb03 5711 	mls	r7, r3, r1, r5
 8008932:	5dc7      	ldrb	r7, [r0, r7]
 8008934:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008938:	462f      	mov	r7, r5
 800893a:	42bb      	cmp	r3, r7
 800893c:	460d      	mov	r5, r1
 800893e:	d9f4      	bls.n	800892a <_printf_i+0x11a>
 8008940:	2b08      	cmp	r3, #8
 8008942:	d10b      	bne.n	800895c <_printf_i+0x14c>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	07df      	lsls	r7, r3, #31
 8008948:	d508      	bpl.n	800895c <_printf_i+0x14c>
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	6861      	ldr	r1, [r4, #4]
 800894e:	4299      	cmp	r1, r3
 8008950:	bfde      	ittt	le
 8008952:	2330      	movle	r3, #48	; 0x30
 8008954:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008958:	f106 36ff 	addle.w	r6, r6, #4294967295
 800895c:	1b92      	subs	r2, r2, r6
 800895e:	6122      	str	r2, [r4, #16]
 8008960:	f8cd a000 	str.w	sl, [sp]
 8008964:	464b      	mov	r3, r9
 8008966:	aa03      	add	r2, sp, #12
 8008968:	4621      	mov	r1, r4
 800896a:	4640      	mov	r0, r8
 800896c:	f7ff fee2 	bl	8008734 <_printf_common>
 8008970:	3001      	adds	r0, #1
 8008972:	d14c      	bne.n	8008a0e <_printf_i+0x1fe>
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	b004      	add	sp, #16
 800897a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897e:	4835      	ldr	r0, [pc, #212]	; (8008a54 <_printf_i+0x244>)
 8008980:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	680e      	ldr	r6, [r1, #0]
 8008988:	061f      	lsls	r7, r3, #24
 800898a:	f856 5b04 	ldr.w	r5, [r6], #4
 800898e:	600e      	str	r6, [r1, #0]
 8008990:	d514      	bpl.n	80089bc <_printf_i+0x1ac>
 8008992:	07d9      	lsls	r1, r3, #31
 8008994:	bf44      	itt	mi
 8008996:	f043 0320 	orrmi.w	r3, r3, #32
 800899a:	6023      	strmi	r3, [r4, #0]
 800899c:	b91d      	cbnz	r5, 80089a6 <_printf_i+0x196>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	f023 0320 	bic.w	r3, r3, #32
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	2310      	movs	r3, #16
 80089a8:	e7b0      	b.n	800890c <_printf_i+0xfc>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	f043 0320 	orr.w	r3, r3, #32
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	2378      	movs	r3, #120	; 0x78
 80089b4:	4828      	ldr	r0, [pc, #160]	; (8008a58 <_printf_i+0x248>)
 80089b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089ba:	e7e3      	b.n	8008984 <_printf_i+0x174>
 80089bc:	065e      	lsls	r6, r3, #25
 80089be:	bf48      	it	mi
 80089c0:	b2ad      	uxthmi	r5, r5
 80089c2:	e7e6      	b.n	8008992 <_printf_i+0x182>
 80089c4:	4616      	mov	r6, r2
 80089c6:	e7bb      	b.n	8008940 <_printf_i+0x130>
 80089c8:	680b      	ldr	r3, [r1, #0]
 80089ca:	6826      	ldr	r6, [r4, #0]
 80089cc:	6960      	ldr	r0, [r4, #20]
 80089ce:	1d1d      	adds	r5, r3, #4
 80089d0:	600d      	str	r5, [r1, #0]
 80089d2:	0635      	lsls	r5, r6, #24
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	d501      	bpl.n	80089dc <_printf_i+0x1cc>
 80089d8:	6018      	str	r0, [r3, #0]
 80089da:	e002      	b.n	80089e2 <_printf_i+0x1d2>
 80089dc:	0671      	lsls	r1, r6, #25
 80089de:	d5fb      	bpl.n	80089d8 <_printf_i+0x1c8>
 80089e0:	8018      	strh	r0, [r3, #0]
 80089e2:	2300      	movs	r3, #0
 80089e4:	6123      	str	r3, [r4, #16]
 80089e6:	4616      	mov	r6, r2
 80089e8:	e7ba      	b.n	8008960 <_printf_i+0x150>
 80089ea:	680b      	ldr	r3, [r1, #0]
 80089ec:	1d1a      	adds	r2, r3, #4
 80089ee:	600a      	str	r2, [r1, #0]
 80089f0:	681e      	ldr	r6, [r3, #0]
 80089f2:	6862      	ldr	r2, [r4, #4]
 80089f4:	2100      	movs	r1, #0
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7f7 fbf2 	bl	80001e0 <memchr>
 80089fc:	b108      	cbz	r0, 8008a02 <_printf_i+0x1f2>
 80089fe:	1b80      	subs	r0, r0, r6
 8008a00:	6060      	str	r0, [r4, #4]
 8008a02:	6863      	ldr	r3, [r4, #4]
 8008a04:	6123      	str	r3, [r4, #16]
 8008a06:	2300      	movs	r3, #0
 8008a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a0c:	e7a8      	b.n	8008960 <_printf_i+0x150>
 8008a0e:	6923      	ldr	r3, [r4, #16]
 8008a10:	4632      	mov	r2, r6
 8008a12:	4649      	mov	r1, r9
 8008a14:	4640      	mov	r0, r8
 8008a16:	47d0      	blx	sl
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d0ab      	beq.n	8008974 <_printf_i+0x164>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	079b      	lsls	r3, r3, #30
 8008a20:	d413      	bmi.n	8008a4a <_printf_i+0x23a>
 8008a22:	68e0      	ldr	r0, [r4, #12]
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	4298      	cmp	r0, r3
 8008a28:	bfb8      	it	lt
 8008a2a:	4618      	movlt	r0, r3
 8008a2c:	e7a4      	b.n	8008978 <_printf_i+0x168>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4632      	mov	r2, r6
 8008a32:	4649      	mov	r1, r9
 8008a34:	4640      	mov	r0, r8
 8008a36:	47d0      	blx	sl
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d09b      	beq.n	8008974 <_printf_i+0x164>
 8008a3c:	3501      	adds	r5, #1
 8008a3e:	68e3      	ldr	r3, [r4, #12]
 8008a40:	9903      	ldr	r1, [sp, #12]
 8008a42:	1a5b      	subs	r3, r3, r1
 8008a44:	42ab      	cmp	r3, r5
 8008a46:	dcf2      	bgt.n	8008a2e <_printf_i+0x21e>
 8008a48:	e7eb      	b.n	8008a22 <_printf_i+0x212>
 8008a4a:	2500      	movs	r5, #0
 8008a4c:	f104 0619 	add.w	r6, r4, #25
 8008a50:	e7f5      	b.n	8008a3e <_printf_i+0x22e>
 8008a52:	bf00      	nop
 8008a54:	0800e072 	.word	0x0800e072
 8008a58:	0800e083 	.word	0x0800e083

08008a5c <_sbrk_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	4d06      	ldr	r5, [pc, #24]	; (8008a78 <_sbrk_r+0x1c>)
 8008a60:	2300      	movs	r3, #0
 8008a62:	4604      	mov	r4, r0
 8008a64:	4608      	mov	r0, r1
 8008a66:	602b      	str	r3, [r5, #0]
 8008a68:	f7f9 f9e0 	bl	8001e2c <_sbrk>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d102      	bne.n	8008a76 <_sbrk_r+0x1a>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	b103      	cbz	r3, 8008a76 <_sbrk_r+0x1a>
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	bd38      	pop	{r3, r4, r5, pc}
 8008a78:	20001140 	.word	0x20001140

08008a7c <siprintf>:
 8008a7c:	b40e      	push	{r1, r2, r3}
 8008a7e:	b500      	push	{lr}
 8008a80:	b09c      	sub	sp, #112	; 0x70
 8008a82:	ab1d      	add	r3, sp, #116	; 0x74
 8008a84:	9002      	str	r0, [sp, #8]
 8008a86:	9006      	str	r0, [sp, #24]
 8008a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a8c:	4809      	ldr	r0, [pc, #36]	; (8008ab4 <siprintf+0x38>)
 8008a8e:	9107      	str	r1, [sp, #28]
 8008a90:	9104      	str	r1, [sp, #16]
 8008a92:	4909      	ldr	r1, [pc, #36]	; (8008ab8 <siprintf+0x3c>)
 8008a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a98:	9105      	str	r1, [sp, #20]
 8008a9a:	6800      	ldr	r0, [r0, #0]
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	a902      	add	r1, sp, #8
 8008aa0:	f001 faa4 	bl	8009fec <_svfiprintf_r>
 8008aa4:	9b02      	ldr	r3, [sp, #8]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	701a      	strb	r2, [r3, #0]
 8008aaa:	b01c      	add	sp, #112	; 0x70
 8008aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ab0:	b003      	add	sp, #12
 8008ab2:	4770      	bx	lr
 8008ab4:	20000c1c 	.word	0x20000c1c
 8008ab8:	ffff0208 	.word	0xffff0208

08008abc <quorem>:
 8008abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	6903      	ldr	r3, [r0, #16]
 8008ac2:	690c      	ldr	r4, [r1, #16]
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	f2c0 8081 	blt.w	8008bce <quorem+0x112>
 8008acc:	3c01      	subs	r4, #1
 8008ace:	f101 0814 	add.w	r8, r1, #20
 8008ad2:	f100 0514 	add.w	r5, r0, #20
 8008ad6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ae0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008aec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008af0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008af4:	d331      	bcc.n	8008b5a <quorem+0x9e>
 8008af6:	f04f 0e00 	mov.w	lr, #0
 8008afa:	4640      	mov	r0, r8
 8008afc:	46ac      	mov	ip, r5
 8008afe:	46f2      	mov	sl, lr
 8008b00:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b04:	b293      	uxth	r3, r2
 8008b06:	fb06 e303 	mla	r3, r6, r3, lr
 8008b0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	ebaa 0303 	sub.w	r3, sl, r3
 8008b14:	0c12      	lsrs	r2, r2, #16
 8008b16:	f8dc a000 	ldr.w	sl, [ip]
 8008b1a:	fb06 e202 	mla	r2, r6, r2, lr
 8008b1e:	fa13 f38a 	uxtah	r3, r3, sl
 8008b22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b26:	fa1f fa82 	uxth.w	sl, r2
 8008b2a:	f8dc 2000 	ldr.w	r2, [ip]
 8008b2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008b32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b3c:	4581      	cmp	r9, r0
 8008b3e:	f84c 3b04 	str.w	r3, [ip], #4
 8008b42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b46:	d2db      	bcs.n	8008b00 <quorem+0x44>
 8008b48:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b4c:	b92b      	cbnz	r3, 8008b5a <quorem+0x9e>
 8008b4e:	9b01      	ldr	r3, [sp, #4]
 8008b50:	3b04      	subs	r3, #4
 8008b52:	429d      	cmp	r5, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	d32e      	bcc.n	8008bb6 <quorem+0xfa>
 8008b58:	613c      	str	r4, [r7, #16]
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	f001 f8b6 	bl	8009ccc <__mcmp>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	db24      	blt.n	8008bae <quorem+0xf2>
 8008b64:	3601      	adds	r6, #1
 8008b66:	4628      	mov	r0, r5
 8008b68:	f04f 0c00 	mov.w	ip, #0
 8008b6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b70:	f8d0 e000 	ldr.w	lr, [r0]
 8008b74:	b293      	uxth	r3, r2
 8008b76:	ebac 0303 	sub.w	r3, ip, r3
 8008b7a:	0c12      	lsrs	r2, r2, #16
 8008b7c:	fa13 f38e 	uxtah	r3, r3, lr
 8008b80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b8e:	45c1      	cmp	r9, r8
 8008b90:	f840 3b04 	str.w	r3, [r0], #4
 8008b94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b98:	d2e8      	bcs.n	8008b6c <quorem+0xb0>
 8008b9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ba2:	b922      	cbnz	r2, 8008bae <quorem+0xf2>
 8008ba4:	3b04      	subs	r3, #4
 8008ba6:	429d      	cmp	r5, r3
 8008ba8:	461a      	mov	r2, r3
 8008baa:	d30a      	bcc.n	8008bc2 <quorem+0x106>
 8008bac:	613c      	str	r4, [r7, #16]
 8008bae:	4630      	mov	r0, r6
 8008bb0:	b003      	add	sp, #12
 8008bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb6:	6812      	ldr	r2, [r2, #0]
 8008bb8:	3b04      	subs	r3, #4
 8008bba:	2a00      	cmp	r2, #0
 8008bbc:	d1cc      	bne.n	8008b58 <quorem+0x9c>
 8008bbe:	3c01      	subs	r4, #1
 8008bc0:	e7c7      	b.n	8008b52 <quorem+0x96>
 8008bc2:	6812      	ldr	r2, [r2, #0]
 8008bc4:	3b04      	subs	r3, #4
 8008bc6:	2a00      	cmp	r2, #0
 8008bc8:	d1f0      	bne.n	8008bac <quorem+0xf0>
 8008bca:	3c01      	subs	r4, #1
 8008bcc:	e7eb      	b.n	8008ba6 <quorem+0xea>
 8008bce:	2000      	movs	r0, #0
 8008bd0:	e7ee      	b.n	8008bb0 <quorem+0xf4>
 8008bd2:	0000      	movs	r0, r0
 8008bd4:	0000      	movs	r0, r0
	...

08008bd8 <_dtoa_r>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	ed2d 8b02 	vpush	{d8}
 8008be0:	ec57 6b10 	vmov	r6, r7, d0
 8008be4:	b095      	sub	sp, #84	; 0x54
 8008be6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008be8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bec:	9105      	str	r1, [sp, #20]
 8008bee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bf8:	b975      	cbnz	r5, 8008c18 <_dtoa_r+0x40>
 8008bfa:	2010      	movs	r0, #16
 8008bfc:	f7ff f9fc 	bl	8007ff8 <malloc>
 8008c00:	4602      	mov	r2, r0
 8008c02:	6260      	str	r0, [r4, #36]	; 0x24
 8008c04:	b920      	cbnz	r0, 8008c10 <_dtoa_r+0x38>
 8008c06:	4bb2      	ldr	r3, [pc, #712]	; (8008ed0 <_dtoa_r+0x2f8>)
 8008c08:	21ea      	movs	r1, #234	; 0xea
 8008c0a:	48b2      	ldr	r0, [pc, #712]	; (8008ed4 <_dtoa_r+0x2fc>)
 8008c0c:	f001 faee 	bl	800a1ec <__assert_func>
 8008c10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c14:	6005      	str	r5, [r0, #0]
 8008c16:	60c5      	str	r5, [r0, #12]
 8008c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c1a:	6819      	ldr	r1, [r3, #0]
 8008c1c:	b151      	cbz	r1, 8008c34 <_dtoa_r+0x5c>
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	604a      	str	r2, [r1, #4]
 8008c22:	2301      	movs	r3, #1
 8008c24:	4093      	lsls	r3, r2
 8008c26:	608b      	str	r3, [r1, #8]
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 fe11 	bl	8009850 <_Bfree>
 8008c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c30:	2200      	movs	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	1e3b      	subs	r3, r7, #0
 8008c36:	bfb9      	ittee	lt
 8008c38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c3c:	9303      	strlt	r3, [sp, #12]
 8008c3e:	2300      	movge	r3, #0
 8008c40:	f8c8 3000 	strge.w	r3, [r8]
 8008c44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008c48:	4ba3      	ldr	r3, [pc, #652]	; (8008ed8 <_dtoa_r+0x300>)
 8008c4a:	bfbc      	itt	lt
 8008c4c:	2201      	movlt	r2, #1
 8008c4e:	f8c8 2000 	strlt.w	r2, [r8]
 8008c52:	ea33 0309 	bics.w	r3, r3, r9
 8008c56:	d11b      	bne.n	8008c90 <_dtoa_r+0xb8>
 8008c58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c64:	4333      	orrs	r3, r6
 8008c66:	f000 857a 	beq.w	800975e <_dtoa_r+0xb86>
 8008c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c6c:	b963      	cbnz	r3, 8008c88 <_dtoa_r+0xb0>
 8008c6e:	4b9b      	ldr	r3, [pc, #620]	; (8008edc <_dtoa_r+0x304>)
 8008c70:	e024      	b.n	8008cbc <_dtoa_r+0xe4>
 8008c72:	4b9b      	ldr	r3, [pc, #620]	; (8008ee0 <_dtoa_r+0x308>)
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	3308      	adds	r3, #8
 8008c78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	9800      	ldr	r0, [sp, #0]
 8008c7e:	b015      	add	sp, #84	; 0x54
 8008c80:	ecbd 8b02 	vpop	{d8}
 8008c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c88:	4b94      	ldr	r3, [pc, #592]	; (8008edc <_dtoa_r+0x304>)
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	3303      	adds	r3, #3
 8008c8e:	e7f3      	b.n	8008c78 <_dtoa_r+0xa0>
 8008c90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c94:	2200      	movs	r2, #0
 8008c96:	ec51 0b17 	vmov	r0, r1, d7
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008ca0:	f7f7 ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	b158      	cbz	r0, 8008cc0 <_dtoa_r+0xe8>
 8008ca8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008caa:	2301      	movs	r3, #1
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 8551 	beq.w	8009758 <_dtoa_r+0xb80>
 8008cb6:	488b      	ldr	r0, [pc, #556]	; (8008ee4 <_dtoa_r+0x30c>)
 8008cb8:	6018      	str	r0, [r3, #0]
 8008cba:	1e43      	subs	r3, r0, #1
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	e7dd      	b.n	8008c7c <_dtoa_r+0xa4>
 8008cc0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008cc4:	aa12      	add	r2, sp, #72	; 0x48
 8008cc6:	a913      	add	r1, sp, #76	; 0x4c
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f001 f8a3 	bl	8009e14 <__d2b>
 8008cce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cd2:	4683      	mov	fp, r0
 8008cd4:	2d00      	cmp	r5, #0
 8008cd6:	d07c      	beq.n	8008dd2 <_dtoa_r+0x1fa>
 8008cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ce2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008ce6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cf2:	4b7d      	ldr	r3, [pc, #500]	; (8008ee8 <_dtoa_r+0x310>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	f7f7 fac5 	bl	8000288 <__aeabi_dsub>
 8008cfe:	a36e      	add	r3, pc, #440	; (adr r3, 8008eb8 <_dtoa_r+0x2e0>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f7f7 fc78 	bl	80005f8 <__aeabi_dmul>
 8008d08:	a36d      	add	r3, pc, #436	; (adr r3, 8008ec0 <_dtoa_r+0x2e8>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fabd 	bl	800028c <__adddf3>
 8008d12:	4606      	mov	r6, r0
 8008d14:	4628      	mov	r0, r5
 8008d16:	460f      	mov	r7, r1
 8008d18:	f7f7 fc04 	bl	8000524 <__aeabi_i2d>
 8008d1c:	a36a      	add	r3, pc, #424	; (adr r3, 8008ec8 <_dtoa_r+0x2f0>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	f7f7 fc69 	bl	80005f8 <__aeabi_dmul>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	f7f7 faad 	bl	800028c <__adddf3>
 8008d32:	4606      	mov	r6, r0
 8008d34:	460f      	mov	r7, r1
 8008d36:	f7f7 ff0f 	bl	8000b58 <__aeabi_d2iz>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4682      	mov	sl, r0
 8008d3e:	2300      	movs	r3, #0
 8008d40:	4630      	mov	r0, r6
 8008d42:	4639      	mov	r1, r7
 8008d44:	f7f7 feca 	bl	8000adc <__aeabi_dcmplt>
 8008d48:	b148      	cbz	r0, 8008d5e <_dtoa_r+0x186>
 8008d4a:	4650      	mov	r0, sl
 8008d4c:	f7f7 fbea 	bl	8000524 <__aeabi_i2d>
 8008d50:	4632      	mov	r2, r6
 8008d52:	463b      	mov	r3, r7
 8008d54:	f7f7 feb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d58:	b908      	cbnz	r0, 8008d5e <_dtoa_r+0x186>
 8008d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d5e:	f1ba 0f16 	cmp.w	sl, #22
 8008d62:	d854      	bhi.n	8008e0e <_dtoa_r+0x236>
 8008d64:	4b61      	ldr	r3, [pc, #388]	; (8008eec <_dtoa_r+0x314>)
 8008d66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d72:	f7f7 feb3 	bl	8000adc <__aeabi_dcmplt>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d04b      	beq.n	8008e12 <_dtoa_r+0x23a>
 8008d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d7e:	2300      	movs	r3, #0
 8008d80:	930e      	str	r3, [sp, #56]	; 0x38
 8008d82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d84:	1b5d      	subs	r5, r3, r5
 8008d86:	1e6b      	subs	r3, r5, #1
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	bf43      	ittte	mi
 8008d8c:	2300      	movmi	r3, #0
 8008d8e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008d92:	9304      	strmi	r3, [sp, #16]
 8008d94:	f04f 0800 	movpl.w	r8, #0
 8008d98:	f1ba 0f00 	cmp.w	sl, #0
 8008d9c:	db3b      	blt.n	8008e16 <_dtoa_r+0x23e>
 8008d9e:	9b04      	ldr	r3, [sp, #16]
 8008da0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008da4:	4453      	add	r3, sl
 8008da6:	9304      	str	r3, [sp, #16]
 8008da8:	2300      	movs	r3, #0
 8008daa:	9306      	str	r3, [sp, #24]
 8008dac:	9b05      	ldr	r3, [sp, #20]
 8008dae:	2b09      	cmp	r3, #9
 8008db0:	d869      	bhi.n	8008e86 <_dtoa_r+0x2ae>
 8008db2:	2b05      	cmp	r3, #5
 8008db4:	bfc4      	itt	gt
 8008db6:	3b04      	subgt	r3, #4
 8008db8:	9305      	strgt	r3, [sp, #20]
 8008dba:	9b05      	ldr	r3, [sp, #20]
 8008dbc:	f1a3 0302 	sub.w	r3, r3, #2
 8008dc0:	bfcc      	ite	gt
 8008dc2:	2500      	movgt	r5, #0
 8008dc4:	2501      	movle	r5, #1
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d869      	bhi.n	8008e9e <_dtoa_r+0x2c6>
 8008dca:	e8df f003 	tbb	[pc, r3]
 8008dce:	4e2c      	.short	0x4e2c
 8008dd0:	5a4c      	.short	0x5a4c
 8008dd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008dd6:	441d      	add	r5, r3
 8008dd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ddc:	2b20      	cmp	r3, #32
 8008dde:	bfc1      	itttt	gt
 8008de0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008de4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008de8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008dec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008df0:	bfda      	itte	le
 8008df2:	f1c3 0320 	rsble	r3, r3, #32
 8008df6:	fa06 f003 	lslle.w	r0, r6, r3
 8008dfa:	4318      	orrgt	r0, r3
 8008dfc:	f7f7 fb82 	bl	8000504 <__aeabi_ui2d>
 8008e00:	2301      	movs	r3, #1
 8008e02:	4606      	mov	r6, r0
 8008e04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e08:	3d01      	subs	r5, #1
 8008e0a:	9310      	str	r3, [sp, #64]	; 0x40
 8008e0c:	e771      	b.n	8008cf2 <_dtoa_r+0x11a>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e7b6      	b.n	8008d80 <_dtoa_r+0x1a8>
 8008e12:	900e      	str	r0, [sp, #56]	; 0x38
 8008e14:	e7b5      	b.n	8008d82 <_dtoa_r+0x1aa>
 8008e16:	f1ca 0300 	rsb	r3, sl, #0
 8008e1a:	9306      	str	r3, [sp, #24]
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	eba8 080a 	sub.w	r8, r8, sl
 8008e22:	930d      	str	r3, [sp, #52]	; 0x34
 8008e24:	e7c2      	b.n	8008dac <_dtoa_r+0x1d4>
 8008e26:	2300      	movs	r3, #0
 8008e28:	9308      	str	r3, [sp, #32]
 8008e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	dc39      	bgt.n	8008ea4 <_dtoa_r+0x2cc>
 8008e30:	f04f 0901 	mov.w	r9, #1
 8008e34:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e38:	464b      	mov	r3, r9
 8008e3a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008e3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e40:	2200      	movs	r2, #0
 8008e42:	6042      	str	r2, [r0, #4]
 8008e44:	2204      	movs	r2, #4
 8008e46:	f102 0614 	add.w	r6, r2, #20
 8008e4a:	429e      	cmp	r6, r3
 8008e4c:	6841      	ldr	r1, [r0, #4]
 8008e4e:	d92f      	bls.n	8008eb0 <_dtoa_r+0x2d8>
 8008e50:	4620      	mov	r0, r4
 8008e52:	f000 fcbd 	bl	80097d0 <_Balloc>
 8008e56:	9000      	str	r0, [sp, #0]
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d14b      	bne.n	8008ef4 <_dtoa_r+0x31c>
 8008e5c:	4b24      	ldr	r3, [pc, #144]	; (8008ef0 <_dtoa_r+0x318>)
 8008e5e:	4602      	mov	r2, r0
 8008e60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e64:	e6d1      	b.n	8008c0a <_dtoa_r+0x32>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e7de      	b.n	8008e28 <_dtoa_r+0x250>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	9308      	str	r3, [sp, #32]
 8008e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e70:	eb0a 0903 	add.w	r9, sl, r3
 8008e74:	f109 0301 	add.w	r3, r9, #1
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	9301      	str	r3, [sp, #4]
 8008e7c:	bfb8      	it	lt
 8008e7e:	2301      	movlt	r3, #1
 8008e80:	e7dd      	b.n	8008e3e <_dtoa_r+0x266>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e7f2      	b.n	8008e6c <_dtoa_r+0x294>
 8008e86:	2501      	movs	r5, #1
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9305      	str	r3, [sp, #20]
 8008e8c:	9508      	str	r5, [sp, #32]
 8008e8e:	f04f 39ff 	mov.w	r9, #4294967295
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e98:	2312      	movs	r3, #18
 8008e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e9c:	e7cf      	b.n	8008e3e <_dtoa_r+0x266>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	9308      	str	r3, [sp, #32]
 8008ea2:	e7f4      	b.n	8008e8e <_dtoa_r+0x2b6>
 8008ea4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008ea8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008eac:	464b      	mov	r3, r9
 8008eae:	e7c6      	b.n	8008e3e <_dtoa_r+0x266>
 8008eb0:	3101      	adds	r1, #1
 8008eb2:	6041      	str	r1, [r0, #4]
 8008eb4:	0052      	lsls	r2, r2, #1
 8008eb6:	e7c6      	b.n	8008e46 <_dtoa_r+0x26e>
 8008eb8:	636f4361 	.word	0x636f4361
 8008ebc:	3fd287a7 	.word	0x3fd287a7
 8008ec0:	8b60c8b3 	.word	0x8b60c8b3
 8008ec4:	3fc68a28 	.word	0x3fc68a28
 8008ec8:	509f79fb 	.word	0x509f79fb
 8008ecc:	3fd34413 	.word	0x3fd34413
 8008ed0:	0800e0a1 	.word	0x0800e0a1
 8008ed4:	0800e0b8 	.word	0x0800e0b8
 8008ed8:	7ff00000 	.word	0x7ff00000
 8008edc:	0800e09d 	.word	0x0800e09d
 8008ee0:	0800e094 	.word	0x0800e094
 8008ee4:	0800e071 	.word	0x0800e071
 8008ee8:	3ff80000 	.word	0x3ff80000
 8008eec:	0800e1b0 	.word	0x0800e1b0
 8008ef0:	0800e117 	.word	0x0800e117
 8008ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ef6:	9a00      	ldr	r2, [sp, #0]
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	9b01      	ldr	r3, [sp, #4]
 8008efc:	2b0e      	cmp	r3, #14
 8008efe:	f200 80ad 	bhi.w	800905c <_dtoa_r+0x484>
 8008f02:	2d00      	cmp	r5, #0
 8008f04:	f000 80aa 	beq.w	800905c <_dtoa_r+0x484>
 8008f08:	f1ba 0f00 	cmp.w	sl, #0
 8008f0c:	dd36      	ble.n	8008f7c <_dtoa_r+0x3a4>
 8008f0e:	4ac3      	ldr	r2, [pc, #780]	; (800921c <_dtoa_r+0x644>)
 8008f10:	f00a 030f 	and.w	r3, sl, #15
 8008f14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f18:	ed93 7b00 	vldr	d7, [r3]
 8008f1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008f20:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008f24:	eeb0 8a47 	vmov.f32	s16, s14
 8008f28:	eef0 8a67 	vmov.f32	s17, s15
 8008f2c:	d016      	beq.n	8008f5c <_dtoa_r+0x384>
 8008f2e:	4bbc      	ldr	r3, [pc, #752]	; (8009220 <_dtoa_r+0x648>)
 8008f30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f38:	f7f7 fc88 	bl	800084c <__aeabi_ddiv>
 8008f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f40:	f007 070f 	and.w	r7, r7, #15
 8008f44:	2503      	movs	r5, #3
 8008f46:	4eb6      	ldr	r6, [pc, #728]	; (8009220 <_dtoa_r+0x648>)
 8008f48:	b957      	cbnz	r7, 8008f60 <_dtoa_r+0x388>
 8008f4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f4e:	ec53 2b18 	vmov	r2, r3, d8
 8008f52:	f7f7 fc7b 	bl	800084c <__aeabi_ddiv>
 8008f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f5a:	e029      	b.n	8008fb0 <_dtoa_r+0x3d8>
 8008f5c:	2502      	movs	r5, #2
 8008f5e:	e7f2      	b.n	8008f46 <_dtoa_r+0x36e>
 8008f60:	07f9      	lsls	r1, r7, #31
 8008f62:	d508      	bpl.n	8008f76 <_dtoa_r+0x39e>
 8008f64:	ec51 0b18 	vmov	r0, r1, d8
 8008f68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f6c:	f7f7 fb44 	bl	80005f8 <__aeabi_dmul>
 8008f70:	ec41 0b18 	vmov	d8, r0, r1
 8008f74:	3501      	adds	r5, #1
 8008f76:	107f      	asrs	r7, r7, #1
 8008f78:	3608      	adds	r6, #8
 8008f7a:	e7e5      	b.n	8008f48 <_dtoa_r+0x370>
 8008f7c:	f000 80a6 	beq.w	80090cc <_dtoa_r+0x4f4>
 8008f80:	f1ca 0600 	rsb	r6, sl, #0
 8008f84:	4ba5      	ldr	r3, [pc, #660]	; (800921c <_dtoa_r+0x644>)
 8008f86:	4fa6      	ldr	r7, [pc, #664]	; (8009220 <_dtoa_r+0x648>)
 8008f88:	f006 020f 	and.w	r2, r6, #15
 8008f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f98:	f7f7 fb2e 	bl	80005f8 <__aeabi_dmul>
 8008f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fa0:	1136      	asrs	r6, r6, #4
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2502      	movs	r5, #2
 8008fa6:	2e00      	cmp	r6, #0
 8008fa8:	f040 8085 	bne.w	80090b6 <_dtoa_r+0x4de>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1d2      	bne.n	8008f56 <_dtoa_r+0x37e>
 8008fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 808c 	beq.w	80090d0 <_dtoa_r+0x4f8>
 8008fb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008fbc:	4b99      	ldr	r3, [pc, #612]	; (8009224 <_dtoa_r+0x64c>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f7f7 fd8a 	bl	8000adc <__aeabi_dcmplt>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	f000 8081 	beq.w	80090d0 <_dtoa_r+0x4f8>
 8008fce:	9b01      	ldr	r3, [sp, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d07d      	beq.n	80090d0 <_dtoa_r+0x4f8>
 8008fd4:	f1b9 0f00 	cmp.w	r9, #0
 8008fd8:	dd3c      	ble.n	8009054 <_dtoa_r+0x47c>
 8008fda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008fde:	9307      	str	r3, [sp, #28]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	4b91      	ldr	r3, [pc, #580]	; (8009228 <_dtoa_r+0x650>)
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ff0:	3501      	adds	r5, #1
 8008ff2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008ff6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f7f7 fa92 	bl	8000524 <__aeabi_i2d>
 8009000:	4632      	mov	r2, r6
 8009002:	463b      	mov	r3, r7
 8009004:	f7f7 faf8 	bl	80005f8 <__aeabi_dmul>
 8009008:	4b88      	ldr	r3, [pc, #544]	; (800922c <_dtoa_r+0x654>)
 800900a:	2200      	movs	r2, #0
 800900c:	f7f7 f93e 	bl	800028c <__adddf3>
 8009010:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009018:	9303      	str	r3, [sp, #12]
 800901a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800901c:	2b00      	cmp	r3, #0
 800901e:	d15c      	bne.n	80090da <_dtoa_r+0x502>
 8009020:	4b83      	ldr	r3, [pc, #524]	; (8009230 <_dtoa_r+0x658>)
 8009022:	2200      	movs	r2, #0
 8009024:	4630      	mov	r0, r6
 8009026:	4639      	mov	r1, r7
 8009028:	f7f7 f92e 	bl	8000288 <__aeabi_dsub>
 800902c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009030:	4606      	mov	r6, r0
 8009032:	460f      	mov	r7, r1
 8009034:	f7f7 fd70 	bl	8000b18 <__aeabi_dcmpgt>
 8009038:	2800      	cmp	r0, #0
 800903a:	f040 8296 	bne.w	800956a <_dtoa_r+0x992>
 800903e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009042:	4630      	mov	r0, r6
 8009044:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009048:	4639      	mov	r1, r7
 800904a:	f7f7 fd47 	bl	8000adc <__aeabi_dcmplt>
 800904e:	2800      	cmp	r0, #0
 8009050:	f040 8288 	bne.w	8009564 <_dtoa_r+0x98c>
 8009054:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009058:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800905c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800905e:	2b00      	cmp	r3, #0
 8009060:	f2c0 8158 	blt.w	8009314 <_dtoa_r+0x73c>
 8009064:	f1ba 0f0e 	cmp.w	sl, #14
 8009068:	f300 8154 	bgt.w	8009314 <_dtoa_r+0x73c>
 800906c:	4b6b      	ldr	r3, [pc, #428]	; (800921c <_dtoa_r+0x644>)
 800906e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009072:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	f280 80e3 	bge.w	8009244 <_dtoa_r+0x66c>
 800907e:	9b01      	ldr	r3, [sp, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	f300 80df 	bgt.w	8009244 <_dtoa_r+0x66c>
 8009086:	f040 826d 	bne.w	8009564 <_dtoa_r+0x98c>
 800908a:	4b69      	ldr	r3, [pc, #420]	; (8009230 <_dtoa_r+0x658>)
 800908c:	2200      	movs	r2, #0
 800908e:	4640      	mov	r0, r8
 8009090:	4649      	mov	r1, r9
 8009092:	f7f7 fab1 	bl	80005f8 <__aeabi_dmul>
 8009096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800909a:	f7f7 fd33 	bl	8000b04 <__aeabi_dcmpge>
 800909e:	9e01      	ldr	r6, [sp, #4]
 80090a0:	4637      	mov	r7, r6
 80090a2:	2800      	cmp	r0, #0
 80090a4:	f040 8243 	bne.w	800952e <_dtoa_r+0x956>
 80090a8:	9d00      	ldr	r5, [sp, #0]
 80090aa:	2331      	movs	r3, #49	; 0x31
 80090ac:	f805 3b01 	strb.w	r3, [r5], #1
 80090b0:	f10a 0a01 	add.w	sl, sl, #1
 80090b4:	e23f      	b.n	8009536 <_dtoa_r+0x95e>
 80090b6:	07f2      	lsls	r2, r6, #31
 80090b8:	d505      	bpl.n	80090c6 <_dtoa_r+0x4ee>
 80090ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090be:	f7f7 fa9b 	bl	80005f8 <__aeabi_dmul>
 80090c2:	3501      	adds	r5, #1
 80090c4:	2301      	movs	r3, #1
 80090c6:	1076      	asrs	r6, r6, #1
 80090c8:	3708      	adds	r7, #8
 80090ca:	e76c      	b.n	8008fa6 <_dtoa_r+0x3ce>
 80090cc:	2502      	movs	r5, #2
 80090ce:	e76f      	b.n	8008fb0 <_dtoa_r+0x3d8>
 80090d0:	9b01      	ldr	r3, [sp, #4]
 80090d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80090d6:	930c      	str	r3, [sp, #48]	; 0x30
 80090d8:	e78d      	b.n	8008ff6 <_dtoa_r+0x41e>
 80090da:	9900      	ldr	r1, [sp, #0]
 80090dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80090de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090e0:	4b4e      	ldr	r3, [pc, #312]	; (800921c <_dtoa_r+0x644>)
 80090e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090e6:	4401      	add	r1, r0
 80090e8:	9102      	str	r1, [sp, #8]
 80090ea:	9908      	ldr	r1, [sp, #32]
 80090ec:	eeb0 8a47 	vmov.f32	s16, s14
 80090f0:	eef0 8a67 	vmov.f32	s17, s15
 80090f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090fc:	2900      	cmp	r1, #0
 80090fe:	d045      	beq.n	800918c <_dtoa_r+0x5b4>
 8009100:	494c      	ldr	r1, [pc, #304]	; (8009234 <_dtoa_r+0x65c>)
 8009102:	2000      	movs	r0, #0
 8009104:	f7f7 fba2 	bl	800084c <__aeabi_ddiv>
 8009108:	ec53 2b18 	vmov	r2, r3, d8
 800910c:	f7f7 f8bc 	bl	8000288 <__aeabi_dsub>
 8009110:	9d00      	ldr	r5, [sp, #0]
 8009112:	ec41 0b18 	vmov	d8, r0, r1
 8009116:	4639      	mov	r1, r7
 8009118:	4630      	mov	r0, r6
 800911a:	f7f7 fd1d 	bl	8000b58 <__aeabi_d2iz>
 800911e:	900c      	str	r0, [sp, #48]	; 0x30
 8009120:	f7f7 fa00 	bl	8000524 <__aeabi_i2d>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4630      	mov	r0, r6
 800912a:	4639      	mov	r1, r7
 800912c:	f7f7 f8ac 	bl	8000288 <__aeabi_dsub>
 8009130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009132:	3330      	adds	r3, #48	; 0x30
 8009134:	f805 3b01 	strb.w	r3, [r5], #1
 8009138:	ec53 2b18 	vmov	r2, r3, d8
 800913c:	4606      	mov	r6, r0
 800913e:	460f      	mov	r7, r1
 8009140:	f7f7 fccc 	bl	8000adc <__aeabi_dcmplt>
 8009144:	2800      	cmp	r0, #0
 8009146:	d165      	bne.n	8009214 <_dtoa_r+0x63c>
 8009148:	4632      	mov	r2, r6
 800914a:	463b      	mov	r3, r7
 800914c:	4935      	ldr	r1, [pc, #212]	; (8009224 <_dtoa_r+0x64c>)
 800914e:	2000      	movs	r0, #0
 8009150:	f7f7 f89a 	bl	8000288 <__aeabi_dsub>
 8009154:	ec53 2b18 	vmov	r2, r3, d8
 8009158:	f7f7 fcc0 	bl	8000adc <__aeabi_dcmplt>
 800915c:	2800      	cmp	r0, #0
 800915e:	f040 80b9 	bne.w	80092d4 <_dtoa_r+0x6fc>
 8009162:	9b02      	ldr	r3, [sp, #8]
 8009164:	429d      	cmp	r5, r3
 8009166:	f43f af75 	beq.w	8009054 <_dtoa_r+0x47c>
 800916a:	4b2f      	ldr	r3, [pc, #188]	; (8009228 <_dtoa_r+0x650>)
 800916c:	ec51 0b18 	vmov	r0, r1, d8
 8009170:	2200      	movs	r2, #0
 8009172:	f7f7 fa41 	bl	80005f8 <__aeabi_dmul>
 8009176:	4b2c      	ldr	r3, [pc, #176]	; (8009228 <_dtoa_r+0x650>)
 8009178:	ec41 0b18 	vmov	d8, r0, r1
 800917c:	2200      	movs	r2, #0
 800917e:	4630      	mov	r0, r6
 8009180:	4639      	mov	r1, r7
 8009182:	f7f7 fa39 	bl	80005f8 <__aeabi_dmul>
 8009186:	4606      	mov	r6, r0
 8009188:	460f      	mov	r7, r1
 800918a:	e7c4      	b.n	8009116 <_dtoa_r+0x53e>
 800918c:	ec51 0b17 	vmov	r0, r1, d7
 8009190:	f7f7 fa32 	bl	80005f8 <__aeabi_dmul>
 8009194:	9b02      	ldr	r3, [sp, #8]
 8009196:	9d00      	ldr	r5, [sp, #0]
 8009198:	930c      	str	r3, [sp, #48]	; 0x30
 800919a:	ec41 0b18 	vmov	d8, r0, r1
 800919e:	4639      	mov	r1, r7
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7f7 fcd9 	bl	8000b58 <__aeabi_d2iz>
 80091a6:	9011      	str	r0, [sp, #68]	; 0x44
 80091a8:	f7f7 f9bc 	bl	8000524 <__aeabi_i2d>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4630      	mov	r0, r6
 80091b2:	4639      	mov	r1, r7
 80091b4:	f7f7 f868 	bl	8000288 <__aeabi_dsub>
 80091b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091ba:	3330      	adds	r3, #48	; 0x30
 80091bc:	f805 3b01 	strb.w	r3, [r5], #1
 80091c0:	9b02      	ldr	r3, [sp, #8]
 80091c2:	429d      	cmp	r5, r3
 80091c4:	4606      	mov	r6, r0
 80091c6:	460f      	mov	r7, r1
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	d134      	bne.n	8009238 <_dtoa_r+0x660>
 80091ce:	4b19      	ldr	r3, [pc, #100]	; (8009234 <_dtoa_r+0x65c>)
 80091d0:	ec51 0b18 	vmov	r0, r1, d8
 80091d4:	f7f7 f85a 	bl	800028c <__adddf3>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4630      	mov	r0, r6
 80091de:	4639      	mov	r1, r7
 80091e0:	f7f7 fc9a 	bl	8000b18 <__aeabi_dcmpgt>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d175      	bne.n	80092d4 <_dtoa_r+0x6fc>
 80091e8:	ec53 2b18 	vmov	r2, r3, d8
 80091ec:	4911      	ldr	r1, [pc, #68]	; (8009234 <_dtoa_r+0x65c>)
 80091ee:	2000      	movs	r0, #0
 80091f0:	f7f7 f84a 	bl	8000288 <__aeabi_dsub>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 fc6e 	bl	8000adc <__aeabi_dcmplt>
 8009200:	2800      	cmp	r0, #0
 8009202:	f43f af27 	beq.w	8009054 <_dtoa_r+0x47c>
 8009206:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009208:	1e6b      	subs	r3, r5, #1
 800920a:	930c      	str	r3, [sp, #48]	; 0x30
 800920c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009210:	2b30      	cmp	r3, #48	; 0x30
 8009212:	d0f8      	beq.n	8009206 <_dtoa_r+0x62e>
 8009214:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009218:	e04a      	b.n	80092b0 <_dtoa_r+0x6d8>
 800921a:	bf00      	nop
 800921c:	0800e1b0 	.word	0x0800e1b0
 8009220:	0800e188 	.word	0x0800e188
 8009224:	3ff00000 	.word	0x3ff00000
 8009228:	40240000 	.word	0x40240000
 800922c:	401c0000 	.word	0x401c0000
 8009230:	40140000 	.word	0x40140000
 8009234:	3fe00000 	.word	0x3fe00000
 8009238:	4baf      	ldr	r3, [pc, #700]	; (80094f8 <_dtoa_r+0x920>)
 800923a:	f7f7 f9dd 	bl	80005f8 <__aeabi_dmul>
 800923e:	4606      	mov	r6, r0
 8009240:	460f      	mov	r7, r1
 8009242:	e7ac      	b.n	800919e <_dtoa_r+0x5c6>
 8009244:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009248:	9d00      	ldr	r5, [sp, #0]
 800924a:	4642      	mov	r2, r8
 800924c:	464b      	mov	r3, r9
 800924e:	4630      	mov	r0, r6
 8009250:	4639      	mov	r1, r7
 8009252:	f7f7 fafb 	bl	800084c <__aeabi_ddiv>
 8009256:	f7f7 fc7f 	bl	8000b58 <__aeabi_d2iz>
 800925a:	9002      	str	r0, [sp, #8]
 800925c:	f7f7 f962 	bl	8000524 <__aeabi_i2d>
 8009260:	4642      	mov	r2, r8
 8009262:	464b      	mov	r3, r9
 8009264:	f7f7 f9c8 	bl	80005f8 <__aeabi_dmul>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4630      	mov	r0, r6
 800926e:	4639      	mov	r1, r7
 8009270:	f7f7 f80a 	bl	8000288 <__aeabi_dsub>
 8009274:	9e02      	ldr	r6, [sp, #8]
 8009276:	9f01      	ldr	r7, [sp, #4]
 8009278:	3630      	adds	r6, #48	; 0x30
 800927a:	f805 6b01 	strb.w	r6, [r5], #1
 800927e:	9e00      	ldr	r6, [sp, #0]
 8009280:	1bae      	subs	r6, r5, r6
 8009282:	42b7      	cmp	r7, r6
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	d137      	bne.n	80092fa <_dtoa_r+0x722>
 800928a:	f7f6 ffff 	bl	800028c <__adddf3>
 800928e:	4642      	mov	r2, r8
 8009290:	464b      	mov	r3, r9
 8009292:	4606      	mov	r6, r0
 8009294:	460f      	mov	r7, r1
 8009296:	f7f7 fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 800929a:	b9c8      	cbnz	r0, 80092d0 <_dtoa_r+0x6f8>
 800929c:	4642      	mov	r2, r8
 800929e:	464b      	mov	r3, r9
 80092a0:	4630      	mov	r0, r6
 80092a2:	4639      	mov	r1, r7
 80092a4:	f7f7 fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80092a8:	b110      	cbz	r0, 80092b0 <_dtoa_r+0x6d8>
 80092aa:	9b02      	ldr	r3, [sp, #8]
 80092ac:	07d9      	lsls	r1, r3, #31
 80092ae:	d40f      	bmi.n	80092d0 <_dtoa_r+0x6f8>
 80092b0:	4620      	mov	r0, r4
 80092b2:	4659      	mov	r1, fp
 80092b4:	f000 facc 	bl	8009850 <_Bfree>
 80092b8:	2300      	movs	r3, #0
 80092ba:	702b      	strb	r3, [r5, #0]
 80092bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092be:	f10a 0001 	add.w	r0, sl, #1
 80092c2:	6018      	str	r0, [r3, #0]
 80092c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f43f acd8 	beq.w	8008c7c <_dtoa_r+0xa4>
 80092cc:	601d      	str	r5, [r3, #0]
 80092ce:	e4d5      	b.n	8008c7c <_dtoa_r+0xa4>
 80092d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80092d4:	462b      	mov	r3, r5
 80092d6:	461d      	mov	r5, r3
 80092d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092dc:	2a39      	cmp	r2, #57	; 0x39
 80092de:	d108      	bne.n	80092f2 <_dtoa_r+0x71a>
 80092e0:	9a00      	ldr	r2, [sp, #0]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d1f7      	bne.n	80092d6 <_dtoa_r+0x6fe>
 80092e6:	9a07      	ldr	r2, [sp, #28]
 80092e8:	9900      	ldr	r1, [sp, #0]
 80092ea:	3201      	adds	r2, #1
 80092ec:	9207      	str	r2, [sp, #28]
 80092ee:	2230      	movs	r2, #48	; 0x30
 80092f0:	700a      	strb	r2, [r1, #0]
 80092f2:	781a      	ldrb	r2, [r3, #0]
 80092f4:	3201      	adds	r2, #1
 80092f6:	701a      	strb	r2, [r3, #0]
 80092f8:	e78c      	b.n	8009214 <_dtoa_r+0x63c>
 80092fa:	4b7f      	ldr	r3, [pc, #508]	; (80094f8 <_dtoa_r+0x920>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	f7f7 f97b 	bl	80005f8 <__aeabi_dmul>
 8009302:	2200      	movs	r2, #0
 8009304:	2300      	movs	r3, #0
 8009306:	4606      	mov	r6, r0
 8009308:	460f      	mov	r7, r1
 800930a:	f7f7 fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800930e:	2800      	cmp	r0, #0
 8009310:	d09b      	beq.n	800924a <_dtoa_r+0x672>
 8009312:	e7cd      	b.n	80092b0 <_dtoa_r+0x6d8>
 8009314:	9a08      	ldr	r2, [sp, #32]
 8009316:	2a00      	cmp	r2, #0
 8009318:	f000 80c4 	beq.w	80094a4 <_dtoa_r+0x8cc>
 800931c:	9a05      	ldr	r2, [sp, #20]
 800931e:	2a01      	cmp	r2, #1
 8009320:	f300 80a8 	bgt.w	8009474 <_dtoa_r+0x89c>
 8009324:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009326:	2a00      	cmp	r2, #0
 8009328:	f000 80a0 	beq.w	800946c <_dtoa_r+0x894>
 800932c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009330:	9e06      	ldr	r6, [sp, #24]
 8009332:	4645      	mov	r5, r8
 8009334:	9a04      	ldr	r2, [sp, #16]
 8009336:	2101      	movs	r1, #1
 8009338:	441a      	add	r2, r3
 800933a:	4620      	mov	r0, r4
 800933c:	4498      	add	r8, r3
 800933e:	9204      	str	r2, [sp, #16]
 8009340:	f000 fb42 	bl	80099c8 <__i2b>
 8009344:	4607      	mov	r7, r0
 8009346:	2d00      	cmp	r5, #0
 8009348:	dd0b      	ble.n	8009362 <_dtoa_r+0x78a>
 800934a:	9b04      	ldr	r3, [sp, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	dd08      	ble.n	8009362 <_dtoa_r+0x78a>
 8009350:	42ab      	cmp	r3, r5
 8009352:	9a04      	ldr	r2, [sp, #16]
 8009354:	bfa8      	it	ge
 8009356:	462b      	movge	r3, r5
 8009358:	eba8 0803 	sub.w	r8, r8, r3
 800935c:	1aed      	subs	r5, r5, r3
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	9304      	str	r3, [sp, #16]
 8009362:	9b06      	ldr	r3, [sp, #24]
 8009364:	b1fb      	cbz	r3, 80093a6 <_dtoa_r+0x7ce>
 8009366:	9b08      	ldr	r3, [sp, #32]
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 809f 	beq.w	80094ac <_dtoa_r+0x8d4>
 800936e:	2e00      	cmp	r6, #0
 8009370:	dd11      	ble.n	8009396 <_dtoa_r+0x7be>
 8009372:	4639      	mov	r1, r7
 8009374:	4632      	mov	r2, r6
 8009376:	4620      	mov	r0, r4
 8009378:	f000 fbe2 	bl	8009b40 <__pow5mult>
 800937c:	465a      	mov	r2, fp
 800937e:	4601      	mov	r1, r0
 8009380:	4607      	mov	r7, r0
 8009382:	4620      	mov	r0, r4
 8009384:	f000 fb36 	bl	80099f4 <__multiply>
 8009388:	4659      	mov	r1, fp
 800938a:	9007      	str	r0, [sp, #28]
 800938c:	4620      	mov	r0, r4
 800938e:	f000 fa5f 	bl	8009850 <_Bfree>
 8009392:	9b07      	ldr	r3, [sp, #28]
 8009394:	469b      	mov	fp, r3
 8009396:	9b06      	ldr	r3, [sp, #24]
 8009398:	1b9a      	subs	r2, r3, r6
 800939a:	d004      	beq.n	80093a6 <_dtoa_r+0x7ce>
 800939c:	4659      	mov	r1, fp
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 fbce 	bl	8009b40 <__pow5mult>
 80093a4:	4683      	mov	fp, r0
 80093a6:	2101      	movs	r1, #1
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 fb0d 	bl	80099c8 <__i2b>
 80093ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	4606      	mov	r6, r0
 80093b4:	dd7c      	ble.n	80094b0 <_dtoa_r+0x8d8>
 80093b6:	461a      	mov	r2, r3
 80093b8:	4601      	mov	r1, r0
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 fbc0 	bl	8009b40 <__pow5mult>
 80093c0:	9b05      	ldr	r3, [sp, #20]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	4606      	mov	r6, r0
 80093c6:	dd76      	ble.n	80094b6 <_dtoa_r+0x8de>
 80093c8:	2300      	movs	r3, #0
 80093ca:	9306      	str	r3, [sp, #24]
 80093cc:	6933      	ldr	r3, [r6, #16]
 80093ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093d2:	6918      	ldr	r0, [r3, #16]
 80093d4:	f000 faa8 	bl	8009928 <__hi0bits>
 80093d8:	f1c0 0020 	rsb	r0, r0, #32
 80093dc:	9b04      	ldr	r3, [sp, #16]
 80093de:	4418      	add	r0, r3
 80093e0:	f010 001f 	ands.w	r0, r0, #31
 80093e4:	f000 8086 	beq.w	80094f4 <_dtoa_r+0x91c>
 80093e8:	f1c0 0320 	rsb	r3, r0, #32
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	dd7f      	ble.n	80094f0 <_dtoa_r+0x918>
 80093f0:	f1c0 001c 	rsb	r0, r0, #28
 80093f4:	9b04      	ldr	r3, [sp, #16]
 80093f6:	4403      	add	r3, r0
 80093f8:	4480      	add	r8, r0
 80093fa:	4405      	add	r5, r0
 80093fc:	9304      	str	r3, [sp, #16]
 80093fe:	f1b8 0f00 	cmp.w	r8, #0
 8009402:	dd05      	ble.n	8009410 <_dtoa_r+0x838>
 8009404:	4659      	mov	r1, fp
 8009406:	4642      	mov	r2, r8
 8009408:	4620      	mov	r0, r4
 800940a:	f000 fbf3 	bl	8009bf4 <__lshift>
 800940e:	4683      	mov	fp, r0
 8009410:	9b04      	ldr	r3, [sp, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	dd05      	ble.n	8009422 <_dtoa_r+0x84a>
 8009416:	4631      	mov	r1, r6
 8009418:	461a      	mov	r2, r3
 800941a:	4620      	mov	r0, r4
 800941c:	f000 fbea 	bl	8009bf4 <__lshift>
 8009420:	4606      	mov	r6, r0
 8009422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009424:	2b00      	cmp	r3, #0
 8009426:	d069      	beq.n	80094fc <_dtoa_r+0x924>
 8009428:	4631      	mov	r1, r6
 800942a:	4658      	mov	r0, fp
 800942c:	f000 fc4e 	bl	8009ccc <__mcmp>
 8009430:	2800      	cmp	r0, #0
 8009432:	da63      	bge.n	80094fc <_dtoa_r+0x924>
 8009434:	2300      	movs	r3, #0
 8009436:	4659      	mov	r1, fp
 8009438:	220a      	movs	r2, #10
 800943a:	4620      	mov	r0, r4
 800943c:	f000 fa2a 	bl	8009894 <__multadd>
 8009440:	9b08      	ldr	r3, [sp, #32]
 8009442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009446:	4683      	mov	fp, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 818f 	beq.w	800976c <_dtoa_r+0xb94>
 800944e:	4639      	mov	r1, r7
 8009450:	2300      	movs	r3, #0
 8009452:	220a      	movs	r2, #10
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fa1d 	bl	8009894 <__multadd>
 800945a:	f1b9 0f00 	cmp.w	r9, #0
 800945e:	4607      	mov	r7, r0
 8009460:	f300 808e 	bgt.w	8009580 <_dtoa_r+0x9a8>
 8009464:	9b05      	ldr	r3, [sp, #20]
 8009466:	2b02      	cmp	r3, #2
 8009468:	dc50      	bgt.n	800950c <_dtoa_r+0x934>
 800946a:	e089      	b.n	8009580 <_dtoa_r+0x9a8>
 800946c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800946e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009472:	e75d      	b.n	8009330 <_dtoa_r+0x758>
 8009474:	9b01      	ldr	r3, [sp, #4]
 8009476:	1e5e      	subs	r6, r3, #1
 8009478:	9b06      	ldr	r3, [sp, #24]
 800947a:	42b3      	cmp	r3, r6
 800947c:	bfbf      	itttt	lt
 800947e:	9b06      	ldrlt	r3, [sp, #24]
 8009480:	9606      	strlt	r6, [sp, #24]
 8009482:	1af2      	sublt	r2, r6, r3
 8009484:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009486:	bfb6      	itet	lt
 8009488:	189b      	addlt	r3, r3, r2
 800948a:	1b9e      	subge	r6, r3, r6
 800948c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	bfb8      	it	lt
 8009492:	2600      	movlt	r6, #0
 8009494:	2b00      	cmp	r3, #0
 8009496:	bfb5      	itete	lt
 8009498:	eba8 0503 	sublt.w	r5, r8, r3
 800949c:	9b01      	ldrge	r3, [sp, #4]
 800949e:	2300      	movlt	r3, #0
 80094a0:	4645      	movge	r5, r8
 80094a2:	e747      	b.n	8009334 <_dtoa_r+0x75c>
 80094a4:	9e06      	ldr	r6, [sp, #24]
 80094a6:	9f08      	ldr	r7, [sp, #32]
 80094a8:	4645      	mov	r5, r8
 80094aa:	e74c      	b.n	8009346 <_dtoa_r+0x76e>
 80094ac:	9a06      	ldr	r2, [sp, #24]
 80094ae:	e775      	b.n	800939c <_dtoa_r+0x7c4>
 80094b0:	9b05      	ldr	r3, [sp, #20]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	dc18      	bgt.n	80094e8 <_dtoa_r+0x910>
 80094b6:	9b02      	ldr	r3, [sp, #8]
 80094b8:	b9b3      	cbnz	r3, 80094e8 <_dtoa_r+0x910>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094c0:	b9a3      	cbnz	r3, 80094ec <_dtoa_r+0x914>
 80094c2:	9b03      	ldr	r3, [sp, #12]
 80094c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094c8:	0d1b      	lsrs	r3, r3, #20
 80094ca:	051b      	lsls	r3, r3, #20
 80094cc:	b12b      	cbz	r3, 80094da <_dtoa_r+0x902>
 80094ce:	9b04      	ldr	r3, [sp, #16]
 80094d0:	3301      	adds	r3, #1
 80094d2:	9304      	str	r3, [sp, #16]
 80094d4:	f108 0801 	add.w	r8, r8, #1
 80094d8:	2301      	movs	r3, #1
 80094da:	9306      	str	r3, [sp, #24]
 80094dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f47f af74 	bne.w	80093cc <_dtoa_r+0x7f4>
 80094e4:	2001      	movs	r0, #1
 80094e6:	e779      	b.n	80093dc <_dtoa_r+0x804>
 80094e8:	2300      	movs	r3, #0
 80094ea:	e7f6      	b.n	80094da <_dtoa_r+0x902>
 80094ec:	9b02      	ldr	r3, [sp, #8]
 80094ee:	e7f4      	b.n	80094da <_dtoa_r+0x902>
 80094f0:	d085      	beq.n	80093fe <_dtoa_r+0x826>
 80094f2:	4618      	mov	r0, r3
 80094f4:	301c      	adds	r0, #28
 80094f6:	e77d      	b.n	80093f4 <_dtoa_r+0x81c>
 80094f8:	40240000 	.word	0x40240000
 80094fc:	9b01      	ldr	r3, [sp, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	dc38      	bgt.n	8009574 <_dtoa_r+0x99c>
 8009502:	9b05      	ldr	r3, [sp, #20]
 8009504:	2b02      	cmp	r3, #2
 8009506:	dd35      	ble.n	8009574 <_dtoa_r+0x99c>
 8009508:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800950c:	f1b9 0f00 	cmp.w	r9, #0
 8009510:	d10d      	bne.n	800952e <_dtoa_r+0x956>
 8009512:	4631      	mov	r1, r6
 8009514:	464b      	mov	r3, r9
 8009516:	2205      	movs	r2, #5
 8009518:	4620      	mov	r0, r4
 800951a:	f000 f9bb 	bl	8009894 <__multadd>
 800951e:	4601      	mov	r1, r0
 8009520:	4606      	mov	r6, r0
 8009522:	4658      	mov	r0, fp
 8009524:	f000 fbd2 	bl	8009ccc <__mcmp>
 8009528:	2800      	cmp	r0, #0
 800952a:	f73f adbd 	bgt.w	80090a8 <_dtoa_r+0x4d0>
 800952e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009530:	9d00      	ldr	r5, [sp, #0]
 8009532:	ea6f 0a03 	mvn.w	sl, r3
 8009536:	f04f 0800 	mov.w	r8, #0
 800953a:	4631      	mov	r1, r6
 800953c:	4620      	mov	r0, r4
 800953e:	f000 f987 	bl	8009850 <_Bfree>
 8009542:	2f00      	cmp	r7, #0
 8009544:	f43f aeb4 	beq.w	80092b0 <_dtoa_r+0x6d8>
 8009548:	f1b8 0f00 	cmp.w	r8, #0
 800954c:	d005      	beq.n	800955a <_dtoa_r+0x982>
 800954e:	45b8      	cmp	r8, r7
 8009550:	d003      	beq.n	800955a <_dtoa_r+0x982>
 8009552:	4641      	mov	r1, r8
 8009554:	4620      	mov	r0, r4
 8009556:	f000 f97b 	bl	8009850 <_Bfree>
 800955a:	4639      	mov	r1, r7
 800955c:	4620      	mov	r0, r4
 800955e:	f000 f977 	bl	8009850 <_Bfree>
 8009562:	e6a5      	b.n	80092b0 <_dtoa_r+0x6d8>
 8009564:	2600      	movs	r6, #0
 8009566:	4637      	mov	r7, r6
 8009568:	e7e1      	b.n	800952e <_dtoa_r+0x956>
 800956a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800956c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009570:	4637      	mov	r7, r6
 8009572:	e599      	b.n	80090a8 <_dtoa_r+0x4d0>
 8009574:	9b08      	ldr	r3, [sp, #32]
 8009576:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 80fd 	beq.w	800977a <_dtoa_r+0xba2>
 8009580:	2d00      	cmp	r5, #0
 8009582:	dd05      	ble.n	8009590 <_dtoa_r+0x9b8>
 8009584:	4639      	mov	r1, r7
 8009586:	462a      	mov	r2, r5
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fb33 	bl	8009bf4 <__lshift>
 800958e:	4607      	mov	r7, r0
 8009590:	9b06      	ldr	r3, [sp, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d05c      	beq.n	8009650 <_dtoa_r+0xa78>
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	4620      	mov	r0, r4
 800959a:	f000 f919 	bl	80097d0 <_Balloc>
 800959e:	4605      	mov	r5, r0
 80095a0:	b928      	cbnz	r0, 80095ae <_dtoa_r+0x9d6>
 80095a2:	4b80      	ldr	r3, [pc, #512]	; (80097a4 <_dtoa_r+0xbcc>)
 80095a4:	4602      	mov	r2, r0
 80095a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095aa:	f7ff bb2e 	b.w	8008c0a <_dtoa_r+0x32>
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	3202      	adds	r2, #2
 80095b2:	0092      	lsls	r2, r2, #2
 80095b4:	f107 010c 	add.w	r1, r7, #12
 80095b8:	300c      	adds	r0, #12
 80095ba:	f7fe fd25 	bl	8008008 <memcpy>
 80095be:	2201      	movs	r2, #1
 80095c0:	4629      	mov	r1, r5
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 fb16 	bl	8009bf4 <__lshift>
 80095c8:	9b00      	ldr	r3, [sp, #0]
 80095ca:	3301      	adds	r3, #1
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	9b00      	ldr	r3, [sp, #0]
 80095d0:	444b      	add	r3, r9
 80095d2:	9307      	str	r3, [sp, #28]
 80095d4:	9b02      	ldr	r3, [sp, #8]
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	46b8      	mov	r8, r7
 80095dc:	9306      	str	r3, [sp, #24]
 80095de:	4607      	mov	r7, r0
 80095e0:	9b01      	ldr	r3, [sp, #4]
 80095e2:	4631      	mov	r1, r6
 80095e4:	3b01      	subs	r3, #1
 80095e6:	4658      	mov	r0, fp
 80095e8:	9302      	str	r3, [sp, #8]
 80095ea:	f7ff fa67 	bl	8008abc <quorem>
 80095ee:	4603      	mov	r3, r0
 80095f0:	3330      	adds	r3, #48	; 0x30
 80095f2:	9004      	str	r0, [sp, #16]
 80095f4:	4641      	mov	r1, r8
 80095f6:	4658      	mov	r0, fp
 80095f8:	9308      	str	r3, [sp, #32]
 80095fa:	f000 fb67 	bl	8009ccc <__mcmp>
 80095fe:	463a      	mov	r2, r7
 8009600:	4681      	mov	r9, r0
 8009602:	4631      	mov	r1, r6
 8009604:	4620      	mov	r0, r4
 8009606:	f000 fb7d 	bl	8009d04 <__mdiff>
 800960a:	68c2      	ldr	r2, [r0, #12]
 800960c:	9b08      	ldr	r3, [sp, #32]
 800960e:	4605      	mov	r5, r0
 8009610:	bb02      	cbnz	r2, 8009654 <_dtoa_r+0xa7c>
 8009612:	4601      	mov	r1, r0
 8009614:	4658      	mov	r0, fp
 8009616:	f000 fb59 	bl	8009ccc <__mcmp>
 800961a:	9b08      	ldr	r3, [sp, #32]
 800961c:	4602      	mov	r2, r0
 800961e:	4629      	mov	r1, r5
 8009620:	4620      	mov	r0, r4
 8009622:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009626:	f000 f913 	bl	8009850 <_Bfree>
 800962a:	9b05      	ldr	r3, [sp, #20]
 800962c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800962e:	9d01      	ldr	r5, [sp, #4]
 8009630:	ea43 0102 	orr.w	r1, r3, r2
 8009634:	9b06      	ldr	r3, [sp, #24]
 8009636:	430b      	orrs	r3, r1
 8009638:	9b08      	ldr	r3, [sp, #32]
 800963a:	d10d      	bne.n	8009658 <_dtoa_r+0xa80>
 800963c:	2b39      	cmp	r3, #57	; 0x39
 800963e:	d029      	beq.n	8009694 <_dtoa_r+0xabc>
 8009640:	f1b9 0f00 	cmp.w	r9, #0
 8009644:	dd01      	ble.n	800964a <_dtoa_r+0xa72>
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	3331      	adds	r3, #49	; 0x31
 800964a:	9a02      	ldr	r2, [sp, #8]
 800964c:	7013      	strb	r3, [r2, #0]
 800964e:	e774      	b.n	800953a <_dtoa_r+0x962>
 8009650:	4638      	mov	r0, r7
 8009652:	e7b9      	b.n	80095c8 <_dtoa_r+0x9f0>
 8009654:	2201      	movs	r2, #1
 8009656:	e7e2      	b.n	800961e <_dtoa_r+0xa46>
 8009658:	f1b9 0f00 	cmp.w	r9, #0
 800965c:	db06      	blt.n	800966c <_dtoa_r+0xa94>
 800965e:	9905      	ldr	r1, [sp, #20]
 8009660:	ea41 0909 	orr.w	r9, r1, r9
 8009664:	9906      	ldr	r1, [sp, #24]
 8009666:	ea59 0101 	orrs.w	r1, r9, r1
 800966a:	d120      	bne.n	80096ae <_dtoa_r+0xad6>
 800966c:	2a00      	cmp	r2, #0
 800966e:	ddec      	ble.n	800964a <_dtoa_r+0xa72>
 8009670:	4659      	mov	r1, fp
 8009672:	2201      	movs	r2, #1
 8009674:	4620      	mov	r0, r4
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	f000 fabc 	bl	8009bf4 <__lshift>
 800967c:	4631      	mov	r1, r6
 800967e:	4683      	mov	fp, r0
 8009680:	f000 fb24 	bl	8009ccc <__mcmp>
 8009684:	2800      	cmp	r0, #0
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	dc02      	bgt.n	8009690 <_dtoa_r+0xab8>
 800968a:	d1de      	bne.n	800964a <_dtoa_r+0xa72>
 800968c:	07da      	lsls	r2, r3, #31
 800968e:	d5dc      	bpl.n	800964a <_dtoa_r+0xa72>
 8009690:	2b39      	cmp	r3, #57	; 0x39
 8009692:	d1d8      	bne.n	8009646 <_dtoa_r+0xa6e>
 8009694:	9a02      	ldr	r2, [sp, #8]
 8009696:	2339      	movs	r3, #57	; 0x39
 8009698:	7013      	strb	r3, [r2, #0]
 800969a:	462b      	mov	r3, r5
 800969c:	461d      	mov	r5, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096a4:	2a39      	cmp	r2, #57	; 0x39
 80096a6:	d050      	beq.n	800974a <_dtoa_r+0xb72>
 80096a8:	3201      	adds	r2, #1
 80096aa:	701a      	strb	r2, [r3, #0]
 80096ac:	e745      	b.n	800953a <_dtoa_r+0x962>
 80096ae:	2a00      	cmp	r2, #0
 80096b0:	dd03      	ble.n	80096ba <_dtoa_r+0xae2>
 80096b2:	2b39      	cmp	r3, #57	; 0x39
 80096b4:	d0ee      	beq.n	8009694 <_dtoa_r+0xabc>
 80096b6:	3301      	adds	r3, #1
 80096b8:	e7c7      	b.n	800964a <_dtoa_r+0xa72>
 80096ba:	9a01      	ldr	r2, [sp, #4]
 80096bc:	9907      	ldr	r1, [sp, #28]
 80096be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80096c2:	428a      	cmp	r2, r1
 80096c4:	d02a      	beq.n	800971c <_dtoa_r+0xb44>
 80096c6:	4659      	mov	r1, fp
 80096c8:	2300      	movs	r3, #0
 80096ca:	220a      	movs	r2, #10
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 f8e1 	bl	8009894 <__multadd>
 80096d2:	45b8      	cmp	r8, r7
 80096d4:	4683      	mov	fp, r0
 80096d6:	f04f 0300 	mov.w	r3, #0
 80096da:	f04f 020a 	mov.w	r2, #10
 80096de:	4641      	mov	r1, r8
 80096e0:	4620      	mov	r0, r4
 80096e2:	d107      	bne.n	80096f4 <_dtoa_r+0xb1c>
 80096e4:	f000 f8d6 	bl	8009894 <__multadd>
 80096e8:	4680      	mov	r8, r0
 80096ea:	4607      	mov	r7, r0
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	3301      	adds	r3, #1
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	e775      	b.n	80095e0 <_dtoa_r+0xa08>
 80096f4:	f000 f8ce 	bl	8009894 <__multadd>
 80096f8:	4639      	mov	r1, r7
 80096fa:	4680      	mov	r8, r0
 80096fc:	2300      	movs	r3, #0
 80096fe:	220a      	movs	r2, #10
 8009700:	4620      	mov	r0, r4
 8009702:	f000 f8c7 	bl	8009894 <__multadd>
 8009706:	4607      	mov	r7, r0
 8009708:	e7f0      	b.n	80096ec <_dtoa_r+0xb14>
 800970a:	f1b9 0f00 	cmp.w	r9, #0
 800970e:	9a00      	ldr	r2, [sp, #0]
 8009710:	bfcc      	ite	gt
 8009712:	464d      	movgt	r5, r9
 8009714:	2501      	movle	r5, #1
 8009716:	4415      	add	r5, r2
 8009718:	f04f 0800 	mov.w	r8, #0
 800971c:	4659      	mov	r1, fp
 800971e:	2201      	movs	r2, #1
 8009720:	4620      	mov	r0, r4
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	f000 fa66 	bl	8009bf4 <__lshift>
 8009728:	4631      	mov	r1, r6
 800972a:	4683      	mov	fp, r0
 800972c:	f000 face 	bl	8009ccc <__mcmp>
 8009730:	2800      	cmp	r0, #0
 8009732:	dcb2      	bgt.n	800969a <_dtoa_r+0xac2>
 8009734:	d102      	bne.n	800973c <_dtoa_r+0xb64>
 8009736:	9b01      	ldr	r3, [sp, #4]
 8009738:	07db      	lsls	r3, r3, #31
 800973a:	d4ae      	bmi.n	800969a <_dtoa_r+0xac2>
 800973c:	462b      	mov	r3, r5
 800973e:	461d      	mov	r5, r3
 8009740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009744:	2a30      	cmp	r2, #48	; 0x30
 8009746:	d0fa      	beq.n	800973e <_dtoa_r+0xb66>
 8009748:	e6f7      	b.n	800953a <_dtoa_r+0x962>
 800974a:	9a00      	ldr	r2, [sp, #0]
 800974c:	429a      	cmp	r2, r3
 800974e:	d1a5      	bne.n	800969c <_dtoa_r+0xac4>
 8009750:	f10a 0a01 	add.w	sl, sl, #1
 8009754:	2331      	movs	r3, #49	; 0x31
 8009756:	e779      	b.n	800964c <_dtoa_r+0xa74>
 8009758:	4b13      	ldr	r3, [pc, #76]	; (80097a8 <_dtoa_r+0xbd0>)
 800975a:	f7ff baaf 	b.w	8008cbc <_dtoa_r+0xe4>
 800975e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009760:	2b00      	cmp	r3, #0
 8009762:	f47f aa86 	bne.w	8008c72 <_dtoa_r+0x9a>
 8009766:	4b11      	ldr	r3, [pc, #68]	; (80097ac <_dtoa_r+0xbd4>)
 8009768:	f7ff baa8 	b.w	8008cbc <_dtoa_r+0xe4>
 800976c:	f1b9 0f00 	cmp.w	r9, #0
 8009770:	dc03      	bgt.n	800977a <_dtoa_r+0xba2>
 8009772:	9b05      	ldr	r3, [sp, #20]
 8009774:	2b02      	cmp	r3, #2
 8009776:	f73f aec9 	bgt.w	800950c <_dtoa_r+0x934>
 800977a:	9d00      	ldr	r5, [sp, #0]
 800977c:	4631      	mov	r1, r6
 800977e:	4658      	mov	r0, fp
 8009780:	f7ff f99c 	bl	8008abc <quorem>
 8009784:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009788:	f805 3b01 	strb.w	r3, [r5], #1
 800978c:	9a00      	ldr	r2, [sp, #0]
 800978e:	1aaa      	subs	r2, r5, r2
 8009790:	4591      	cmp	r9, r2
 8009792:	ddba      	ble.n	800970a <_dtoa_r+0xb32>
 8009794:	4659      	mov	r1, fp
 8009796:	2300      	movs	r3, #0
 8009798:	220a      	movs	r2, #10
 800979a:	4620      	mov	r0, r4
 800979c:	f000 f87a 	bl	8009894 <__multadd>
 80097a0:	4683      	mov	fp, r0
 80097a2:	e7eb      	b.n	800977c <_dtoa_r+0xba4>
 80097a4:	0800e117 	.word	0x0800e117
 80097a8:	0800e070 	.word	0x0800e070
 80097ac:	0800e094 	.word	0x0800e094

080097b0 <_localeconv_r>:
 80097b0:	4800      	ldr	r0, [pc, #0]	; (80097b4 <_localeconv_r+0x4>)
 80097b2:	4770      	bx	lr
 80097b4:	20000d70 	.word	0x20000d70

080097b8 <__malloc_lock>:
 80097b8:	4801      	ldr	r0, [pc, #4]	; (80097c0 <__malloc_lock+0x8>)
 80097ba:	f000 bd48 	b.w	800a24e <__retarget_lock_acquire_recursive>
 80097be:	bf00      	nop
 80097c0:	20001148 	.word	0x20001148

080097c4 <__malloc_unlock>:
 80097c4:	4801      	ldr	r0, [pc, #4]	; (80097cc <__malloc_unlock+0x8>)
 80097c6:	f000 bd43 	b.w	800a250 <__retarget_lock_release_recursive>
 80097ca:	bf00      	nop
 80097cc:	20001148 	.word	0x20001148

080097d0 <_Balloc>:
 80097d0:	b570      	push	{r4, r5, r6, lr}
 80097d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097d4:	4604      	mov	r4, r0
 80097d6:	460d      	mov	r5, r1
 80097d8:	b976      	cbnz	r6, 80097f8 <_Balloc+0x28>
 80097da:	2010      	movs	r0, #16
 80097dc:	f7fe fc0c 	bl	8007ff8 <malloc>
 80097e0:	4602      	mov	r2, r0
 80097e2:	6260      	str	r0, [r4, #36]	; 0x24
 80097e4:	b920      	cbnz	r0, 80097f0 <_Balloc+0x20>
 80097e6:	4b18      	ldr	r3, [pc, #96]	; (8009848 <_Balloc+0x78>)
 80097e8:	4818      	ldr	r0, [pc, #96]	; (800984c <_Balloc+0x7c>)
 80097ea:	2166      	movs	r1, #102	; 0x66
 80097ec:	f000 fcfe 	bl	800a1ec <__assert_func>
 80097f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097f4:	6006      	str	r6, [r0, #0]
 80097f6:	60c6      	str	r6, [r0, #12]
 80097f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097fa:	68f3      	ldr	r3, [r6, #12]
 80097fc:	b183      	cbz	r3, 8009820 <_Balloc+0x50>
 80097fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009806:	b9b8      	cbnz	r0, 8009838 <_Balloc+0x68>
 8009808:	2101      	movs	r1, #1
 800980a:	fa01 f605 	lsl.w	r6, r1, r5
 800980e:	1d72      	adds	r2, r6, #5
 8009810:	0092      	lsls	r2, r2, #2
 8009812:	4620      	mov	r0, r4
 8009814:	f000 fb5a 	bl	8009ecc <_calloc_r>
 8009818:	b160      	cbz	r0, 8009834 <_Balloc+0x64>
 800981a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800981e:	e00e      	b.n	800983e <_Balloc+0x6e>
 8009820:	2221      	movs	r2, #33	; 0x21
 8009822:	2104      	movs	r1, #4
 8009824:	4620      	mov	r0, r4
 8009826:	f000 fb51 	bl	8009ecc <_calloc_r>
 800982a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800982c:	60f0      	str	r0, [r6, #12]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e4      	bne.n	80097fe <_Balloc+0x2e>
 8009834:	2000      	movs	r0, #0
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	6802      	ldr	r2, [r0, #0]
 800983a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800983e:	2300      	movs	r3, #0
 8009840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009844:	e7f7      	b.n	8009836 <_Balloc+0x66>
 8009846:	bf00      	nop
 8009848:	0800e0a1 	.word	0x0800e0a1
 800984c:	0800e128 	.word	0x0800e128

08009850 <_Bfree>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009854:	4605      	mov	r5, r0
 8009856:	460c      	mov	r4, r1
 8009858:	b976      	cbnz	r6, 8009878 <_Bfree+0x28>
 800985a:	2010      	movs	r0, #16
 800985c:	f7fe fbcc 	bl	8007ff8 <malloc>
 8009860:	4602      	mov	r2, r0
 8009862:	6268      	str	r0, [r5, #36]	; 0x24
 8009864:	b920      	cbnz	r0, 8009870 <_Bfree+0x20>
 8009866:	4b09      	ldr	r3, [pc, #36]	; (800988c <_Bfree+0x3c>)
 8009868:	4809      	ldr	r0, [pc, #36]	; (8009890 <_Bfree+0x40>)
 800986a:	218a      	movs	r1, #138	; 0x8a
 800986c:	f000 fcbe 	bl	800a1ec <__assert_func>
 8009870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009874:	6006      	str	r6, [r0, #0]
 8009876:	60c6      	str	r6, [r0, #12]
 8009878:	b13c      	cbz	r4, 800988a <_Bfree+0x3a>
 800987a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800987c:	6862      	ldr	r2, [r4, #4]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009884:	6021      	str	r1, [r4, #0]
 8009886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	0800e0a1 	.word	0x0800e0a1
 8009890:	0800e128 	.word	0x0800e128

08009894 <__multadd>:
 8009894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009898:	690e      	ldr	r6, [r1, #16]
 800989a:	4607      	mov	r7, r0
 800989c:	4698      	mov	r8, r3
 800989e:	460c      	mov	r4, r1
 80098a0:	f101 0014 	add.w	r0, r1, #20
 80098a4:	2300      	movs	r3, #0
 80098a6:	6805      	ldr	r5, [r0, #0]
 80098a8:	b2a9      	uxth	r1, r5
 80098aa:	fb02 8101 	mla	r1, r2, r1, r8
 80098ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80098b2:	0c2d      	lsrs	r5, r5, #16
 80098b4:	fb02 c505 	mla	r5, r2, r5, ip
 80098b8:	b289      	uxth	r1, r1
 80098ba:	3301      	adds	r3, #1
 80098bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80098c0:	429e      	cmp	r6, r3
 80098c2:	f840 1b04 	str.w	r1, [r0], #4
 80098c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80098ca:	dcec      	bgt.n	80098a6 <__multadd+0x12>
 80098cc:	f1b8 0f00 	cmp.w	r8, #0
 80098d0:	d022      	beq.n	8009918 <__multadd+0x84>
 80098d2:	68a3      	ldr	r3, [r4, #8]
 80098d4:	42b3      	cmp	r3, r6
 80098d6:	dc19      	bgt.n	800990c <__multadd+0x78>
 80098d8:	6861      	ldr	r1, [r4, #4]
 80098da:	4638      	mov	r0, r7
 80098dc:	3101      	adds	r1, #1
 80098de:	f7ff ff77 	bl	80097d0 <_Balloc>
 80098e2:	4605      	mov	r5, r0
 80098e4:	b928      	cbnz	r0, 80098f2 <__multadd+0x5e>
 80098e6:	4602      	mov	r2, r0
 80098e8:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <__multadd+0x8c>)
 80098ea:	480e      	ldr	r0, [pc, #56]	; (8009924 <__multadd+0x90>)
 80098ec:	21b5      	movs	r1, #181	; 0xb5
 80098ee:	f000 fc7d 	bl	800a1ec <__assert_func>
 80098f2:	6922      	ldr	r2, [r4, #16]
 80098f4:	3202      	adds	r2, #2
 80098f6:	f104 010c 	add.w	r1, r4, #12
 80098fa:	0092      	lsls	r2, r2, #2
 80098fc:	300c      	adds	r0, #12
 80098fe:	f7fe fb83 	bl	8008008 <memcpy>
 8009902:	4621      	mov	r1, r4
 8009904:	4638      	mov	r0, r7
 8009906:	f7ff ffa3 	bl	8009850 <_Bfree>
 800990a:	462c      	mov	r4, r5
 800990c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009910:	3601      	adds	r6, #1
 8009912:	f8c3 8014 	str.w	r8, [r3, #20]
 8009916:	6126      	str	r6, [r4, #16]
 8009918:	4620      	mov	r0, r4
 800991a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800991e:	bf00      	nop
 8009920:	0800e117 	.word	0x0800e117
 8009924:	0800e128 	.word	0x0800e128

08009928 <__hi0bits>:
 8009928:	0c03      	lsrs	r3, r0, #16
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	b9d3      	cbnz	r3, 8009964 <__hi0bits+0x3c>
 800992e:	0400      	lsls	r0, r0, #16
 8009930:	2310      	movs	r3, #16
 8009932:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009936:	bf04      	itt	eq
 8009938:	0200      	lsleq	r0, r0, #8
 800993a:	3308      	addeq	r3, #8
 800993c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009940:	bf04      	itt	eq
 8009942:	0100      	lsleq	r0, r0, #4
 8009944:	3304      	addeq	r3, #4
 8009946:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800994a:	bf04      	itt	eq
 800994c:	0080      	lsleq	r0, r0, #2
 800994e:	3302      	addeq	r3, #2
 8009950:	2800      	cmp	r0, #0
 8009952:	db05      	blt.n	8009960 <__hi0bits+0x38>
 8009954:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009958:	f103 0301 	add.w	r3, r3, #1
 800995c:	bf08      	it	eq
 800995e:	2320      	moveq	r3, #32
 8009960:	4618      	mov	r0, r3
 8009962:	4770      	bx	lr
 8009964:	2300      	movs	r3, #0
 8009966:	e7e4      	b.n	8009932 <__hi0bits+0xa>

08009968 <__lo0bits>:
 8009968:	6803      	ldr	r3, [r0, #0]
 800996a:	f013 0207 	ands.w	r2, r3, #7
 800996e:	4601      	mov	r1, r0
 8009970:	d00b      	beq.n	800998a <__lo0bits+0x22>
 8009972:	07da      	lsls	r2, r3, #31
 8009974:	d424      	bmi.n	80099c0 <__lo0bits+0x58>
 8009976:	0798      	lsls	r0, r3, #30
 8009978:	bf49      	itett	mi
 800997a:	085b      	lsrmi	r3, r3, #1
 800997c:	089b      	lsrpl	r3, r3, #2
 800997e:	2001      	movmi	r0, #1
 8009980:	600b      	strmi	r3, [r1, #0]
 8009982:	bf5c      	itt	pl
 8009984:	600b      	strpl	r3, [r1, #0]
 8009986:	2002      	movpl	r0, #2
 8009988:	4770      	bx	lr
 800998a:	b298      	uxth	r0, r3
 800998c:	b9b0      	cbnz	r0, 80099bc <__lo0bits+0x54>
 800998e:	0c1b      	lsrs	r3, r3, #16
 8009990:	2010      	movs	r0, #16
 8009992:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009996:	bf04      	itt	eq
 8009998:	0a1b      	lsreq	r3, r3, #8
 800999a:	3008      	addeq	r0, #8
 800999c:	071a      	lsls	r2, r3, #28
 800999e:	bf04      	itt	eq
 80099a0:	091b      	lsreq	r3, r3, #4
 80099a2:	3004      	addeq	r0, #4
 80099a4:	079a      	lsls	r2, r3, #30
 80099a6:	bf04      	itt	eq
 80099a8:	089b      	lsreq	r3, r3, #2
 80099aa:	3002      	addeq	r0, #2
 80099ac:	07da      	lsls	r2, r3, #31
 80099ae:	d403      	bmi.n	80099b8 <__lo0bits+0x50>
 80099b0:	085b      	lsrs	r3, r3, #1
 80099b2:	f100 0001 	add.w	r0, r0, #1
 80099b6:	d005      	beq.n	80099c4 <__lo0bits+0x5c>
 80099b8:	600b      	str	r3, [r1, #0]
 80099ba:	4770      	bx	lr
 80099bc:	4610      	mov	r0, r2
 80099be:	e7e8      	b.n	8009992 <__lo0bits+0x2a>
 80099c0:	2000      	movs	r0, #0
 80099c2:	4770      	bx	lr
 80099c4:	2020      	movs	r0, #32
 80099c6:	4770      	bx	lr

080099c8 <__i2b>:
 80099c8:	b510      	push	{r4, lr}
 80099ca:	460c      	mov	r4, r1
 80099cc:	2101      	movs	r1, #1
 80099ce:	f7ff feff 	bl	80097d0 <_Balloc>
 80099d2:	4602      	mov	r2, r0
 80099d4:	b928      	cbnz	r0, 80099e2 <__i2b+0x1a>
 80099d6:	4b05      	ldr	r3, [pc, #20]	; (80099ec <__i2b+0x24>)
 80099d8:	4805      	ldr	r0, [pc, #20]	; (80099f0 <__i2b+0x28>)
 80099da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099de:	f000 fc05 	bl	800a1ec <__assert_func>
 80099e2:	2301      	movs	r3, #1
 80099e4:	6144      	str	r4, [r0, #20]
 80099e6:	6103      	str	r3, [r0, #16]
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	bf00      	nop
 80099ec:	0800e117 	.word	0x0800e117
 80099f0:	0800e128 	.word	0x0800e128

080099f4 <__multiply>:
 80099f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f8:	4614      	mov	r4, r2
 80099fa:	690a      	ldr	r2, [r1, #16]
 80099fc:	6923      	ldr	r3, [r4, #16]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	bfb8      	it	lt
 8009a02:	460b      	movlt	r3, r1
 8009a04:	460d      	mov	r5, r1
 8009a06:	bfbc      	itt	lt
 8009a08:	4625      	movlt	r5, r4
 8009a0a:	461c      	movlt	r4, r3
 8009a0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a14:	68ab      	ldr	r3, [r5, #8]
 8009a16:	6869      	ldr	r1, [r5, #4]
 8009a18:	eb0a 0709 	add.w	r7, sl, r9
 8009a1c:	42bb      	cmp	r3, r7
 8009a1e:	b085      	sub	sp, #20
 8009a20:	bfb8      	it	lt
 8009a22:	3101      	addlt	r1, #1
 8009a24:	f7ff fed4 	bl	80097d0 <_Balloc>
 8009a28:	b930      	cbnz	r0, 8009a38 <__multiply+0x44>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	4b42      	ldr	r3, [pc, #264]	; (8009b38 <__multiply+0x144>)
 8009a2e:	4843      	ldr	r0, [pc, #268]	; (8009b3c <__multiply+0x148>)
 8009a30:	f240 115d 	movw	r1, #349	; 0x15d
 8009a34:	f000 fbda 	bl	800a1ec <__assert_func>
 8009a38:	f100 0614 	add.w	r6, r0, #20
 8009a3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a40:	4633      	mov	r3, r6
 8009a42:	2200      	movs	r2, #0
 8009a44:	4543      	cmp	r3, r8
 8009a46:	d31e      	bcc.n	8009a86 <__multiply+0x92>
 8009a48:	f105 0c14 	add.w	ip, r5, #20
 8009a4c:	f104 0314 	add.w	r3, r4, #20
 8009a50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a58:	9202      	str	r2, [sp, #8]
 8009a5a:	ebac 0205 	sub.w	r2, ip, r5
 8009a5e:	3a15      	subs	r2, #21
 8009a60:	f022 0203 	bic.w	r2, r2, #3
 8009a64:	3204      	adds	r2, #4
 8009a66:	f105 0115 	add.w	r1, r5, #21
 8009a6a:	458c      	cmp	ip, r1
 8009a6c:	bf38      	it	cc
 8009a6e:	2204      	movcc	r2, #4
 8009a70:	9201      	str	r2, [sp, #4]
 8009a72:	9a02      	ldr	r2, [sp, #8]
 8009a74:	9303      	str	r3, [sp, #12]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d808      	bhi.n	8009a8c <__multiply+0x98>
 8009a7a:	2f00      	cmp	r7, #0
 8009a7c:	dc55      	bgt.n	8009b2a <__multiply+0x136>
 8009a7e:	6107      	str	r7, [r0, #16]
 8009a80:	b005      	add	sp, #20
 8009a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a86:	f843 2b04 	str.w	r2, [r3], #4
 8009a8a:	e7db      	b.n	8009a44 <__multiply+0x50>
 8009a8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a90:	f1ba 0f00 	cmp.w	sl, #0
 8009a94:	d020      	beq.n	8009ad8 <__multiply+0xe4>
 8009a96:	f105 0e14 	add.w	lr, r5, #20
 8009a9a:	46b1      	mov	r9, r6
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009aa2:	f8d9 b000 	ldr.w	fp, [r9]
 8009aa6:	b2a1      	uxth	r1, r4
 8009aa8:	fa1f fb8b 	uxth.w	fp, fp
 8009aac:	fb0a b101 	mla	r1, sl, r1, fp
 8009ab0:	4411      	add	r1, r2
 8009ab2:	f8d9 2000 	ldr.w	r2, [r9]
 8009ab6:	0c24      	lsrs	r4, r4, #16
 8009ab8:	0c12      	lsrs	r2, r2, #16
 8009aba:	fb0a 2404 	mla	r4, sl, r4, r2
 8009abe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009ac2:	b289      	uxth	r1, r1
 8009ac4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ac8:	45f4      	cmp	ip, lr
 8009aca:	f849 1b04 	str.w	r1, [r9], #4
 8009ace:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009ad2:	d8e4      	bhi.n	8009a9e <__multiply+0xaa>
 8009ad4:	9901      	ldr	r1, [sp, #4]
 8009ad6:	5072      	str	r2, [r6, r1]
 8009ad8:	9a03      	ldr	r2, [sp, #12]
 8009ada:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	f1b9 0f00 	cmp.w	r9, #0
 8009ae4:	d01f      	beq.n	8009b26 <__multiply+0x132>
 8009ae6:	6834      	ldr	r4, [r6, #0]
 8009ae8:	f105 0114 	add.w	r1, r5, #20
 8009aec:	46b6      	mov	lr, r6
 8009aee:	f04f 0a00 	mov.w	sl, #0
 8009af2:	880a      	ldrh	r2, [r1, #0]
 8009af4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009af8:	fb09 b202 	mla	r2, r9, r2, fp
 8009afc:	4492      	add	sl, r2
 8009afe:	b2a4      	uxth	r4, r4
 8009b00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b04:	f84e 4b04 	str.w	r4, [lr], #4
 8009b08:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b0c:	f8be 2000 	ldrh.w	r2, [lr]
 8009b10:	0c24      	lsrs	r4, r4, #16
 8009b12:	fb09 2404 	mla	r4, r9, r4, r2
 8009b16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b1a:	458c      	cmp	ip, r1
 8009b1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b20:	d8e7      	bhi.n	8009af2 <__multiply+0xfe>
 8009b22:	9a01      	ldr	r2, [sp, #4]
 8009b24:	50b4      	str	r4, [r6, r2]
 8009b26:	3604      	adds	r6, #4
 8009b28:	e7a3      	b.n	8009a72 <__multiply+0x7e>
 8009b2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1a5      	bne.n	8009a7e <__multiply+0x8a>
 8009b32:	3f01      	subs	r7, #1
 8009b34:	e7a1      	b.n	8009a7a <__multiply+0x86>
 8009b36:	bf00      	nop
 8009b38:	0800e117 	.word	0x0800e117
 8009b3c:	0800e128 	.word	0x0800e128

08009b40 <__pow5mult>:
 8009b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b44:	4615      	mov	r5, r2
 8009b46:	f012 0203 	ands.w	r2, r2, #3
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	d007      	beq.n	8009b60 <__pow5mult+0x20>
 8009b50:	4c25      	ldr	r4, [pc, #148]	; (8009be8 <__pow5mult+0xa8>)
 8009b52:	3a01      	subs	r2, #1
 8009b54:	2300      	movs	r3, #0
 8009b56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b5a:	f7ff fe9b 	bl	8009894 <__multadd>
 8009b5e:	4607      	mov	r7, r0
 8009b60:	10ad      	asrs	r5, r5, #2
 8009b62:	d03d      	beq.n	8009be0 <__pow5mult+0xa0>
 8009b64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b66:	b97c      	cbnz	r4, 8009b88 <__pow5mult+0x48>
 8009b68:	2010      	movs	r0, #16
 8009b6a:	f7fe fa45 	bl	8007ff8 <malloc>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	6270      	str	r0, [r6, #36]	; 0x24
 8009b72:	b928      	cbnz	r0, 8009b80 <__pow5mult+0x40>
 8009b74:	4b1d      	ldr	r3, [pc, #116]	; (8009bec <__pow5mult+0xac>)
 8009b76:	481e      	ldr	r0, [pc, #120]	; (8009bf0 <__pow5mult+0xb0>)
 8009b78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b7c:	f000 fb36 	bl	800a1ec <__assert_func>
 8009b80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b84:	6004      	str	r4, [r0, #0]
 8009b86:	60c4      	str	r4, [r0, #12]
 8009b88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b90:	b94c      	cbnz	r4, 8009ba6 <__pow5mult+0x66>
 8009b92:	f240 2171 	movw	r1, #625	; 0x271
 8009b96:	4630      	mov	r0, r6
 8009b98:	f7ff ff16 	bl	80099c8 <__i2b>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	6003      	str	r3, [r0, #0]
 8009ba6:	f04f 0900 	mov.w	r9, #0
 8009baa:	07eb      	lsls	r3, r5, #31
 8009bac:	d50a      	bpl.n	8009bc4 <__pow5mult+0x84>
 8009bae:	4639      	mov	r1, r7
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f7ff ff1e 	bl	80099f4 <__multiply>
 8009bb8:	4639      	mov	r1, r7
 8009bba:	4680      	mov	r8, r0
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f7ff fe47 	bl	8009850 <_Bfree>
 8009bc2:	4647      	mov	r7, r8
 8009bc4:	106d      	asrs	r5, r5, #1
 8009bc6:	d00b      	beq.n	8009be0 <__pow5mult+0xa0>
 8009bc8:	6820      	ldr	r0, [r4, #0]
 8009bca:	b938      	cbnz	r0, 8009bdc <__pow5mult+0x9c>
 8009bcc:	4622      	mov	r2, r4
 8009bce:	4621      	mov	r1, r4
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff ff0f 	bl	80099f4 <__multiply>
 8009bd6:	6020      	str	r0, [r4, #0]
 8009bd8:	f8c0 9000 	str.w	r9, [r0]
 8009bdc:	4604      	mov	r4, r0
 8009bde:	e7e4      	b.n	8009baa <__pow5mult+0x6a>
 8009be0:	4638      	mov	r0, r7
 8009be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009be6:	bf00      	nop
 8009be8:	0800e278 	.word	0x0800e278
 8009bec:	0800e0a1 	.word	0x0800e0a1
 8009bf0:	0800e128 	.word	0x0800e128

08009bf4 <__lshift>:
 8009bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	6849      	ldr	r1, [r1, #4]
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c02:	68a3      	ldr	r3, [r4, #8]
 8009c04:	4607      	mov	r7, r0
 8009c06:	4691      	mov	r9, r2
 8009c08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c0c:	f108 0601 	add.w	r6, r8, #1
 8009c10:	42b3      	cmp	r3, r6
 8009c12:	db0b      	blt.n	8009c2c <__lshift+0x38>
 8009c14:	4638      	mov	r0, r7
 8009c16:	f7ff fddb 	bl	80097d0 <_Balloc>
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	b948      	cbnz	r0, 8009c32 <__lshift+0x3e>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	4b28      	ldr	r3, [pc, #160]	; (8009cc4 <__lshift+0xd0>)
 8009c22:	4829      	ldr	r0, [pc, #164]	; (8009cc8 <__lshift+0xd4>)
 8009c24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c28:	f000 fae0 	bl	800a1ec <__assert_func>
 8009c2c:	3101      	adds	r1, #1
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	e7ee      	b.n	8009c10 <__lshift+0x1c>
 8009c32:	2300      	movs	r3, #0
 8009c34:	f100 0114 	add.w	r1, r0, #20
 8009c38:	f100 0210 	add.w	r2, r0, #16
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	4553      	cmp	r3, sl
 8009c40:	db33      	blt.n	8009caa <__lshift+0xb6>
 8009c42:	6920      	ldr	r0, [r4, #16]
 8009c44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c48:	f104 0314 	add.w	r3, r4, #20
 8009c4c:	f019 091f 	ands.w	r9, r9, #31
 8009c50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c58:	d02b      	beq.n	8009cb2 <__lshift+0xbe>
 8009c5a:	f1c9 0e20 	rsb	lr, r9, #32
 8009c5e:	468a      	mov	sl, r1
 8009c60:	2200      	movs	r2, #0
 8009c62:	6818      	ldr	r0, [r3, #0]
 8009c64:	fa00 f009 	lsl.w	r0, r0, r9
 8009c68:	4302      	orrs	r2, r0
 8009c6a:	f84a 2b04 	str.w	r2, [sl], #4
 8009c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c72:	459c      	cmp	ip, r3
 8009c74:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c78:	d8f3      	bhi.n	8009c62 <__lshift+0x6e>
 8009c7a:	ebac 0304 	sub.w	r3, ip, r4
 8009c7e:	3b15      	subs	r3, #21
 8009c80:	f023 0303 	bic.w	r3, r3, #3
 8009c84:	3304      	adds	r3, #4
 8009c86:	f104 0015 	add.w	r0, r4, #21
 8009c8a:	4584      	cmp	ip, r0
 8009c8c:	bf38      	it	cc
 8009c8e:	2304      	movcc	r3, #4
 8009c90:	50ca      	str	r2, [r1, r3]
 8009c92:	b10a      	cbz	r2, 8009c98 <__lshift+0xa4>
 8009c94:	f108 0602 	add.w	r6, r8, #2
 8009c98:	3e01      	subs	r6, #1
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	612e      	str	r6, [r5, #16]
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	f7ff fdd6 	bl	8009850 <_Bfree>
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009caa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cae:	3301      	adds	r3, #1
 8009cb0:	e7c5      	b.n	8009c3e <__lshift+0x4a>
 8009cb2:	3904      	subs	r1, #4
 8009cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cbc:	459c      	cmp	ip, r3
 8009cbe:	d8f9      	bhi.n	8009cb4 <__lshift+0xc0>
 8009cc0:	e7ea      	b.n	8009c98 <__lshift+0xa4>
 8009cc2:	bf00      	nop
 8009cc4:	0800e117 	.word	0x0800e117
 8009cc8:	0800e128 	.word	0x0800e128

08009ccc <__mcmp>:
 8009ccc:	b530      	push	{r4, r5, lr}
 8009cce:	6902      	ldr	r2, [r0, #16]
 8009cd0:	690c      	ldr	r4, [r1, #16]
 8009cd2:	1b12      	subs	r2, r2, r4
 8009cd4:	d10e      	bne.n	8009cf4 <__mcmp+0x28>
 8009cd6:	f100 0314 	add.w	r3, r0, #20
 8009cda:	3114      	adds	r1, #20
 8009cdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ce0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ce4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ce8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009cec:	42a5      	cmp	r5, r4
 8009cee:	d003      	beq.n	8009cf8 <__mcmp+0x2c>
 8009cf0:	d305      	bcc.n	8009cfe <__mcmp+0x32>
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	bd30      	pop	{r4, r5, pc}
 8009cf8:	4283      	cmp	r3, r0
 8009cfa:	d3f3      	bcc.n	8009ce4 <__mcmp+0x18>
 8009cfc:	e7fa      	b.n	8009cf4 <__mcmp+0x28>
 8009cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009d02:	e7f7      	b.n	8009cf4 <__mcmp+0x28>

08009d04 <__mdiff>:
 8009d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	460c      	mov	r4, r1
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4620      	mov	r0, r4
 8009d10:	4617      	mov	r7, r2
 8009d12:	f7ff ffdb 	bl	8009ccc <__mcmp>
 8009d16:	1e05      	subs	r5, r0, #0
 8009d18:	d110      	bne.n	8009d3c <__mdiff+0x38>
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f7ff fd57 	bl	80097d0 <_Balloc>
 8009d22:	b930      	cbnz	r0, 8009d32 <__mdiff+0x2e>
 8009d24:	4b39      	ldr	r3, [pc, #228]	; (8009e0c <__mdiff+0x108>)
 8009d26:	4602      	mov	r2, r0
 8009d28:	f240 2132 	movw	r1, #562	; 0x232
 8009d2c:	4838      	ldr	r0, [pc, #224]	; (8009e10 <__mdiff+0x10c>)
 8009d2e:	f000 fa5d 	bl	800a1ec <__assert_func>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3c:	bfa4      	itt	ge
 8009d3e:	463b      	movge	r3, r7
 8009d40:	4627      	movge	r7, r4
 8009d42:	4630      	mov	r0, r6
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	bfa6      	itte	ge
 8009d48:	461c      	movge	r4, r3
 8009d4a:	2500      	movge	r5, #0
 8009d4c:	2501      	movlt	r5, #1
 8009d4e:	f7ff fd3f 	bl	80097d0 <_Balloc>
 8009d52:	b920      	cbnz	r0, 8009d5e <__mdiff+0x5a>
 8009d54:	4b2d      	ldr	r3, [pc, #180]	; (8009e0c <__mdiff+0x108>)
 8009d56:	4602      	mov	r2, r0
 8009d58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d5c:	e7e6      	b.n	8009d2c <__mdiff+0x28>
 8009d5e:	693e      	ldr	r6, [r7, #16]
 8009d60:	60c5      	str	r5, [r0, #12]
 8009d62:	6925      	ldr	r5, [r4, #16]
 8009d64:	f107 0114 	add.w	r1, r7, #20
 8009d68:	f104 0914 	add.w	r9, r4, #20
 8009d6c:	f100 0e14 	add.w	lr, r0, #20
 8009d70:	f107 0210 	add.w	r2, r7, #16
 8009d74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d7c:	46f2      	mov	sl, lr
 8009d7e:	2700      	movs	r7, #0
 8009d80:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d88:	fa1f f883 	uxth.w	r8, r3
 8009d8c:	fa17 f78b 	uxtah	r7, r7, fp
 8009d90:	0c1b      	lsrs	r3, r3, #16
 8009d92:	eba7 0808 	sub.w	r8, r7, r8
 8009d96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d9e:	fa1f f888 	uxth.w	r8, r8
 8009da2:	141f      	asrs	r7, r3, #16
 8009da4:	454d      	cmp	r5, r9
 8009da6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009daa:	f84a 3b04 	str.w	r3, [sl], #4
 8009dae:	d8e7      	bhi.n	8009d80 <__mdiff+0x7c>
 8009db0:	1b2b      	subs	r3, r5, r4
 8009db2:	3b15      	subs	r3, #21
 8009db4:	f023 0303 	bic.w	r3, r3, #3
 8009db8:	3304      	adds	r3, #4
 8009dba:	3415      	adds	r4, #21
 8009dbc:	42a5      	cmp	r5, r4
 8009dbe:	bf38      	it	cc
 8009dc0:	2304      	movcc	r3, #4
 8009dc2:	4419      	add	r1, r3
 8009dc4:	4473      	add	r3, lr
 8009dc6:	469e      	mov	lr, r3
 8009dc8:	460d      	mov	r5, r1
 8009dca:	4565      	cmp	r5, ip
 8009dcc:	d30e      	bcc.n	8009dec <__mdiff+0xe8>
 8009dce:	f10c 0203 	add.w	r2, ip, #3
 8009dd2:	1a52      	subs	r2, r2, r1
 8009dd4:	f022 0203 	bic.w	r2, r2, #3
 8009dd8:	3903      	subs	r1, #3
 8009dda:	458c      	cmp	ip, r1
 8009ddc:	bf38      	it	cc
 8009dde:	2200      	movcc	r2, #0
 8009de0:	441a      	add	r2, r3
 8009de2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009de6:	b17b      	cbz	r3, 8009e08 <__mdiff+0x104>
 8009de8:	6106      	str	r6, [r0, #16]
 8009dea:	e7a5      	b.n	8009d38 <__mdiff+0x34>
 8009dec:	f855 8b04 	ldr.w	r8, [r5], #4
 8009df0:	fa17 f488 	uxtah	r4, r7, r8
 8009df4:	1422      	asrs	r2, r4, #16
 8009df6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009dfa:	b2a4      	uxth	r4, r4
 8009dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e00:	f84e 4b04 	str.w	r4, [lr], #4
 8009e04:	1417      	asrs	r7, r2, #16
 8009e06:	e7e0      	b.n	8009dca <__mdiff+0xc6>
 8009e08:	3e01      	subs	r6, #1
 8009e0a:	e7ea      	b.n	8009de2 <__mdiff+0xde>
 8009e0c:	0800e117 	.word	0x0800e117
 8009e10:	0800e128 	.word	0x0800e128

08009e14 <__d2b>:
 8009e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e18:	4689      	mov	r9, r1
 8009e1a:	2101      	movs	r1, #1
 8009e1c:	ec57 6b10 	vmov	r6, r7, d0
 8009e20:	4690      	mov	r8, r2
 8009e22:	f7ff fcd5 	bl	80097d0 <_Balloc>
 8009e26:	4604      	mov	r4, r0
 8009e28:	b930      	cbnz	r0, 8009e38 <__d2b+0x24>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	4b25      	ldr	r3, [pc, #148]	; (8009ec4 <__d2b+0xb0>)
 8009e2e:	4826      	ldr	r0, [pc, #152]	; (8009ec8 <__d2b+0xb4>)
 8009e30:	f240 310a 	movw	r1, #778	; 0x30a
 8009e34:	f000 f9da 	bl	800a1ec <__assert_func>
 8009e38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e40:	bb35      	cbnz	r5, 8009e90 <__d2b+0x7c>
 8009e42:	2e00      	cmp	r6, #0
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	d028      	beq.n	8009e9a <__d2b+0x86>
 8009e48:	4668      	mov	r0, sp
 8009e4a:	9600      	str	r6, [sp, #0]
 8009e4c:	f7ff fd8c 	bl	8009968 <__lo0bits>
 8009e50:	9900      	ldr	r1, [sp, #0]
 8009e52:	b300      	cbz	r0, 8009e96 <__d2b+0x82>
 8009e54:	9a01      	ldr	r2, [sp, #4]
 8009e56:	f1c0 0320 	rsb	r3, r0, #32
 8009e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e5e:	430b      	orrs	r3, r1
 8009e60:	40c2      	lsrs	r2, r0
 8009e62:	6163      	str	r3, [r4, #20]
 8009e64:	9201      	str	r2, [sp, #4]
 8009e66:	9b01      	ldr	r3, [sp, #4]
 8009e68:	61a3      	str	r3, [r4, #24]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bf14      	ite	ne
 8009e6e:	2202      	movne	r2, #2
 8009e70:	2201      	moveq	r2, #1
 8009e72:	6122      	str	r2, [r4, #16]
 8009e74:	b1d5      	cbz	r5, 8009eac <__d2b+0x98>
 8009e76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e7a:	4405      	add	r5, r0
 8009e7c:	f8c9 5000 	str.w	r5, [r9]
 8009e80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e84:	f8c8 0000 	str.w	r0, [r8]
 8009e88:	4620      	mov	r0, r4
 8009e8a:	b003      	add	sp, #12
 8009e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e94:	e7d5      	b.n	8009e42 <__d2b+0x2e>
 8009e96:	6161      	str	r1, [r4, #20]
 8009e98:	e7e5      	b.n	8009e66 <__d2b+0x52>
 8009e9a:	a801      	add	r0, sp, #4
 8009e9c:	f7ff fd64 	bl	8009968 <__lo0bits>
 8009ea0:	9b01      	ldr	r3, [sp, #4]
 8009ea2:	6163      	str	r3, [r4, #20]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	6122      	str	r2, [r4, #16]
 8009ea8:	3020      	adds	r0, #32
 8009eaa:	e7e3      	b.n	8009e74 <__d2b+0x60>
 8009eac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009eb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009eb4:	f8c9 0000 	str.w	r0, [r9]
 8009eb8:	6918      	ldr	r0, [r3, #16]
 8009eba:	f7ff fd35 	bl	8009928 <__hi0bits>
 8009ebe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ec2:	e7df      	b.n	8009e84 <__d2b+0x70>
 8009ec4:	0800e117 	.word	0x0800e117
 8009ec8:	0800e128 	.word	0x0800e128

08009ecc <_calloc_r>:
 8009ecc:	b513      	push	{r0, r1, r4, lr}
 8009ece:	434a      	muls	r2, r1
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	9201      	str	r2, [sp, #4]
 8009ed4:	f7fe f8fe 	bl	80080d4 <_malloc_r>
 8009ed8:	4604      	mov	r4, r0
 8009eda:	b118      	cbz	r0, 8009ee4 <_calloc_r+0x18>
 8009edc:	9a01      	ldr	r2, [sp, #4]
 8009ede:	2100      	movs	r1, #0
 8009ee0:	f7fe f8a0 	bl	8008024 <memset>
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	b002      	add	sp, #8
 8009ee8:	bd10      	pop	{r4, pc}

08009eea <_realloc_r>:
 8009eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eec:	4607      	mov	r7, r0
 8009eee:	4614      	mov	r4, r2
 8009ef0:	460e      	mov	r6, r1
 8009ef2:	b921      	cbnz	r1, 8009efe <_realloc_r+0x14>
 8009ef4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ef8:	4611      	mov	r1, r2
 8009efa:	f7fe b8eb 	b.w	80080d4 <_malloc_r>
 8009efe:	b922      	cbnz	r2, 8009f0a <_realloc_r+0x20>
 8009f00:	f7fe f898 	bl	8008034 <_free_r>
 8009f04:	4625      	mov	r5, r4
 8009f06:	4628      	mov	r0, r5
 8009f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f0a:	f000 f9ce 	bl	800a2aa <_malloc_usable_size_r>
 8009f0e:	42a0      	cmp	r0, r4
 8009f10:	d20f      	bcs.n	8009f32 <_realloc_r+0x48>
 8009f12:	4621      	mov	r1, r4
 8009f14:	4638      	mov	r0, r7
 8009f16:	f7fe f8dd 	bl	80080d4 <_malloc_r>
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d0f2      	beq.n	8009f06 <_realloc_r+0x1c>
 8009f20:	4631      	mov	r1, r6
 8009f22:	4622      	mov	r2, r4
 8009f24:	f7fe f870 	bl	8008008 <memcpy>
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	f7fe f882 	bl	8008034 <_free_r>
 8009f30:	e7e9      	b.n	8009f06 <_realloc_r+0x1c>
 8009f32:	4635      	mov	r5, r6
 8009f34:	e7e7      	b.n	8009f06 <_realloc_r+0x1c>

08009f36 <__ssputs_r>:
 8009f36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f3a:	688e      	ldr	r6, [r1, #8]
 8009f3c:	429e      	cmp	r6, r3
 8009f3e:	4682      	mov	sl, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	4690      	mov	r8, r2
 8009f44:	461f      	mov	r7, r3
 8009f46:	d838      	bhi.n	8009fba <__ssputs_r+0x84>
 8009f48:	898a      	ldrh	r2, [r1, #12]
 8009f4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f4e:	d032      	beq.n	8009fb6 <__ssputs_r+0x80>
 8009f50:	6825      	ldr	r5, [r4, #0]
 8009f52:	6909      	ldr	r1, [r1, #16]
 8009f54:	eba5 0901 	sub.w	r9, r5, r1
 8009f58:	6965      	ldr	r5, [r4, #20]
 8009f5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f62:	3301      	adds	r3, #1
 8009f64:	444b      	add	r3, r9
 8009f66:	106d      	asrs	r5, r5, #1
 8009f68:	429d      	cmp	r5, r3
 8009f6a:	bf38      	it	cc
 8009f6c:	461d      	movcc	r5, r3
 8009f6e:	0553      	lsls	r3, r2, #21
 8009f70:	d531      	bpl.n	8009fd6 <__ssputs_r+0xa0>
 8009f72:	4629      	mov	r1, r5
 8009f74:	f7fe f8ae 	bl	80080d4 <_malloc_r>
 8009f78:	4606      	mov	r6, r0
 8009f7a:	b950      	cbnz	r0, 8009f92 <__ssputs_r+0x5c>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	f8ca 3000 	str.w	r3, [sl]
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f92:	6921      	ldr	r1, [r4, #16]
 8009f94:	464a      	mov	r2, r9
 8009f96:	f7fe f837 	bl	8008008 <memcpy>
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	6126      	str	r6, [r4, #16]
 8009fa8:	6165      	str	r5, [r4, #20]
 8009faa:	444e      	add	r6, r9
 8009fac:	eba5 0509 	sub.w	r5, r5, r9
 8009fb0:	6026      	str	r6, [r4, #0]
 8009fb2:	60a5      	str	r5, [r4, #8]
 8009fb4:	463e      	mov	r6, r7
 8009fb6:	42be      	cmp	r6, r7
 8009fb8:	d900      	bls.n	8009fbc <__ssputs_r+0x86>
 8009fba:	463e      	mov	r6, r7
 8009fbc:	4632      	mov	r2, r6
 8009fbe:	6820      	ldr	r0, [r4, #0]
 8009fc0:	4641      	mov	r1, r8
 8009fc2:	f000 f958 	bl	800a276 <memmove>
 8009fc6:	68a3      	ldr	r3, [r4, #8]
 8009fc8:	6822      	ldr	r2, [r4, #0]
 8009fca:	1b9b      	subs	r3, r3, r6
 8009fcc:	4432      	add	r2, r6
 8009fce:	60a3      	str	r3, [r4, #8]
 8009fd0:	6022      	str	r2, [r4, #0]
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e7db      	b.n	8009f8e <__ssputs_r+0x58>
 8009fd6:	462a      	mov	r2, r5
 8009fd8:	f7ff ff87 	bl	8009eea <_realloc_r>
 8009fdc:	4606      	mov	r6, r0
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d1e1      	bne.n	8009fa6 <__ssputs_r+0x70>
 8009fe2:	6921      	ldr	r1, [r4, #16]
 8009fe4:	4650      	mov	r0, sl
 8009fe6:	f7fe f825 	bl	8008034 <_free_r>
 8009fea:	e7c7      	b.n	8009f7c <__ssputs_r+0x46>

08009fec <_svfiprintf_r>:
 8009fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	4698      	mov	r8, r3
 8009ff2:	898b      	ldrh	r3, [r1, #12]
 8009ff4:	061b      	lsls	r3, r3, #24
 8009ff6:	b09d      	sub	sp, #116	; 0x74
 8009ff8:	4607      	mov	r7, r0
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	d50e      	bpl.n	800a01e <_svfiprintf_r+0x32>
 800a000:	690b      	ldr	r3, [r1, #16]
 800a002:	b963      	cbnz	r3, 800a01e <_svfiprintf_r+0x32>
 800a004:	2140      	movs	r1, #64	; 0x40
 800a006:	f7fe f865 	bl	80080d4 <_malloc_r>
 800a00a:	6028      	str	r0, [r5, #0]
 800a00c:	6128      	str	r0, [r5, #16]
 800a00e:	b920      	cbnz	r0, 800a01a <_svfiprintf_r+0x2e>
 800a010:	230c      	movs	r3, #12
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	f04f 30ff 	mov.w	r0, #4294967295
 800a018:	e0d1      	b.n	800a1be <_svfiprintf_r+0x1d2>
 800a01a:	2340      	movs	r3, #64	; 0x40
 800a01c:	616b      	str	r3, [r5, #20]
 800a01e:	2300      	movs	r3, #0
 800a020:	9309      	str	r3, [sp, #36]	; 0x24
 800a022:	2320      	movs	r3, #32
 800a024:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a028:	f8cd 800c 	str.w	r8, [sp, #12]
 800a02c:	2330      	movs	r3, #48	; 0x30
 800a02e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1d8 <_svfiprintf_r+0x1ec>
 800a032:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a036:	f04f 0901 	mov.w	r9, #1
 800a03a:	4623      	mov	r3, r4
 800a03c:	469a      	mov	sl, r3
 800a03e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a042:	b10a      	cbz	r2, 800a048 <_svfiprintf_r+0x5c>
 800a044:	2a25      	cmp	r2, #37	; 0x25
 800a046:	d1f9      	bne.n	800a03c <_svfiprintf_r+0x50>
 800a048:	ebba 0b04 	subs.w	fp, sl, r4
 800a04c:	d00b      	beq.n	800a066 <_svfiprintf_r+0x7a>
 800a04e:	465b      	mov	r3, fp
 800a050:	4622      	mov	r2, r4
 800a052:	4629      	mov	r1, r5
 800a054:	4638      	mov	r0, r7
 800a056:	f7ff ff6e 	bl	8009f36 <__ssputs_r>
 800a05a:	3001      	adds	r0, #1
 800a05c:	f000 80aa 	beq.w	800a1b4 <_svfiprintf_r+0x1c8>
 800a060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a062:	445a      	add	r2, fp
 800a064:	9209      	str	r2, [sp, #36]	; 0x24
 800a066:	f89a 3000 	ldrb.w	r3, [sl]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f000 80a2 	beq.w	800a1b4 <_svfiprintf_r+0x1c8>
 800a070:	2300      	movs	r3, #0
 800a072:	f04f 32ff 	mov.w	r2, #4294967295
 800a076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a07a:	f10a 0a01 	add.w	sl, sl, #1
 800a07e:	9304      	str	r3, [sp, #16]
 800a080:	9307      	str	r3, [sp, #28]
 800a082:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a086:	931a      	str	r3, [sp, #104]	; 0x68
 800a088:	4654      	mov	r4, sl
 800a08a:	2205      	movs	r2, #5
 800a08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a090:	4851      	ldr	r0, [pc, #324]	; (800a1d8 <_svfiprintf_r+0x1ec>)
 800a092:	f7f6 f8a5 	bl	80001e0 <memchr>
 800a096:	9a04      	ldr	r2, [sp, #16]
 800a098:	b9d8      	cbnz	r0, 800a0d2 <_svfiprintf_r+0xe6>
 800a09a:	06d0      	lsls	r0, r2, #27
 800a09c:	bf44      	itt	mi
 800a09e:	2320      	movmi	r3, #32
 800a0a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a4:	0711      	lsls	r1, r2, #28
 800a0a6:	bf44      	itt	mi
 800a0a8:	232b      	movmi	r3, #43	; 0x2b
 800a0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b4:	d015      	beq.n	800a0e2 <_svfiprintf_r+0xf6>
 800a0b6:	9a07      	ldr	r2, [sp, #28]
 800a0b8:	4654      	mov	r4, sl
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	f04f 0c0a 	mov.w	ip, #10
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0c6:	3b30      	subs	r3, #48	; 0x30
 800a0c8:	2b09      	cmp	r3, #9
 800a0ca:	d94e      	bls.n	800a16a <_svfiprintf_r+0x17e>
 800a0cc:	b1b0      	cbz	r0, 800a0fc <_svfiprintf_r+0x110>
 800a0ce:	9207      	str	r2, [sp, #28]
 800a0d0:	e014      	b.n	800a0fc <_svfiprintf_r+0x110>
 800a0d2:	eba0 0308 	sub.w	r3, r0, r8
 800a0d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	46a2      	mov	sl, r4
 800a0e0:	e7d2      	b.n	800a088 <_svfiprintf_r+0x9c>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	1d19      	adds	r1, r3, #4
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	9103      	str	r1, [sp, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	bfbb      	ittet	lt
 800a0ee:	425b      	neglt	r3, r3
 800a0f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a0f4:	9307      	strge	r3, [sp, #28]
 800a0f6:	9307      	strlt	r3, [sp, #28]
 800a0f8:	bfb8      	it	lt
 800a0fa:	9204      	strlt	r2, [sp, #16]
 800a0fc:	7823      	ldrb	r3, [r4, #0]
 800a0fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a100:	d10c      	bne.n	800a11c <_svfiprintf_r+0x130>
 800a102:	7863      	ldrb	r3, [r4, #1]
 800a104:	2b2a      	cmp	r3, #42	; 0x2a
 800a106:	d135      	bne.n	800a174 <_svfiprintf_r+0x188>
 800a108:	9b03      	ldr	r3, [sp, #12]
 800a10a:	1d1a      	adds	r2, r3, #4
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	9203      	str	r2, [sp, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	bfb8      	it	lt
 800a114:	f04f 33ff 	movlt.w	r3, #4294967295
 800a118:	3402      	adds	r4, #2
 800a11a:	9305      	str	r3, [sp, #20]
 800a11c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1e8 <_svfiprintf_r+0x1fc>
 800a120:	7821      	ldrb	r1, [r4, #0]
 800a122:	2203      	movs	r2, #3
 800a124:	4650      	mov	r0, sl
 800a126:	f7f6 f85b 	bl	80001e0 <memchr>
 800a12a:	b140      	cbz	r0, 800a13e <_svfiprintf_r+0x152>
 800a12c:	2340      	movs	r3, #64	; 0x40
 800a12e:	eba0 000a 	sub.w	r0, r0, sl
 800a132:	fa03 f000 	lsl.w	r0, r3, r0
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	4303      	orrs	r3, r0
 800a13a:	3401      	adds	r4, #1
 800a13c:	9304      	str	r3, [sp, #16]
 800a13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a142:	4826      	ldr	r0, [pc, #152]	; (800a1dc <_svfiprintf_r+0x1f0>)
 800a144:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a148:	2206      	movs	r2, #6
 800a14a:	f7f6 f849 	bl	80001e0 <memchr>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d038      	beq.n	800a1c4 <_svfiprintf_r+0x1d8>
 800a152:	4b23      	ldr	r3, [pc, #140]	; (800a1e0 <_svfiprintf_r+0x1f4>)
 800a154:	bb1b      	cbnz	r3, 800a19e <_svfiprintf_r+0x1b2>
 800a156:	9b03      	ldr	r3, [sp, #12]
 800a158:	3307      	adds	r3, #7
 800a15a:	f023 0307 	bic.w	r3, r3, #7
 800a15e:	3308      	adds	r3, #8
 800a160:	9303      	str	r3, [sp, #12]
 800a162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a164:	4433      	add	r3, r6
 800a166:	9309      	str	r3, [sp, #36]	; 0x24
 800a168:	e767      	b.n	800a03a <_svfiprintf_r+0x4e>
 800a16a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a16e:	460c      	mov	r4, r1
 800a170:	2001      	movs	r0, #1
 800a172:	e7a5      	b.n	800a0c0 <_svfiprintf_r+0xd4>
 800a174:	2300      	movs	r3, #0
 800a176:	3401      	adds	r4, #1
 800a178:	9305      	str	r3, [sp, #20]
 800a17a:	4619      	mov	r1, r3
 800a17c:	f04f 0c0a 	mov.w	ip, #10
 800a180:	4620      	mov	r0, r4
 800a182:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a186:	3a30      	subs	r2, #48	; 0x30
 800a188:	2a09      	cmp	r2, #9
 800a18a:	d903      	bls.n	800a194 <_svfiprintf_r+0x1a8>
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d0c5      	beq.n	800a11c <_svfiprintf_r+0x130>
 800a190:	9105      	str	r1, [sp, #20]
 800a192:	e7c3      	b.n	800a11c <_svfiprintf_r+0x130>
 800a194:	fb0c 2101 	mla	r1, ip, r1, r2
 800a198:	4604      	mov	r4, r0
 800a19a:	2301      	movs	r3, #1
 800a19c:	e7f0      	b.n	800a180 <_svfiprintf_r+0x194>
 800a19e:	ab03      	add	r3, sp, #12
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	462a      	mov	r2, r5
 800a1a4:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <_svfiprintf_r+0x1f8>)
 800a1a6:	a904      	add	r1, sp, #16
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	f7fe f88d 	bl	80082c8 <_printf_float>
 800a1ae:	1c42      	adds	r2, r0, #1
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	d1d6      	bne.n	800a162 <_svfiprintf_r+0x176>
 800a1b4:	89ab      	ldrh	r3, [r5, #12]
 800a1b6:	065b      	lsls	r3, r3, #25
 800a1b8:	f53f af2c 	bmi.w	800a014 <_svfiprintf_r+0x28>
 800a1bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1be:	b01d      	add	sp, #116	; 0x74
 800a1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c4:	ab03      	add	r3, sp, #12
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	462a      	mov	r2, r5
 800a1ca:	4b06      	ldr	r3, [pc, #24]	; (800a1e4 <_svfiprintf_r+0x1f8>)
 800a1cc:	a904      	add	r1, sp, #16
 800a1ce:	4638      	mov	r0, r7
 800a1d0:	f7fe fb1e 	bl	8008810 <_printf_i>
 800a1d4:	e7eb      	b.n	800a1ae <_svfiprintf_r+0x1c2>
 800a1d6:	bf00      	nop
 800a1d8:	0800e284 	.word	0x0800e284
 800a1dc:	0800e28e 	.word	0x0800e28e
 800a1e0:	080082c9 	.word	0x080082c9
 800a1e4:	08009f37 	.word	0x08009f37
 800a1e8:	0800e28a 	.word	0x0800e28a

0800a1ec <__assert_func>:
 800a1ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1ee:	4614      	mov	r4, r2
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4b09      	ldr	r3, [pc, #36]	; (800a218 <__assert_func+0x2c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	68d8      	ldr	r0, [r3, #12]
 800a1fa:	b14c      	cbz	r4, 800a210 <__assert_func+0x24>
 800a1fc:	4b07      	ldr	r3, [pc, #28]	; (800a21c <__assert_func+0x30>)
 800a1fe:	9100      	str	r1, [sp, #0]
 800a200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a204:	4906      	ldr	r1, [pc, #24]	; (800a220 <__assert_func+0x34>)
 800a206:	462b      	mov	r3, r5
 800a208:	f000 f80e 	bl	800a228 <fiprintf>
 800a20c:	f000 fa7c 	bl	800a708 <abort>
 800a210:	4b04      	ldr	r3, [pc, #16]	; (800a224 <__assert_func+0x38>)
 800a212:	461c      	mov	r4, r3
 800a214:	e7f3      	b.n	800a1fe <__assert_func+0x12>
 800a216:	bf00      	nop
 800a218:	20000c1c 	.word	0x20000c1c
 800a21c:	0800e295 	.word	0x0800e295
 800a220:	0800e2a2 	.word	0x0800e2a2
 800a224:	0800e2d0 	.word	0x0800e2d0

0800a228 <fiprintf>:
 800a228:	b40e      	push	{r1, r2, r3}
 800a22a:	b503      	push	{r0, r1, lr}
 800a22c:	4601      	mov	r1, r0
 800a22e:	ab03      	add	r3, sp, #12
 800a230:	4805      	ldr	r0, [pc, #20]	; (800a248 <fiprintf+0x20>)
 800a232:	f853 2b04 	ldr.w	r2, [r3], #4
 800a236:	6800      	ldr	r0, [r0, #0]
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	f000 f867 	bl	800a30c <_vfiprintf_r>
 800a23e:	b002      	add	sp, #8
 800a240:	f85d eb04 	ldr.w	lr, [sp], #4
 800a244:	b003      	add	sp, #12
 800a246:	4770      	bx	lr
 800a248:	20000c1c 	.word	0x20000c1c

0800a24c <__retarget_lock_init_recursive>:
 800a24c:	4770      	bx	lr

0800a24e <__retarget_lock_acquire_recursive>:
 800a24e:	4770      	bx	lr

0800a250 <__retarget_lock_release_recursive>:
 800a250:	4770      	bx	lr

0800a252 <__ascii_mbtowc>:
 800a252:	b082      	sub	sp, #8
 800a254:	b901      	cbnz	r1, 800a258 <__ascii_mbtowc+0x6>
 800a256:	a901      	add	r1, sp, #4
 800a258:	b142      	cbz	r2, 800a26c <__ascii_mbtowc+0x1a>
 800a25a:	b14b      	cbz	r3, 800a270 <__ascii_mbtowc+0x1e>
 800a25c:	7813      	ldrb	r3, [r2, #0]
 800a25e:	600b      	str	r3, [r1, #0]
 800a260:	7812      	ldrb	r2, [r2, #0]
 800a262:	1e10      	subs	r0, r2, #0
 800a264:	bf18      	it	ne
 800a266:	2001      	movne	r0, #1
 800a268:	b002      	add	sp, #8
 800a26a:	4770      	bx	lr
 800a26c:	4610      	mov	r0, r2
 800a26e:	e7fb      	b.n	800a268 <__ascii_mbtowc+0x16>
 800a270:	f06f 0001 	mvn.w	r0, #1
 800a274:	e7f8      	b.n	800a268 <__ascii_mbtowc+0x16>

0800a276 <memmove>:
 800a276:	4288      	cmp	r0, r1
 800a278:	b510      	push	{r4, lr}
 800a27a:	eb01 0402 	add.w	r4, r1, r2
 800a27e:	d902      	bls.n	800a286 <memmove+0x10>
 800a280:	4284      	cmp	r4, r0
 800a282:	4623      	mov	r3, r4
 800a284:	d807      	bhi.n	800a296 <memmove+0x20>
 800a286:	1e43      	subs	r3, r0, #1
 800a288:	42a1      	cmp	r1, r4
 800a28a:	d008      	beq.n	800a29e <memmove+0x28>
 800a28c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a290:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a294:	e7f8      	b.n	800a288 <memmove+0x12>
 800a296:	4402      	add	r2, r0
 800a298:	4601      	mov	r1, r0
 800a29a:	428a      	cmp	r2, r1
 800a29c:	d100      	bne.n	800a2a0 <memmove+0x2a>
 800a29e:	bd10      	pop	{r4, pc}
 800a2a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2a8:	e7f7      	b.n	800a29a <memmove+0x24>

0800a2aa <_malloc_usable_size_r>:
 800a2aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ae:	1f18      	subs	r0, r3, #4
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	bfbc      	itt	lt
 800a2b4:	580b      	ldrlt	r3, [r1, r0]
 800a2b6:	18c0      	addlt	r0, r0, r3
 800a2b8:	4770      	bx	lr

0800a2ba <__sfputc_r>:
 800a2ba:	6893      	ldr	r3, [r2, #8]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	b410      	push	{r4}
 800a2c2:	6093      	str	r3, [r2, #8]
 800a2c4:	da08      	bge.n	800a2d8 <__sfputc_r+0x1e>
 800a2c6:	6994      	ldr	r4, [r2, #24]
 800a2c8:	42a3      	cmp	r3, r4
 800a2ca:	db01      	blt.n	800a2d0 <__sfputc_r+0x16>
 800a2cc:	290a      	cmp	r1, #10
 800a2ce:	d103      	bne.n	800a2d8 <__sfputc_r+0x1e>
 800a2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2d4:	f000 b94a 	b.w	800a56c <__swbuf_r>
 800a2d8:	6813      	ldr	r3, [r2, #0]
 800a2da:	1c58      	adds	r0, r3, #1
 800a2dc:	6010      	str	r0, [r2, #0]
 800a2de:	7019      	strb	r1, [r3, #0]
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <__sfputs_r>:
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	460f      	mov	r7, r1
 800a2ee:	4614      	mov	r4, r2
 800a2f0:	18d5      	adds	r5, r2, r3
 800a2f2:	42ac      	cmp	r4, r5
 800a2f4:	d101      	bne.n	800a2fa <__sfputs_r+0x12>
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	e007      	b.n	800a30a <__sfputs_r+0x22>
 800a2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2fe:	463a      	mov	r2, r7
 800a300:	4630      	mov	r0, r6
 800a302:	f7ff ffda 	bl	800a2ba <__sfputc_r>
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	d1f3      	bne.n	800a2f2 <__sfputs_r+0xa>
 800a30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a30c <_vfiprintf_r>:
 800a30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a310:	460d      	mov	r5, r1
 800a312:	b09d      	sub	sp, #116	; 0x74
 800a314:	4614      	mov	r4, r2
 800a316:	4698      	mov	r8, r3
 800a318:	4606      	mov	r6, r0
 800a31a:	b118      	cbz	r0, 800a324 <_vfiprintf_r+0x18>
 800a31c:	6983      	ldr	r3, [r0, #24]
 800a31e:	b90b      	cbnz	r3, 800a324 <_vfiprintf_r+0x18>
 800a320:	f000 fb14 	bl	800a94c <__sinit>
 800a324:	4b89      	ldr	r3, [pc, #548]	; (800a54c <_vfiprintf_r+0x240>)
 800a326:	429d      	cmp	r5, r3
 800a328:	d11b      	bne.n	800a362 <_vfiprintf_r+0x56>
 800a32a:	6875      	ldr	r5, [r6, #4]
 800a32c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a32e:	07d9      	lsls	r1, r3, #31
 800a330:	d405      	bmi.n	800a33e <_vfiprintf_r+0x32>
 800a332:	89ab      	ldrh	r3, [r5, #12]
 800a334:	059a      	lsls	r2, r3, #22
 800a336:	d402      	bmi.n	800a33e <_vfiprintf_r+0x32>
 800a338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a33a:	f7ff ff88 	bl	800a24e <__retarget_lock_acquire_recursive>
 800a33e:	89ab      	ldrh	r3, [r5, #12]
 800a340:	071b      	lsls	r3, r3, #28
 800a342:	d501      	bpl.n	800a348 <_vfiprintf_r+0x3c>
 800a344:	692b      	ldr	r3, [r5, #16]
 800a346:	b9eb      	cbnz	r3, 800a384 <_vfiprintf_r+0x78>
 800a348:	4629      	mov	r1, r5
 800a34a:	4630      	mov	r0, r6
 800a34c:	f000 f96e 	bl	800a62c <__swsetup_r>
 800a350:	b1c0      	cbz	r0, 800a384 <_vfiprintf_r+0x78>
 800a352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a354:	07dc      	lsls	r4, r3, #31
 800a356:	d50e      	bpl.n	800a376 <_vfiprintf_r+0x6a>
 800a358:	f04f 30ff 	mov.w	r0, #4294967295
 800a35c:	b01d      	add	sp, #116	; 0x74
 800a35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a362:	4b7b      	ldr	r3, [pc, #492]	; (800a550 <_vfiprintf_r+0x244>)
 800a364:	429d      	cmp	r5, r3
 800a366:	d101      	bne.n	800a36c <_vfiprintf_r+0x60>
 800a368:	68b5      	ldr	r5, [r6, #8]
 800a36a:	e7df      	b.n	800a32c <_vfiprintf_r+0x20>
 800a36c:	4b79      	ldr	r3, [pc, #484]	; (800a554 <_vfiprintf_r+0x248>)
 800a36e:	429d      	cmp	r5, r3
 800a370:	bf08      	it	eq
 800a372:	68f5      	ldreq	r5, [r6, #12]
 800a374:	e7da      	b.n	800a32c <_vfiprintf_r+0x20>
 800a376:	89ab      	ldrh	r3, [r5, #12]
 800a378:	0598      	lsls	r0, r3, #22
 800a37a:	d4ed      	bmi.n	800a358 <_vfiprintf_r+0x4c>
 800a37c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a37e:	f7ff ff67 	bl	800a250 <__retarget_lock_release_recursive>
 800a382:	e7e9      	b.n	800a358 <_vfiprintf_r+0x4c>
 800a384:	2300      	movs	r3, #0
 800a386:	9309      	str	r3, [sp, #36]	; 0x24
 800a388:	2320      	movs	r3, #32
 800a38a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a38e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a392:	2330      	movs	r3, #48	; 0x30
 800a394:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a558 <_vfiprintf_r+0x24c>
 800a398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a39c:	f04f 0901 	mov.w	r9, #1
 800a3a0:	4623      	mov	r3, r4
 800a3a2:	469a      	mov	sl, r3
 800a3a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a8:	b10a      	cbz	r2, 800a3ae <_vfiprintf_r+0xa2>
 800a3aa:	2a25      	cmp	r2, #37	; 0x25
 800a3ac:	d1f9      	bne.n	800a3a2 <_vfiprintf_r+0x96>
 800a3ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a3b2:	d00b      	beq.n	800a3cc <_vfiprintf_r+0xc0>
 800a3b4:	465b      	mov	r3, fp
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7ff ff94 	bl	800a2e8 <__sfputs_r>
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	f000 80aa 	beq.w	800a51a <_vfiprintf_r+0x20e>
 800a3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c8:	445a      	add	r2, fp
 800a3ca:	9209      	str	r2, [sp, #36]	; 0x24
 800a3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 80a2 	beq.w	800a51a <_vfiprintf_r+0x20e>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3e0:	f10a 0a01 	add.w	sl, sl, #1
 800a3e4:	9304      	str	r3, [sp, #16]
 800a3e6:	9307      	str	r3, [sp, #28]
 800a3e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3ec:	931a      	str	r3, [sp, #104]	; 0x68
 800a3ee:	4654      	mov	r4, sl
 800a3f0:	2205      	movs	r2, #5
 800a3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f6:	4858      	ldr	r0, [pc, #352]	; (800a558 <_vfiprintf_r+0x24c>)
 800a3f8:	f7f5 fef2 	bl	80001e0 <memchr>
 800a3fc:	9a04      	ldr	r2, [sp, #16]
 800a3fe:	b9d8      	cbnz	r0, 800a438 <_vfiprintf_r+0x12c>
 800a400:	06d1      	lsls	r1, r2, #27
 800a402:	bf44      	itt	mi
 800a404:	2320      	movmi	r3, #32
 800a406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a40a:	0713      	lsls	r3, r2, #28
 800a40c:	bf44      	itt	mi
 800a40e:	232b      	movmi	r3, #43	; 0x2b
 800a410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a414:	f89a 3000 	ldrb.w	r3, [sl]
 800a418:	2b2a      	cmp	r3, #42	; 0x2a
 800a41a:	d015      	beq.n	800a448 <_vfiprintf_r+0x13c>
 800a41c:	9a07      	ldr	r2, [sp, #28]
 800a41e:	4654      	mov	r4, sl
 800a420:	2000      	movs	r0, #0
 800a422:	f04f 0c0a 	mov.w	ip, #10
 800a426:	4621      	mov	r1, r4
 800a428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a42c:	3b30      	subs	r3, #48	; 0x30
 800a42e:	2b09      	cmp	r3, #9
 800a430:	d94e      	bls.n	800a4d0 <_vfiprintf_r+0x1c4>
 800a432:	b1b0      	cbz	r0, 800a462 <_vfiprintf_r+0x156>
 800a434:	9207      	str	r2, [sp, #28]
 800a436:	e014      	b.n	800a462 <_vfiprintf_r+0x156>
 800a438:	eba0 0308 	sub.w	r3, r0, r8
 800a43c:	fa09 f303 	lsl.w	r3, r9, r3
 800a440:	4313      	orrs	r3, r2
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	46a2      	mov	sl, r4
 800a446:	e7d2      	b.n	800a3ee <_vfiprintf_r+0xe2>
 800a448:	9b03      	ldr	r3, [sp, #12]
 800a44a:	1d19      	adds	r1, r3, #4
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	9103      	str	r1, [sp, #12]
 800a450:	2b00      	cmp	r3, #0
 800a452:	bfbb      	ittet	lt
 800a454:	425b      	neglt	r3, r3
 800a456:	f042 0202 	orrlt.w	r2, r2, #2
 800a45a:	9307      	strge	r3, [sp, #28]
 800a45c:	9307      	strlt	r3, [sp, #28]
 800a45e:	bfb8      	it	lt
 800a460:	9204      	strlt	r2, [sp, #16]
 800a462:	7823      	ldrb	r3, [r4, #0]
 800a464:	2b2e      	cmp	r3, #46	; 0x2e
 800a466:	d10c      	bne.n	800a482 <_vfiprintf_r+0x176>
 800a468:	7863      	ldrb	r3, [r4, #1]
 800a46a:	2b2a      	cmp	r3, #42	; 0x2a
 800a46c:	d135      	bne.n	800a4da <_vfiprintf_r+0x1ce>
 800a46e:	9b03      	ldr	r3, [sp, #12]
 800a470:	1d1a      	adds	r2, r3, #4
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	9203      	str	r2, [sp, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	bfb8      	it	lt
 800a47a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a47e:	3402      	adds	r4, #2
 800a480:	9305      	str	r3, [sp, #20]
 800a482:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a568 <_vfiprintf_r+0x25c>
 800a486:	7821      	ldrb	r1, [r4, #0]
 800a488:	2203      	movs	r2, #3
 800a48a:	4650      	mov	r0, sl
 800a48c:	f7f5 fea8 	bl	80001e0 <memchr>
 800a490:	b140      	cbz	r0, 800a4a4 <_vfiprintf_r+0x198>
 800a492:	2340      	movs	r3, #64	; 0x40
 800a494:	eba0 000a 	sub.w	r0, r0, sl
 800a498:	fa03 f000 	lsl.w	r0, r3, r0
 800a49c:	9b04      	ldr	r3, [sp, #16]
 800a49e:	4303      	orrs	r3, r0
 800a4a0:	3401      	adds	r4, #1
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a8:	482c      	ldr	r0, [pc, #176]	; (800a55c <_vfiprintf_r+0x250>)
 800a4aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ae:	2206      	movs	r2, #6
 800a4b0:	f7f5 fe96 	bl	80001e0 <memchr>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d03f      	beq.n	800a538 <_vfiprintf_r+0x22c>
 800a4b8:	4b29      	ldr	r3, [pc, #164]	; (800a560 <_vfiprintf_r+0x254>)
 800a4ba:	bb1b      	cbnz	r3, 800a504 <_vfiprintf_r+0x1f8>
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	3307      	adds	r3, #7
 800a4c0:	f023 0307 	bic.w	r3, r3, #7
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	9303      	str	r3, [sp, #12]
 800a4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ca:	443b      	add	r3, r7
 800a4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ce:	e767      	b.n	800a3a0 <_vfiprintf_r+0x94>
 800a4d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	2001      	movs	r0, #1
 800a4d8:	e7a5      	b.n	800a426 <_vfiprintf_r+0x11a>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	3401      	adds	r4, #1
 800a4de:	9305      	str	r3, [sp, #20]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	f04f 0c0a 	mov.w	ip, #10
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ec:	3a30      	subs	r2, #48	; 0x30
 800a4ee:	2a09      	cmp	r2, #9
 800a4f0:	d903      	bls.n	800a4fa <_vfiprintf_r+0x1ee>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0c5      	beq.n	800a482 <_vfiprintf_r+0x176>
 800a4f6:	9105      	str	r1, [sp, #20]
 800a4f8:	e7c3      	b.n	800a482 <_vfiprintf_r+0x176>
 800a4fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4fe:	4604      	mov	r4, r0
 800a500:	2301      	movs	r3, #1
 800a502:	e7f0      	b.n	800a4e6 <_vfiprintf_r+0x1da>
 800a504:	ab03      	add	r3, sp, #12
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	462a      	mov	r2, r5
 800a50a:	4b16      	ldr	r3, [pc, #88]	; (800a564 <_vfiprintf_r+0x258>)
 800a50c:	a904      	add	r1, sp, #16
 800a50e:	4630      	mov	r0, r6
 800a510:	f7fd feda 	bl	80082c8 <_printf_float>
 800a514:	4607      	mov	r7, r0
 800a516:	1c78      	adds	r0, r7, #1
 800a518:	d1d6      	bne.n	800a4c8 <_vfiprintf_r+0x1bc>
 800a51a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a51c:	07d9      	lsls	r1, r3, #31
 800a51e:	d405      	bmi.n	800a52c <_vfiprintf_r+0x220>
 800a520:	89ab      	ldrh	r3, [r5, #12]
 800a522:	059a      	lsls	r2, r3, #22
 800a524:	d402      	bmi.n	800a52c <_vfiprintf_r+0x220>
 800a526:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a528:	f7ff fe92 	bl	800a250 <__retarget_lock_release_recursive>
 800a52c:	89ab      	ldrh	r3, [r5, #12]
 800a52e:	065b      	lsls	r3, r3, #25
 800a530:	f53f af12 	bmi.w	800a358 <_vfiprintf_r+0x4c>
 800a534:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a536:	e711      	b.n	800a35c <_vfiprintf_r+0x50>
 800a538:	ab03      	add	r3, sp, #12
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	462a      	mov	r2, r5
 800a53e:	4b09      	ldr	r3, [pc, #36]	; (800a564 <_vfiprintf_r+0x258>)
 800a540:	a904      	add	r1, sp, #16
 800a542:	4630      	mov	r0, r6
 800a544:	f7fe f964 	bl	8008810 <_printf_i>
 800a548:	e7e4      	b.n	800a514 <_vfiprintf_r+0x208>
 800a54a:	bf00      	nop
 800a54c:	0800e3fc 	.word	0x0800e3fc
 800a550:	0800e41c 	.word	0x0800e41c
 800a554:	0800e3dc 	.word	0x0800e3dc
 800a558:	0800e284 	.word	0x0800e284
 800a55c:	0800e28e 	.word	0x0800e28e
 800a560:	080082c9 	.word	0x080082c9
 800a564:	0800a2e9 	.word	0x0800a2e9
 800a568:	0800e28a 	.word	0x0800e28a

0800a56c <__swbuf_r>:
 800a56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56e:	460e      	mov	r6, r1
 800a570:	4614      	mov	r4, r2
 800a572:	4605      	mov	r5, r0
 800a574:	b118      	cbz	r0, 800a57e <__swbuf_r+0x12>
 800a576:	6983      	ldr	r3, [r0, #24]
 800a578:	b90b      	cbnz	r3, 800a57e <__swbuf_r+0x12>
 800a57a:	f000 f9e7 	bl	800a94c <__sinit>
 800a57e:	4b21      	ldr	r3, [pc, #132]	; (800a604 <__swbuf_r+0x98>)
 800a580:	429c      	cmp	r4, r3
 800a582:	d12b      	bne.n	800a5dc <__swbuf_r+0x70>
 800a584:	686c      	ldr	r4, [r5, #4]
 800a586:	69a3      	ldr	r3, [r4, #24]
 800a588:	60a3      	str	r3, [r4, #8]
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	071a      	lsls	r2, r3, #28
 800a58e:	d52f      	bpl.n	800a5f0 <__swbuf_r+0x84>
 800a590:	6923      	ldr	r3, [r4, #16]
 800a592:	b36b      	cbz	r3, 800a5f0 <__swbuf_r+0x84>
 800a594:	6923      	ldr	r3, [r4, #16]
 800a596:	6820      	ldr	r0, [r4, #0]
 800a598:	1ac0      	subs	r0, r0, r3
 800a59a:	6963      	ldr	r3, [r4, #20]
 800a59c:	b2f6      	uxtb	r6, r6
 800a59e:	4283      	cmp	r3, r0
 800a5a0:	4637      	mov	r7, r6
 800a5a2:	dc04      	bgt.n	800a5ae <__swbuf_r+0x42>
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f000 f93c 	bl	800a824 <_fflush_r>
 800a5ac:	bb30      	cbnz	r0, 800a5fc <__swbuf_r+0x90>
 800a5ae:	68a3      	ldr	r3, [r4, #8]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	60a3      	str	r3, [r4, #8]
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	1c5a      	adds	r2, r3, #1
 800a5b8:	6022      	str	r2, [r4, #0]
 800a5ba:	701e      	strb	r6, [r3, #0]
 800a5bc:	6963      	ldr	r3, [r4, #20]
 800a5be:	3001      	adds	r0, #1
 800a5c0:	4283      	cmp	r3, r0
 800a5c2:	d004      	beq.n	800a5ce <__swbuf_r+0x62>
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	07db      	lsls	r3, r3, #31
 800a5c8:	d506      	bpl.n	800a5d8 <__swbuf_r+0x6c>
 800a5ca:	2e0a      	cmp	r6, #10
 800a5cc:	d104      	bne.n	800a5d8 <__swbuf_r+0x6c>
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	f000 f927 	bl	800a824 <_fflush_r>
 800a5d6:	b988      	cbnz	r0, 800a5fc <__swbuf_r+0x90>
 800a5d8:	4638      	mov	r0, r7
 800a5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <__swbuf_r+0x9c>)
 800a5de:	429c      	cmp	r4, r3
 800a5e0:	d101      	bne.n	800a5e6 <__swbuf_r+0x7a>
 800a5e2:	68ac      	ldr	r4, [r5, #8]
 800a5e4:	e7cf      	b.n	800a586 <__swbuf_r+0x1a>
 800a5e6:	4b09      	ldr	r3, [pc, #36]	; (800a60c <__swbuf_r+0xa0>)
 800a5e8:	429c      	cmp	r4, r3
 800a5ea:	bf08      	it	eq
 800a5ec:	68ec      	ldreq	r4, [r5, #12]
 800a5ee:	e7ca      	b.n	800a586 <__swbuf_r+0x1a>
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	f000 f81a 	bl	800a62c <__swsetup_r>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d0cb      	beq.n	800a594 <__swbuf_r+0x28>
 800a5fc:	f04f 37ff 	mov.w	r7, #4294967295
 800a600:	e7ea      	b.n	800a5d8 <__swbuf_r+0x6c>
 800a602:	bf00      	nop
 800a604:	0800e3fc 	.word	0x0800e3fc
 800a608:	0800e41c 	.word	0x0800e41c
 800a60c:	0800e3dc 	.word	0x0800e3dc

0800a610 <__ascii_wctomb>:
 800a610:	b149      	cbz	r1, 800a626 <__ascii_wctomb+0x16>
 800a612:	2aff      	cmp	r2, #255	; 0xff
 800a614:	bf85      	ittet	hi
 800a616:	238a      	movhi	r3, #138	; 0x8a
 800a618:	6003      	strhi	r3, [r0, #0]
 800a61a:	700a      	strbls	r2, [r1, #0]
 800a61c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a620:	bf98      	it	ls
 800a622:	2001      	movls	r0, #1
 800a624:	4770      	bx	lr
 800a626:	4608      	mov	r0, r1
 800a628:	4770      	bx	lr
	...

0800a62c <__swsetup_r>:
 800a62c:	4b32      	ldr	r3, [pc, #200]	; (800a6f8 <__swsetup_r+0xcc>)
 800a62e:	b570      	push	{r4, r5, r6, lr}
 800a630:	681d      	ldr	r5, [r3, #0]
 800a632:	4606      	mov	r6, r0
 800a634:	460c      	mov	r4, r1
 800a636:	b125      	cbz	r5, 800a642 <__swsetup_r+0x16>
 800a638:	69ab      	ldr	r3, [r5, #24]
 800a63a:	b913      	cbnz	r3, 800a642 <__swsetup_r+0x16>
 800a63c:	4628      	mov	r0, r5
 800a63e:	f000 f985 	bl	800a94c <__sinit>
 800a642:	4b2e      	ldr	r3, [pc, #184]	; (800a6fc <__swsetup_r+0xd0>)
 800a644:	429c      	cmp	r4, r3
 800a646:	d10f      	bne.n	800a668 <__swsetup_r+0x3c>
 800a648:	686c      	ldr	r4, [r5, #4]
 800a64a:	89a3      	ldrh	r3, [r4, #12]
 800a64c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a650:	0719      	lsls	r1, r3, #28
 800a652:	d42c      	bmi.n	800a6ae <__swsetup_r+0x82>
 800a654:	06dd      	lsls	r5, r3, #27
 800a656:	d411      	bmi.n	800a67c <__swsetup_r+0x50>
 800a658:	2309      	movs	r3, #9
 800a65a:	6033      	str	r3, [r6, #0]
 800a65c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a660:	81a3      	strh	r3, [r4, #12]
 800a662:	f04f 30ff 	mov.w	r0, #4294967295
 800a666:	e03e      	b.n	800a6e6 <__swsetup_r+0xba>
 800a668:	4b25      	ldr	r3, [pc, #148]	; (800a700 <__swsetup_r+0xd4>)
 800a66a:	429c      	cmp	r4, r3
 800a66c:	d101      	bne.n	800a672 <__swsetup_r+0x46>
 800a66e:	68ac      	ldr	r4, [r5, #8]
 800a670:	e7eb      	b.n	800a64a <__swsetup_r+0x1e>
 800a672:	4b24      	ldr	r3, [pc, #144]	; (800a704 <__swsetup_r+0xd8>)
 800a674:	429c      	cmp	r4, r3
 800a676:	bf08      	it	eq
 800a678:	68ec      	ldreq	r4, [r5, #12]
 800a67a:	e7e6      	b.n	800a64a <__swsetup_r+0x1e>
 800a67c:	0758      	lsls	r0, r3, #29
 800a67e:	d512      	bpl.n	800a6a6 <__swsetup_r+0x7a>
 800a680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a682:	b141      	cbz	r1, 800a696 <__swsetup_r+0x6a>
 800a684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a688:	4299      	cmp	r1, r3
 800a68a:	d002      	beq.n	800a692 <__swsetup_r+0x66>
 800a68c:	4630      	mov	r0, r6
 800a68e:	f7fd fcd1 	bl	8008034 <_free_r>
 800a692:	2300      	movs	r3, #0
 800a694:	6363      	str	r3, [r4, #52]	; 0x34
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a69c:	81a3      	strh	r3, [r4, #12]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	6063      	str	r3, [r4, #4]
 800a6a2:	6923      	ldr	r3, [r4, #16]
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	89a3      	ldrh	r3, [r4, #12]
 800a6a8:	f043 0308 	orr.w	r3, r3, #8
 800a6ac:	81a3      	strh	r3, [r4, #12]
 800a6ae:	6923      	ldr	r3, [r4, #16]
 800a6b0:	b94b      	cbnz	r3, 800a6c6 <__swsetup_r+0x9a>
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6bc:	d003      	beq.n	800a6c6 <__swsetup_r+0x9a>
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f000 fa05 	bl	800aad0 <__smakebuf_r>
 800a6c6:	89a0      	ldrh	r0, [r4, #12]
 800a6c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6cc:	f010 0301 	ands.w	r3, r0, #1
 800a6d0:	d00a      	beq.n	800a6e8 <__swsetup_r+0xbc>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60a3      	str	r3, [r4, #8]
 800a6d6:	6963      	ldr	r3, [r4, #20]
 800a6d8:	425b      	negs	r3, r3
 800a6da:	61a3      	str	r3, [r4, #24]
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	b943      	cbnz	r3, 800a6f2 <__swsetup_r+0xc6>
 800a6e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6e4:	d1ba      	bne.n	800a65c <__swsetup_r+0x30>
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}
 800a6e8:	0781      	lsls	r1, r0, #30
 800a6ea:	bf58      	it	pl
 800a6ec:	6963      	ldrpl	r3, [r4, #20]
 800a6ee:	60a3      	str	r3, [r4, #8]
 800a6f0:	e7f4      	b.n	800a6dc <__swsetup_r+0xb0>
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	e7f7      	b.n	800a6e6 <__swsetup_r+0xba>
 800a6f6:	bf00      	nop
 800a6f8:	20000c1c 	.word	0x20000c1c
 800a6fc:	0800e3fc 	.word	0x0800e3fc
 800a700:	0800e41c 	.word	0x0800e41c
 800a704:	0800e3dc 	.word	0x0800e3dc

0800a708 <abort>:
 800a708:	b508      	push	{r3, lr}
 800a70a:	2006      	movs	r0, #6
 800a70c:	f000 fa48 	bl	800aba0 <raise>
 800a710:	2001      	movs	r0, #1
 800a712:	f000 fc6d 	bl	800aff0 <_exit>
	...

0800a718 <__sflush_r>:
 800a718:	898a      	ldrh	r2, [r1, #12]
 800a71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71e:	4605      	mov	r5, r0
 800a720:	0710      	lsls	r0, r2, #28
 800a722:	460c      	mov	r4, r1
 800a724:	d458      	bmi.n	800a7d8 <__sflush_r+0xc0>
 800a726:	684b      	ldr	r3, [r1, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	dc05      	bgt.n	800a738 <__sflush_r+0x20>
 800a72c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dc02      	bgt.n	800a738 <__sflush_r+0x20>
 800a732:	2000      	movs	r0, #0
 800a734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a73a:	2e00      	cmp	r6, #0
 800a73c:	d0f9      	beq.n	800a732 <__sflush_r+0x1a>
 800a73e:	2300      	movs	r3, #0
 800a740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a744:	682f      	ldr	r7, [r5, #0]
 800a746:	602b      	str	r3, [r5, #0]
 800a748:	d032      	beq.n	800a7b0 <__sflush_r+0x98>
 800a74a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a74c:	89a3      	ldrh	r3, [r4, #12]
 800a74e:	075a      	lsls	r2, r3, #29
 800a750:	d505      	bpl.n	800a75e <__sflush_r+0x46>
 800a752:	6863      	ldr	r3, [r4, #4]
 800a754:	1ac0      	subs	r0, r0, r3
 800a756:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a758:	b10b      	cbz	r3, 800a75e <__sflush_r+0x46>
 800a75a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a75c:	1ac0      	subs	r0, r0, r3
 800a75e:	2300      	movs	r3, #0
 800a760:	4602      	mov	r2, r0
 800a762:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a764:	6a21      	ldr	r1, [r4, #32]
 800a766:	4628      	mov	r0, r5
 800a768:	47b0      	blx	r6
 800a76a:	1c43      	adds	r3, r0, #1
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	d106      	bne.n	800a77e <__sflush_r+0x66>
 800a770:	6829      	ldr	r1, [r5, #0]
 800a772:	291d      	cmp	r1, #29
 800a774:	d82c      	bhi.n	800a7d0 <__sflush_r+0xb8>
 800a776:	4a2a      	ldr	r2, [pc, #168]	; (800a820 <__sflush_r+0x108>)
 800a778:	40ca      	lsrs	r2, r1
 800a77a:	07d6      	lsls	r6, r2, #31
 800a77c:	d528      	bpl.n	800a7d0 <__sflush_r+0xb8>
 800a77e:	2200      	movs	r2, #0
 800a780:	6062      	str	r2, [r4, #4]
 800a782:	04d9      	lsls	r1, r3, #19
 800a784:	6922      	ldr	r2, [r4, #16]
 800a786:	6022      	str	r2, [r4, #0]
 800a788:	d504      	bpl.n	800a794 <__sflush_r+0x7c>
 800a78a:	1c42      	adds	r2, r0, #1
 800a78c:	d101      	bne.n	800a792 <__sflush_r+0x7a>
 800a78e:	682b      	ldr	r3, [r5, #0]
 800a790:	b903      	cbnz	r3, 800a794 <__sflush_r+0x7c>
 800a792:	6560      	str	r0, [r4, #84]	; 0x54
 800a794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a796:	602f      	str	r7, [r5, #0]
 800a798:	2900      	cmp	r1, #0
 800a79a:	d0ca      	beq.n	800a732 <__sflush_r+0x1a>
 800a79c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7a0:	4299      	cmp	r1, r3
 800a7a2:	d002      	beq.n	800a7aa <__sflush_r+0x92>
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f7fd fc45 	bl	8008034 <_free_r>
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a7ae:	e7c1      	b.n	800a734 <__sflush_r+0x1c>
 800a7b0:	6a21      	ldr	r1, [r4, #32]
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	47b0      	blx	r6
 800a7b8:	1c41      	adds	r1, r0, #1
 800a7ba:	d1c7      	bne.n	800a74c <__sflush_r+0x34>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d0c4      	beq.n	800a74c <__sflush_r+0x34>
 800a7c2:	2b1d      	cmp	r3, #29
 800a7c4:	d001      	beq.n	800a7ca <__sflush_r+0xb2>
 800a7c6:	2b16      	cmp	r3, #22
 800a7c8:	d101      	bne.n	800a7ce <__sflush_r+0xb6>
 800a7ca:	602f      	str	r7, [r5, #0]
 800a7cc:	e7b1      	b.n	800a732 <__sflush_r+0x1a>
 800a7ce:	89a3      	ldrh	r3, [r4, #12]
 800a7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d4:	81a3      	strh	r3, [r4, #12]
 800a7d6:	e7ad      	b.n	800a734 <__sflush_r+0x1c>
 800a7d8:	690f      	ldr	r7, [r1, #16]
 800a7da:	2f00      	cmp	r7, #0
 800a7dc:	d0a9      	beq.n	800a732 <__sflush_r+0x1a>
 800a7de:	0793      	lsls	r3, r2, #30
 800a7e0:	680e      	ldr	r6, [r1, #0]
 800a7e2:	bf08      	it	eq
 800a7e4:	694b      	ldreq	r3, [r1, #20]
 800a7e6:	600f      	str	r7, [r1, #0]
 800a7e8:	bf18      	it	ne
 800a7ea:	2300      	movne	r3, #0
 800a7ec:	eba6 0807 	sub.w	r8, r6, r7
 800a7f0:	608b      	str	r3, [r1, #8]
 800a7f2:	f1b8 0f00 	cmp.w	r8, #0
 800a7f6:	dd9c      	ble.n	800a732 <__sflush_r+0x1a>
 800a7f8:	6a21      	ldr	r1, [r4, #32]
 800a7fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7fc:	4643      	mov	r3, r8
 800a7fe:	463a      	mov	r2, r7
 800a800:	4628      	mov	r0, r5
 800a802:	47b0      	blx	r6
 800a804:	2800      	cmp	r0, #0
 800a806:	dc06      	bgt.n	800a816 <__sflush_r+0xfe>
 800a808:	89a3      	ldrh	r3, [r4, #12]
 800a80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a80e:	81a3      	strh	r3, [r4, #12]
 800a810:	f04f 30ff 	mov.w	r0, #4294967295
 800a814:	e78e      	b.n	800a734 <__sflush_r+0x1c>
 800a816:	4407      	add	r7, r0
 800a818:	eba8 0800 	sub.w	r8, r8, r0
 800a81c:	e7e9      	b.n	800a7f2 <__sflush_r+0xda>
 800a81e:	bf00      	nop
 800a820:	20400001 	.word	0x20400001

0800a824 <_fflush_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	690b      	ldr	r3, [r1, #16]
 800a828:	4605      	mov	r5, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	b913      	cbnz	r3, 800a834 <_fflush_r+0x10>
 800a82e:	2500      	movs	r5, #0
 800a830:	4628      	mov	r0, r5
 800a832:	bd38      	pop	{r3, r4, r5, pc}
 800a834:	b118      	cbz	r0, 800a83e <_fflush_r+0x1a>
 800a836:	6983      	ldr	r3, [r0, #24]
 800a838:	b90b      	cbnz	r3, 800a83e <_fflush_r+0x1a>
 800a83a:	f000 f887 	bl	800a94c <__sinit>
 800a83e:	4b14      	ldr	r3, [pc, #80]	; (800a890 <_fflush_r+0x6c>)
 800a840:	429c      	cmp	r4, r3
 800a842:	d11b      	bne.n	800a87c <_fflush_r+0x58>
 800a844:	686c      	ldr	r4, [r5, #4]
 800a846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0ef      	beq.n	800a82e <_fflush_r+0xa>
 800a84e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a850:	07d0      	lsls	r0, r2, #31
 800a852:	d404      	bmi.n	800a85e <_fflush_r+0x3a>
 800a854:	0599      	lsls	r1, r3, #22
 800a856:	d402      	bmi.n	800a85e <_fflush_r+0x3a>
 800a858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a85a:	f7ff fcf8 	bl	800a24e <__retarget_lock_acquire_recursive>
 800a85e:	4628      	mov	r0, r5
 800a860:	4621      	mov	r1, r4
 800a862:	f7ff ff59 	bl	800a718 <__sflush_r>
 800a866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a868:	07da      	lsls	r2, r3, #31
 800a86a:	4605      	mov	r5, r0
 800a86c:	d4e0      	bmi.n	800a830 <_fflush_r+0xc>
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	059b      	lsls	r3, r3, #22
 800a872:	d4dd      	bmi.n	800a830 <_fflush_r+0xc>
 800a874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a876:	f7ff fceb 	bl	800a250 <__retarget_lock_release_recursive>
 800a87a:	e7d9      	b.n	800a830 <_fflush_r+0xc>
 800a87c:	4b05      	ldr	r3, [pc, #20]	; (800a894 <_fflush_r+0x70>)
 800a87e:	429c      	cmp	r4, r3
 800a880:	d101      	bne.n	800a886 <_fflush_r+0x62>
 800a882:	68ac      	ldr	r4, [r5, #8]
 800a884:	e7df      	b.n	800a846 <_fflush_r+0x22>
 800a886:	4b04      	ldr	r3, [pc, #16]	; (800a898 <_fflush_r+0x74>)
 800a888:	429c      	cmp	r4, r3
 800a88a:	bf08      	it	eq
 800a88c:	68ec      	ldreq	r4, [r5, #12]
 800a88e:	e7da      	b.n	800a846 <_fflush_r+0x22>
 800a890:	0800e3fc 	.word	0x0800e3fc
 800a894:	0800e41c 	.word	0x0800e41c
 800a898:	0800e3dc 	.word	0x0800e3dc

0800a89c <std>:
 800a89c:	2300      	movs	r3, #0
 800a89e:	b510      	push	{r4, lr}
 800a8a0:	4604      	mov	r4, r0
 800a8a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a8a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8aa:	6083      	str	r3, [r0, #8]
 800a8ac:	8181      	strh	r1, [r0, #12]
 800a8ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a8b0:	81c2      	strh	r2, [r0, #14]
 800a8b2:	6183      	str	r3, [r0, #24]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	2208      	movs	r2, #8
 800a8b8:	305c      	adds	r0, #92	; 0x5c
 800a8ba:	f7fd fbb3 	bl	8008024 <memset>
 800a8be:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <std+0x38>)
 800a8c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a8c2:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <std+0x3c>)
 800a8c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8c6:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <std+0x40>)
 800a8c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8ca:	4b05      	ldr	r3, [pc, #20]	; (800a8e0 <std+0x44>)
 800a8cc:	6224      	str	r4, [r4, #32]
 800a8ce:	6323      	str	r3, [r4, #48]	; 0x30
 800a8d0:	bd10      	pop	{r4, pc}
 800a8d2:	bf00      	nop
 800a8d4:	0800abd9 	.word	0x0800abd9
 800a8d8:	0800abfb 	.word	0x0800abfb
 800a8dc:	0800ac33 	.word	0x0800ac33
 800a8e0:	0800ac57 	.word	0x0800ac57

0800a8e4 <_cleanup_r>:
 800a8e4:	4901      	ldr	r1, [pc, #4]	; (800a8ec <_cleanup_r+0x8>)
 800a8e6:	f000 b8af 	b.w	800aa48 <_fwalk_reent>
 800a8ea:	bf00      	nop
 800a8ec:	0800a825 	.word	0x0800a825

0800a8f0 <__sfmoreglue>:
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	1e4a      	subs	r2, r1, #1
 800a8f4:	2568      	movs	r5, #104	; 0x68
 800a8f6:	4355      	muls	r5, r2
 800a8f8:	460e      	mov	r6, r1
 800a8fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8fe:	f7fd fbe9 	bl	80080d4 <_malloc_r>
 800a902:	4604      	mov	r4, r0
 800a904:	b140      	cbz	r0, 800a918 <__sfmoreglue+0x28>
 800a906:	2100      	movs	r1, #0
 800a908:	e9c0 1600 	strd	r1, r6, [r0]
 800a90c:	300c      	adds	r0, #12
 800a90e:	60a0      	str	r0, [r4, #8]
 800a910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a914:	f7fd fb86 	bl	8008024 <memset>
 800a918:	4620      	mov	r0, r4
 800a91a:	bd70      	pop	{r4, r5, r6, pc}

0800a91c <__sfp_lock_acquire>:
 800a91c:	4801      	ldr	r0, [pc, #4]	; (800a924 <__sfp_lock_acquire+0x8>)
 800a91e:	f7ff bc96 	b.w	800a24e <__retarget_lock_acquire_recursive>
 800a922:	bf00      	nop
 800a924:	2000114c 	.word	0x2000114c

0800a928 <__sfp_lock_release>:
 800a928:	4801      	ldr	r0, [pc, #4]	; (800a930 <__sfp_lock_release+0x8>)
 800a92a:	f7ff bc91 	b.w	800a250 <__retarget_lock_release_recursive>
 800a92e:	bf00      	nop
 800a930:	2000114c 	.word	0x2000114c

0800a934 <__sinit_lock_acquire>:
 800a934:	4801      	ldr	r0, [pc, #4]	; (800a93c <__sinit_lock_acquire+0x8>)
 800a936:	f7ff bc8a 	b.w	800a24e <__retarget_lock_acquire_recursive>
 800a93a:	bf00      	nop
 800a93c:	20001147 	.word	0x20001147

0800a940 <__sinit_lock_release>:
 800a940:	4801      	ldr	r0, [pc, #4]	; (800a948 <__sinit_lock_release+0x8>)
 800a942:	f7ff bc85 	b.w	800a250 <__retarget_lock_release_recursive>
 800a946:	bf00      	nop
 800a948:	20001147 	.word	0x20001147

0800a94c <__sinit>:
 800a94c:	b510      	push	{r4, lr}
 800a94e:	4604      	mov	r4, r0
 800a950:	f7ff fff0 	bl	800a934 <__sinit_lock_acquire>
 800a954:	69a3      	ldr	r3, [r4, #24]
 800a956:	b11b      	cbz	r3, 800a960 <__sinit+0x14>
 800a958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a95c:	f7ff bff0 	b.w	800a940 <__sinit_lock_release>
 800a960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a964:	6523      	str	r3, [r4, #80]	; 0x50
 800a966:	4b13      	ldr	r3, [pc, #76]	; (800a9b4 <__sinit+0x68>)
 800a968:	4a13      	ldr	r2, [pc, #76]	; (800a9b8 <__sinit+0x6c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a96e:	42a3      	cmp	r3, r4
 800a970:	bf04      	itt	eq
 800a972:	2301      	moveq	r3, #1
 800a974:	61a3      	streq	r3, [r4, #24]
 800a976:	4620      	mov	r0, r4
 800a978:	f000 f820 	bl	800a9bc <__sfp>
 800a97c:	6060      	str	r0, [r4, #4]
 800a97e:	4620      	mov	r0, r4
 800a980:	f000 f81c 	bl	800a9bc <__sfp>
 800a984:	60a0      	str	r0, [r4, #8]
 800a986:	4620      	mov	r0, r4
 800a988:	f000 f818 	bl	800a9bc <__sfp>
 800a98c:	2200      	movs	r2, #0
 800a98e:	60e0      	str	r0, [r4, #12]
 800a990:	2104      	movs	r1, #4
 800a992:	6860      	ldr	r0, [r4, #4]
 800a994:	f7ff ff82 	bl	800a89c <std>
 800a998:	68a0      	ldr	r0, [r4, #8]
 800a99a:	2201      	movs	r2, #1
 800a99c:	2109      	movs	r1, #9
 800a99e:	f7ff ff7d 	bl	800a89c <std>
 800a9a2:	68e0      	ldr	r0, [r4, #12]
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	2112      	movs	r1, #18
 800a9a8:	f7ff ff78 	bl	800a89c <std>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	61a3      	str	r3, [r4, #24]
 800a9b0:	e7d2      	b.n	800a958 <__sinit+0xc>
 800a9b2:	bf00      	nop
 800a9b4:	0800e05c 	.word	0x0800e05c
 800a9b8:	0800a8e5 	.word	0x0800a8e5

0800a9bc <__sfp>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	4607      	mov	r7, r0
 800a9c0:	f7ff ffac 	bl	800a91c <__sfp_lock_acquire>
 800a9c4:	4b1e      	ldr	r3, [pc, #120]	; (800aa40 <__sfp+0x84>)
 800a9c6:	681e      	ldr	r6, [r3, #0]
 800a9c8:	69b3      	ldr	r3, [r6, #24]
 800a9ca:	b913      	cbnz	r3, 800a9d2 <__sfp+0x16>
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	f7ff ffbd 	bl	800a94c <__sinit>
 800a9d2:	3648      	adds	r6, #72	; 0x48
 800a9d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	d503      	bpl.n	800a9e4 <__sfp+0x28>
 800a9dc:	6833      	ldr	r3, [r6, #0]
 800a9de:	b30b      	cbz	r3, 800aa24 <__sfp+0x68>
 800a9e0:	6836      	ldr	r6, [r6, #0]
 800a9e2:	e7f7      	b.n	800a9d4 <__sfp+0x18>
 800a9e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a9e8:	b9d5      	cbnz	r5, 800aa20 <__sfp+0x64>
 800a9ea:	4b16      	ldr	r3, [pc, #88]	; (800aa44 <__sfp+0x88>)
 800a9ec:	60e3      	str	r3, [r4, #12]
 800a9ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9f2:	6665      	str	r5, [r4, #100]	; 0x64
 800a9f4:	f7ff fc2a 	bl	800a24c <__retarget_lock_init_recursive>
 800a9f8:	f7ff ff96 	bl	800a928 <__sfp_lock_release>
 800a9fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa04:	6025      	str	r5, [r4, #0]
 800aa06:	61a5      	str	r5, [r4, #24]
 800aa08:	2208      	movs	r2, #8
 800aa0a:	4629      	mov	r1, r5
 800aa0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa10:	f7fd fb08 	bl	8008024 <memset>
 800aa14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa20:	3468      	adds	r4, #104	; 0x68
 800aa22:	e7d9      	b.n	800a9d8 <__sfp+0x1c>
 800aa24:	2104      	movs	r1, #4
 800aa26:	4638      	mov	r0, r7
 800aa28:	f7ff ff62 	bl	800a8f0 <__sfmoreglue>
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	6030      	str	r0, [r6, #0]
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d1d5      	bne.n	800a9e0 <__sfp+0x24>
 800aa34:	f7ff ff78 	bl	800a928 <__sfp_lock_release>
 800aa38:	230c      	movs	r3, #12
 800aa3a:	603b      	str	r3, [r7, #0]
 800aa3c:	e7ee      	b.n	800aa1c <__sfp+0x60>
 800aa3e:	bf00      	nop
 800aa40:	0800e05c 	.word	0x0800e05c
 800aa44:	ffff0001 	.word	0xffff0001

0800aa48 <_fwalk_reent>:
 800aa48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	4688      	mov	r8, r1
 800aa50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa54:	2700      	movs	r7, #0
 800aa56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa5a:	f1b9 0901 	subs.w	r9, r9, #1
 800aa5e:	d505      	bpl.n	800aa6c <_fwalk_reent+0x24>
 800aa60:	6824      	ldr	r4, [r4, #0]
 800aa62:	2c00      	cmp	r4, #0
 800aa64:	d1f7      	bne.n	800aa56 <_fwalk_reent+0xe>
 800aa66:	4638      	mov	r0, r7
 800aa68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa6c:	89ab      	ldrh	r3, [r5, #12]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d907      	bls.n	800aa82 <_fwalk_reent+0x3a>
 800aa72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa76:	3301      	adds	r3, #1
 800aa78:	d003      	beq.n	800aa82 <_fwalk_reent+0x3a>
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	47c0      	blx	r8
 800aa80:	4307      	orrs	r7, r0
 800aa82:	3568      	adds	r5, #104	; 0x68
 800aa84:	e7e9      	b.n	800aa5a <_fwalk_reent+0x12>

0800aa86 <__swhatbuf_r>:
 800aa86:	b570      	push	{r4, r5, r6, lr}
 800aa88:	460e      	mov	r6, r1
 800aa8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa8e:	2900      	cmp	r1, #0
 800aa90:	b096      	sub	sp, #88	; 0x58
 800aa92:	4614      	mov	r4, r2
 800aa94:	461d      	mov	r5, r3
 800aa96:	da07      	bge.n	800aaa8 <__swhatbuf_r+0x22>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	602b      	str	r3, [r5, #0]
 800aa9c:	89b3      	ldrh	r3, [r6, #12]
 800aa9e:	061a      	lsls	r2, r3, #24
 800aaa0:	d410      	bmi.n	800aac4 <__swhatbuf_r+0x3e>
 800aaa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaa6:	e00e      	b.n	800aac6 <__swhatbuf_r+0x40>
 800aaa8:	466a      	mov	r2, sp
 800aaaa:	f000 f8fb 	bl	800aca4 <_fstat_r>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	dbf2      	blt.n	800aa98 <__swhatbuf_r+0x12>
 800aab2:	9a01      	ldr	r2, [sp, #4]
 800aab4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aab8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aabc:	425a      	negs	r2, r3
 800aabe:	415a      	adcs	r2, r3
 800aac0:	602a      	str	r2, [r5, #0]
 800aac2:	e7ee      	b.n	800aaa2 <__swhatbuf_r+0x1c>
 800aac4:	2340      	movs	r3, #64	; 0x40
 800aac6:	2000      	movs	r0, #0
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	b016      	add	sp, #88	; 0x58
 800aacc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aad0 <__smakebuf_r>:
 800aad0:	898b      	ldrh	r3, [r1, #12]
 800aad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aad4:	079d      	lsls	r5, r3, #30
 800aad6:	4606      	mov	r6, r0
 800aad8:	460c      	mov	r4, r1
 800aada:	d507      	bpl.n	800aaec <__smakebuf_r+0x1c>
 800aadc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	6123      	str	r3, [r4, #16]
 800aae4:	2301      	movs	r3, #1
 800aae6:	6163      	str	r3, [r4, #20]
 800aae8:	b002      	add	sp, #8
 800aaea:	bd70      	pop	{r4, r5, r6, pc}
 800aaec:	ab01      	add	r3, sp, #4
 800aaee:	466a      	mov	r2, sp
 800aaf0:	f7ff ffc9 	bl	800aa86 <__swhatbuf_r>
 800aaf4:	9900      	ldr	r1, [sp, #0]
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	4630      	mov	r0, r6
 800aafa:	f7fd faeb 	bl	80080d4 <_malloc_r>
 800aafe:	b948      	cbnz	r0, 800ab14 <__smakebuf_r+0x44>
 800ab00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab04:	059a      	lsls	r2, r3, #22
 800ab06:	d4ef      	bmi.n	800aae8 <__smakebuf_r+0x18>
 800ab08:	f023 0303 	bic.w	r3, r3, #3
 800ab0c:	f043 0302 	orr.w	r3, r3, #2
 800ab10:	81a3      	strh	r3, [r4, #12]
 800ab12:	e7e3      	b.n	800aadc <__smakebuf_r+0xc>
 800ab14:	4b0d      	ldr	r3, [pc, #52]	; (800ab4c <__smakebuf_r+0x7c>)
 800ab16:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	6020      	str	r0, [r4, #0]
 800ab1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab20:	81a3      	strh	r3, [r4, #12]
 800ab22:	9b00      	ldr	r3, [sp, #0]
 800ab24:	6163      	str	r3, [r4, #20]
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	6120      	str	r0, [r4, #16]
 800ab2a:	b15b      	cbz	r3, 800ab44 <__smakebuf_r+0x74>
 800ab2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab30:	4630      	mov	r0, r6
 800ab32:	f000 f8c9 	bl	800acc8 <_isatty_r>
 800ab36:	b128      	cbz	r0, 800ab44 <__smakebuf_r+0x74>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	f023 0303 	bic.w	r3, r3, #3
 800ab3e:	f043 0301 	orr.w	r3, r3, #1
 800ab42:	81a3      	strh	r3, [r4, #12]
 800ab44:	89a0      	ldrh	r0, [r4, #12]
 800ab46:	4305      	orrs	r5, r0
 800ab48:	81a5      	strh	r5, [r4, #12]
 800ab4a:	e7cd      	b.n	800aae8 <__smakebuf_r+0x18>
 800ab4c:	0800a8e5 	.word	0x0800a8e5

0800ab50 <_raise_r>:
 800ab50:	291f      	cmp	r1, #31
 800ab52:	b538      	push	{r3, r4, r5, lr}
 800ab54:	4604      	mov	r4, r0
 800ab56:	460d      	mov	r5, r1
 800ab58:	d904      	bls.n	800ab64 <_raise_r+0x14>
 800ab5a:	2316      	movs	r3, #22
 800ab5c:	6003      	str	r3, [r0, #0]
 800ab5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab66:	b112      	cbz	r2, 800ab6e <_raise_r+0x1e>
 800ab68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab6c:	b94b      	cbnz	r3, 800ab82 <_raise_r+0x32>
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f000 f830 	bl	800abd4 <_getpid_r>
 800ab74:	462a      	mov	r2, r5
 800ab76:	4601      	mov	r1, r0
 800ab78:	4620      	mov	r0, r4
 800ab7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab7e:	f000 b817 	b.w	800abb0 <_kill_r>
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d00a      	beq.n	800ab9c <_raise_r+0x4c>
 800ab86:	1c59      	adds	r1, r3, #1
 800ab88:	d103      	bne.n	800ab92 <_raise_r+0x42>
 800ab8a:	2316      	movs	r3, #22
 800ab8c:	6003      	str	r3, [r0, #0]
 800ab8e:	2001      	movs	r0, #1
 800ab90:	e7e7      	b.n	800ab62 <_raise_r+0x12>
 800ab92:	2400      	movs	r4, #0
 800ab94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab98:	4628      	mov	r0, r5
 800ab9a:	4798      	blx	r3
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	e7e0      	b.n	800ab62 <_raise_r+0x12>

0800aba0 <raise>:
 800aba0:	4b02      	ldr	r3, [pc, #8]	; (800abac <raise+0xc>)
 800aba2:	4601      	mov	r1, r0
 800aba4:	6818      	ldr	r0, [r3, #0]
 800aba6:	f7ff bfd3 	b.w	800ab50 <_raise_r>
 800abaa:	bf00      	nop
 800abac:	20000c1c 	.word	0x20000c1c

0800abb0 <_kill_r>:
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	4d07      	ldr	r5, [pc, #28]	; (800abd0 <_kill_r+0x20>)
 800abb4:	2300      	movs	r3, #0
 800abb6:	4604      	mov	r4, r0
 800abb8:	4608      	mov	r0, r1
 800abba:	4611      	mov	r1, r2
 800abbc:	602b      	str	r3, [r5, #0]
 800abbe:	f000 f9f7 	bl	800afb0 <_kill>
 800abc2:	1c43      	adds	r3, r0, #1
 800abc4:	d102      	bne.n	800abcc <_kill_r+0x1c>
 800abc6:	682b      	ldr	r3, [r5, #0]
 800abc8:	b103      	cbz	r3, 800abcc <_kill_r+0x1c>
 800abca:	6023      	str	r3, [r4, #0]
 800abcc:	bd38      	pop	{r3, r4, r5, pc}
 800abce:	bf00      	nop
 800abd0:	20001140 	.word	0x20001140

0800abd4 <_getpid_r>:
 800abd4:	f000 b9dc 	b.w	800af90 <_getpid>

0800abd8 <__sread>:
 800abd8:	b510      	push	{r4, lr}
 800abda:	460c      	mov	r4, r1
 800abdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe0:	f000 f894 	bl	800ad0c <_read_r>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	bfab      	itete	ge
 800abe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800abea:	89a3      	ldrhlt	r3, [r4, #12]
 800abec:	181b      	addge	r3, r3, r0
 800abee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800abf2:	bfac      	ite	ge
 800abf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800abf6:	81a3      	strhlt	r3, [r4, #12]
 800abf8:	bd10      	pop	{r4, pc}

0800abfa <__swrite>:
 800abfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abfe:	461f      	mov	r7, r3
 800ac00:	898b      	ldrh	r3, [r1, #12]
 800ac02:	05db      	lsls	r3, r3, #23
 800ac04:	4605      	mov	r5, r0
 800ac06:	460c      	mov	r4, r1
 800ac08:	4616      	mov	r6, r2
 800ac0a:	d505      	bpl.n	800ac18 <__swrite+0x1e>
 800ac0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac10:	2302      	movs	r3, #2
 800ac12:	2200      	movs	r2, #0
 800ac14:	f000 f868 	bl	800ace8 <_lseek_r>
 800ac18:	89a3      	ldrh	r3, [r4, #12]
 800ac1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac22:	81a3      	strh	r3, [r4, #12]
 800ac24:	4632      	mov	r2, r6
 800ac26:	463b      	mov	r3, r7
 800ac28:	4628      	mov	r0, r5
 800ac2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2e:	f000 b817 	b.w	800ac60 <_write_r>

0800ac32 <__sseek>:
 800ac32:	b510      	push	{r4, lr}
 800ac34:	460c      	mov	r4, r1
 800ac36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac3a:	f000 f855 	bl	800ace8 <_lseek_r>
 800ac3e:	1c43      	adds	r3, r0, #1
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	bf15      	itete	ne
 800ac44:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac4e:	81a3      	strheq	r3, [r4, #12]
 800ac50:	bf18      	it	ne
 800ac52:	81a3      	strhne	r3, [r4, #12]
 800ac54:	bd10      	pop	{r4, pc}

0800ac56 <__sclose>:
 800ac56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5a:	f000 b813 	b.w	800ac84 <_close_r>
	...

0800ac60 <_write_r>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	4d07      	ldr	r5, [pc, #28]	; (800ac80 <_write_r+0x20>)
 800ac64:	4604      	mov	r4, r0
 800ac66:	4608      	mov	r0, r1
 800ac68:	4611      	mov	r1, r2
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	602a      	str	r2, [r5, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f000 f9b6 	bl	800afe0 <_write>
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	d102      	bne.n	800ac7e <_write_r+0x1e>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	b103      	cbz	r3, 800ac7e <_write_r+0x1e>
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	bd38      	pop	{r3, r4, r5, pc}
 800ac80:	20001140 	.word	0x20001140

0800ac84 <_close_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4d06      	ldr	r5, [pc, #24]	; (800aca0 <_close_r+0x1c>)
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	602b      	str	r3, [r5, #0]
 800ac90:	f000 f96e 	bl	800af70 <_close>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d102      	bne.n	800ac9e <_close_r+0x1a>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	b103      	cbz	r3, 800ac9e <_close_r+0x1a>
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	20001140 	.word	0x20001140

0800aca4 <_fstat_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4d07      	ldr	r5, [pc, #28]	; (800acc4 <_fstat_r+0x20>)
 800aca8:	2300      	movs	r3, #0
 800acaa:	4604      	mov	r4, r0
 800acac:	4608      	mov	r0, r1
 800acae:	4611      	mov	r1, r2
 800acb0:	602b      	str	r3, [r5, #0]
 800acb2:	f000 f965 	bl	800af80 <_fstat>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	d102      	bne.n	800acc0 <_fstat_r+0x1c>
 800acba:	682b      	ldr	r3, [r5, #0]
 800acbc:	b103      	cbz	r3, 800acc0 <_fstat_r+0x1c>
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	bd38      	pop	{r3, r4, r5, pc}
 800acc2:	bf00      	nop
 800acc4:	20001140 	.word	0x20001140

0800acc8 <_isatty_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4d06      	ldr	r5, [pc, #24]	; (800ace4 <_isatty_r+0x1c>)
 800accc:	2300      	movs	r3, #0
 800acce:	4604      	mov	r4, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	602b      	str	r3, [r5, #0]
 800acd4:	f000 f964 	bl	800afa0 <_isatty>
 800acd8:	1c43      	adds	r3, r0, #1
 800acda:	d102      	bne.n	800ace2 <_isatty_r+0x1a>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	b103      	cbz	r3, 800ace2 <_isatty_r+0x1a>
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	bd38      	pop	{r3, r4, r5, pc}
 800ace4:	20001140 	.word	0x20001140

0800ace8 <_lseek_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4d07      	ldr	r5, [pc, #28]	; (800ad08 <_lseek_r+0x20>)
 800acec:	4604      	mov	r4, r0
 800acee:	4608      	mov	r0, r1
 800acf0:	4611      	mov	r1, r2
 800acf2:	2200      	movs	r2, #0
 800acf4:	602a      	str	r2, [r5, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	f000 f962 	bl	800afc0 <_lseek>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_lseek_r+0x1e>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_lseek_r+0x1e>
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	20001140 	.word	0x20001140

0800ad0c <_read_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d07      	ldr	r5, [pc, #28]	; (800ad2c <_read_r+0x20>)
 800ad10:	4604      	mov	r4, r0
 800ad12:	4608      	mov	r0, r1
 800ad14:	4611      	mov	r1, r2
 800ad16:	2200      	movs	r2, #0
 800ad18:	602a      	str	r2, [r5, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f000 f958 	bl	800afd0 <_read>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d102      	bne.n	800ad2a <_read_r+0x1e>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	b103      	cbz	r3, 800ad2a <_read_r+0x1e>
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	20001140 	.word	0x20001140

0800ad30 <expf>:
 800ad30:	b508      	push	{r3, lr}
 800ad32:	ed2d 8b02 	vpush	{d8}
 800ad36:	eef0 8a40 	vmov.f32	s17, s0
 800ad3a:	f000 f837 	bl	800adac <__ieee754_expf>
 800ad3e:	4b16      	ldr	r3, [pc, #88]	; (800ad98 <expf+0x68>)
 800ad40:	f993 3000 	ldrsb.w	r3, [r3]
 800ad44:	3301      	adds	r3, #1
 800ad46:	eeb0 8a40 	vmov.f32	s16, s0
 800ad4a:	d011      	beq.n	800ad70 <expf+0x40>
 800ad4c:	eeb0 0a68 	vmov.f32	s0, s17
 800ad50:	f000 f900 	bl	800af54 <finitef>
 800ad54:	b160      	cbz	r0, 800ad70 <expf+0x40>
 800ad56:	eddf 7a11 	vldr	s15, [pc, #68]	; 800ad9c <expf+0x6c>
 800ad5a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ad5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad62:	dd0a      	ble.n	800ad7a <expf+0x4a>
 800ad64:	f7fd f91e 	bl	8007fa4 <__errno>
 800ad68:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800ada0 <expf+0x70>
 800ad6c:	2322      	movs	r3, #34	; 0x22
 800ad6e:	6003      	str	r3, [r0, #0]
 800ad70:	eeb0 0a48 	vmov.f32	s0, s16
 800ad74:	ecbd 8b02 	vpop	{d8}
 800ad78:	bd08      	pop	{r3, pc}
 800ad7a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800ada4 <expf+0x74>
 800ad7e:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ad82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad86:	d5f3      	bpl.n	800ad70 <expf+0x40>
 800ad88:	f7fd f90c 	bl	8007fa4 <__errno>
 800ad8c:	2322      	movs	r3, #34	; 0x22
 800ad8e:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800ada8 <expf+0x78>
 800ad92:	6003      	str	r3, [r0, #0]
 800ad94:	e7ec      	b.n	800ad70 <expf+0x40>
 800ad96:	bf00      	nop
 800ad98:	20000dec 	.word	0x20000dec
 800ad9c:	42b17180 	.word	0x42b17180
 800ada0:	7f800000 	.word	0x7f800000
 800ada4:	c2cff1b5 	.word	0xc2cff1b5
 800ada8:	00000000 	.word	0x00000000

0800adac <__ieee754_expf>:
 800adac:	ee10 2a10 	vmov	r2, s0
 800adb0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800adb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800adb8:	d902      	bls.n	800adc0 <__ieee754_expf+0x14>
 800adba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800adbe:	4770      	bx	lr
 800adc0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800adc4:	d106      	bne.n	800add4 <__ieee754_expf+0x28>
 800adc6:	eddf 7a51 	vldr	s15, [pc, #324]	; 800af0c <__ieee754_expf+0x160>
 800adca:	2b00      	cmp	r3, #0
 800adcc:	bf18      	it	ne
 800adce:	eeb0 0a67 	vmovne.f32	s0, s15
 800add2:	4770      	bx	lr
 800add4:	484e      	ldr	r0, [pc, #312]	; (800af10 <__ieee754_expf+0x164>)
 800add6:	4282      	cmp	r2, r0
 800add8:	dd04      	ble.n	800ade4 <__ieee754_expf+0x38>
 800adda:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800af14 <__ieee754_expf+0x168>
 800adde:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ade2:	4770      	bx	lr
 800ade4:	2a00      	cmp	r2, #0
 800ade6:	da03      	bge.n	800adf0 <__ieee754_expf+0x44>
 800ade8:	4a4b      	ldr	r2, [pc, #300]	; (800af18 <__ieee754_expf+0x16c>)
 800adea:	4291      	cmp	r1, r2
 800adec:	f200 808a 	bhi.w	800af04 <__ieee754_expf+0x158>
 800adf0:	4a4a      	ldr	r2, [pc, #296]	; (800af1c <__ieee754_expf+0x170>)
 800adf2:	4291      	cmp	r1, r2
 800adf4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800adf8:	d954      	bls.n	800aea4 <__ieee754_expf+0xf8>
 800adfa:	4a49      	ldr	r2, [pc, #292]	; (800af20 <__ieee754_expf+0x174>)
 800adfc:	4291      	cmp	r1, r2
 800adfe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ae02:	d836      	bhi.n	800ae72 <__ieee754_expf+0xc6>
 800ae04:	4947      	ldr	r1, [pc, #284]	; (800af24 <__ieee754_expf+0x178>)
 800ae06:	4411      	add	r1, r2
 800ae08:	ed91 7a00 	vldr	s14, [r1]
 800ae0c:	4946      	ldr	r1, [pc, #280]	; (800af28 <__ieee754_expf+0x17c>)
 800ae0e:	440a      	add	r2, r1
 800ae10:	edd2 7a00 	vldr	s15, [r2]
 800ae14:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ae18:	f1c3 0201 	rsb	r2, r3, #1
 800ae1c:	1ad2      	subs	r2, r2, r3
 800ae1e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ae22:	ee60 6a00 	vmul.f32	s13, s0, s0
 800ae26:	eddf 5a41 	vldr	s11, [pc, #260]	; 800af2c <__ieee754_expf+0x180>
 800ae2a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800af30 <__ieee754_expf+0x184>
 800ae2e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800ae32:	eddf 5a40 	vldr	s11, [pc, #256]	; 800af34 <__ieee754_expf+0x188>
 800ae36:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ae3a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800af38 <__ieee754_expf+0x18c>
 800ae3e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800ae42:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800af3c <__ieee754_expf+0x190>
 800ae46:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ae4a:	eeb0 5a40 	vmov.f32	s10, s0
 800ae4e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800ae52:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ae56:	eef0 6a45 	vmov.f32	s13, s10
 800ae5a:	ee20 5a05 	vmul.f32	s10, s0, s10
 800ae5e:	bb92      	cbnz	r2, 800aec6 <__ieee754_expf+0x11a>
 800ae60:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800ae64:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800ae68:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ae6c:	ee36 0a40 	vsub.f32	s0, s12, s0
 800ae70:	4770      	bx	lr
 800ae72:	4b33      	ldr	r3, [pc, #204]	; (800af40 <__ieee754_expf+0x194>)
 800ae74:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800af44 <__ieee754_expf+0x198>
 800ae78:	4413      	add	r3, r2
 800ae7a:	edd3 7a00 	vldr	s15, [r3]
 800ae7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ae82:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800af48 <__ieee754_expf+0x19c>
 800ae86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae8a:	ee17 2a90 	vmov	r2, s15
 800ae8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae92:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ae96:	eeb0 7a40 	vmov.f32	s14, s0
 800ae9a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800af4c <__ieee754_expf+0x1a0>
 800ae9e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aea2:	e7bc      	b.n	800ae1e <__ieee754_expf+0x72>
 800aea4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800aea8:	d20b      	bcs.n	800aec2 <__ieee754_expf+0x116>
 800aeaa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800af14 <__ieee754_expf+0x168>
 800aeae:	ee70 6a26 	vadd.f32	s13, s0, s13
 800aeb2:	eef4 6ac6 	vcmpe.f32	s13, s12
 800aeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeba:	dd02      	ble.n	800aec2 <__ieee754_expf+0x116>
 800aebc:	ee30 0a06 	vadd.f32	s0, s0, s12
 800aec0:	4770      	bx	lr
 800aec2:	2200      	movs	r2, #0
 800aec4:	e7ad      	b.n	800ae22 <__ieee754_expf+0x76>
 800aec6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800aeca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800aece:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800aed2:	bfb8      	it	lt
 800aed4:	3264      	addlt	r2, #100	; 0x64
 800aed6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aeda:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800aede:	ee76 7a40 	vsub.f32	s15, s12, s0
 800aee2:	ee17 3a90 	vmov	r3, s15
 800aee6:	bfab      	itete	ge
 800aee8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800aeec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800aef0:	ee00 3a10 	vmovge	s0, r3
 800aef4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800af50 <__ieee754_expf+0x1a4>
 800aef8:	bfbc      	itt	lt
 800aefa:	ee00 3a10 	vmovlt	s0, r3
 800aefe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800af02:	4770      	bx	lr
 800af04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af0c <__ieee754_expf+0x160>
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	00000000 	.word	0x00000000
 800af10:	42b17217 	.word	0x42b17217
 800af14:	7149f2ca 	.word	0x7149f2ca
 800af18:	42cff1b5 	.word	0x42cff1b5
 800af1c:	3eb17218 	.word	0x3eb17218
 800af20:	3f851591 	.word	0x3f851591
 800af24:	0800e444 	.word	0x0800e444
 800af28:	0800e44c 	.word	0x0800e44c
 800af2c:	3331bb4c 	.word	0x3331bb4c
 800af30:	b5ddea0e 	.word	0xb5ddea0e
 800af34:	388ab355 	.word	0x388ab355
 800af38:	bb360b61 	.word	0xbb360b61
 800af3c:	3e2aaaab 	.word	0x3e2aaaab
 800af40:	0800e43c 	.word	0x0800e43c
 800af44:	3fb8aa3b 	.word	0x3fb8aa3b
 800af48:	3f317180 	.word	0x3f317180
 800af4c:	3717f7d1 	.word	0x3717f7d1
 800af50:	0d800000 	.word	0x0d800000

0800af54 <finitef>:
 800af54:	b082      	sub	sp, #8
 800af56:	ed8d 0a01 	vstr	s0, [sp, #4]
 800af5a:	9801      	ldr	r0, [sp, #4]
 800af5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800af60:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800af64:	bfac      	ite	ge
 800af66:	2000      	movge	r0, #0
 800af68:	2001      	movlt	r0, #1
 800af6a:	b002      	add	sp, #8
 800af6c:	4770      	bx	lr
	...

0800af70 <_close>:
 800af70:	4b02      	ldr	r3, [pc, #8]	; (800af7c <_close+0xc>)
 800af72:	2258      	movs	r2, #88	; 0x58
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	f04f 30ff 	mov.w	r0, #4294967295
 800af7a:	4770      	bx	lr
 800af7c:	20001140 	.word	0x20001140

0800af80 <_fstat>:
 800af80:	4b02      	ldr	r3, [pc, #8]	; (800af8c <_fstat+0xc>)
 800af82:	2258      	movs	r2, #88	; 0x58
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	f04f 30ff 	mov.w	r0, #4294967295
 800af8a:	4770      	bx	lr
 800af8c:	20001140 	.word	0x20001140

0800af90 <_getpid>:
 800af90:	4b02      	ldr	r3, [pc, #8]	; (800af9c <_getpid+0xc>)
 800af92:	2258      	movs	r2, #88	; 0x58
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	f04f 30ff 	mov.w	r0, #4294967295
 800af9a:	4770      	bx	lr
 800af9c:	20001140 	.word	0x20001140

0800afa0 <_isatty>:
 800afa0:	4b02      	ldr	r3, [pc, #8]	; (800afac <_isatty+0xc>)
 800afa2:	2258      	movs	r2, #88	; 0x58
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	2000      	movs	r0, #0
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	20001140 	.word	0x20001140

0800afb0 <_kill>:
 800afb0:	4b02      	ldr	r3, [pc, #8]	; (800afbc <_kill+0xc>)
 800afb2:	2258      	movs	r2, #88	; 0x58
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	f04f 30ff 	mov.w	r0, #4294967295
 800afba:	4770      	bx	lr
 800afbc:	20001140 	.word	0x20001140

0800afc0 <_lseek>:
 800afc0:	4b02      	ldr	r3, [pc, #8]	; (800afcc <_lseek+0xc>)
 800afc2:	2258      	movs	r2, #88	; 0x58
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	f04f 30ff 	mov.w	r0, #4294967295
 800afca:	4770      	bx	lr
 800afcc:	20001140 	.word	0x20001140

0800afd0 <_read>:
 800afd0:	4b02      	ldr	r3, [pc, #8]	; (800afdc <_read+0xc>)
 800afd2:	2258      	movs	r2, #88	; 0x58
 800afd4:	601a      	str	r2, [r3, #0]
 800afd6:	f04f 30ff 	mov.w	r0, #4294967295
 800afda:	4770      	bx	lr
 800afdc:	20001140 	.word	0x20001140

0800afe0 <_write>:
 800afe0:	4b02      	ldr	r3, [pc, #8]	; (800afec <_write+0xc>)
 800afe2:	2258      	movs	r2, #88	; 0x58
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	f04f 30ff 	mov.w	r0, #4294967295
 800afea:	4770      	bx	lr
 800afec:	20001140 	.word	0x20001140

0800aff0 <_exit>:
 800aff0:	e7fe      	b.n	800aff0 <_exit>
	...

0800aff4 <_init>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	bf00      	nop
 800aff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affa:	bc08      	pop	{r3}
 800affc:	469e      	mov	lr, r3
 800affe:	4770      	bx	lr

0800b000 <_fini>:
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b002:	bf00      	nop
 800b004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b006:	bc08      	pop	{r3}
 800b008:	469e      	mov	lr, r3
 800b00a:	4770      	bx	lr
